name: Deploy Storybook Preview

on:
  pull_request:
    branches-ignore:
      - main
      - gh-pages

env:
  NODE_VERSION: '22.13.1'
  NODE_OPTIONS: '--max_old_space_size=8196'
  NX_CLOUD: false
  IGNORE_COMMIT_MESSAGE: 'chore(release): publish'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

jobs:
  deploy-alpha:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Add NPM auth token file
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Install dependencies
        run: yarn --production=false --frozen-lockfile

      - name: Ensure workflow is associated with a pull request
        run: |
          if [[ -z "${{ github.event.pull_request.number }}" ]]; then
            echo "This workflow is not associated with a pull request; exiting"
            exit 1
          fi

      - name: Skip build from automated commit
        id: check-commit
        run: |
          COMMIT_MESSAGE=$(git log --format=oneline -n 1 ${{ github.sha }})
          echo "Build started due to commit with message $COMMIT_MESSAGE, blocking builds started by ${IGNORE_COMMIT_MESSAGE}"
          if [[ $COMMIT_MESSAGE == *"${IGNORE_COMMIT_MESSAGE}"* ]]; then
            echo "Skipping build due to automated commit"
            exit 0
          fi

      - name: Set git user
        run: |
          git config --global user.email "dev@codecademy.com"
          git config --global user.name "codecademydev"
          git config --global push.default current

      - name: Build All Packages
        run: yarn build

      - name: Build Storybook
        run: yarn nx run styleguide:build-storybook

      - name: Configure Netlify CLI
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          # Configure Netlify CLI to work with the styleguide project
          cd packages/styleguide
          npx netlify-cli@22.0.0 link --id ${{ secrets.NETLIFY_SITE_ID }}

      - name: Deploy to Netlify
        id: deploy
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          DEPLOY_MESSAGE="User: ${{ github.actor }} Project: ${{ github.repository }} Pull Request: ${{ github.event.pull_request.html_url }}"
          # Deploy using filter approach
          if npx netlify-cli@22.0.0 deploy --message "${DEPLOY_MESSAGE}" --dir dist/storybook/styleguide --filter @codecademy/styleguide --json > .deploy-output 2>&1; then
            DEPLOY_OUTPUT=$(cat .deploy-output)
            # Escape the output for GitHub Actions
            DEPLOY_OUTPUT_ESCAPED=$(echo "$DEPLOY_OUTPUT" | sed 's/"/\\"/g' | tr '\n' ' ')
            echo "deploy-output<<EOF" >> $GITHUB_OUTPUT
            echo "$DEPLOY_OUTPUT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Deploy failed. Output:"
            cat .deploy-output
            exit 1
          fi

      - name: Comment on PR with deployment info
        if: steps.deploy.outputs.deploy-output
        run: |
          export DEPLOY_OUTPUT="${{ steps.deploy.outputs.deploy-output }}"
          echo "Raw deploy output: $DEPLOY_OUTPUT"

          # Extract URLs using a more robust method
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -o '"deploy_url":"[^"]*"' | cut -d'"' -f4)
          LOGS_URL=$(echo "$DEPLOY_OUTPUT" | grep -o '"logs":"[^"]*"' | cut -d'"' -f4)

          echo "Deploy URL: $DEPLOY_URL"
          echo "Logs URL: $LOGS_URL"

          if [ -z "$DEPLOY_OUTPUT" ]
          then
            echo "No deploy output found, will not add PR comment"
          else
            COMMENT_MSG="<p><a href=\"${DEPLOY_URL}\">${DEPLOY_URL}</a></p><p><a href=\"${LOGS_URL}\">Deploy Logs</a></p>"
            docker run --rm \
                    -e GITHUB_TOKEN \
                    -e GITHUB_OWNER="${{ github.repository_owner }}" \
                    -e GITHUB_REPO="${{ github.event.repository.name }}" \
                    -e GITHUB_COMMENT_TYPE=pr \
                    -e GITHUB_PR_ISSUE_NUMBER="${{ github.event.pull_request.number }}" \
                    -e GITHUB_COMMENT_TEMPLATE='<p>ðŸš€ Styleguide deploy preview ready!</p>{{.}}<!--ALPHA_DEPLOY_COMMENT-->' \
                    -e GITHUB_DELETE_COMMENT_REGEX="ALPHA_DEPLOY_COMMENT" \
                    -e GITHUB_COMMENT="${COMMENT_MSG}" \
                    cloudposse/github-commenter:0.5.0-58
          fi
