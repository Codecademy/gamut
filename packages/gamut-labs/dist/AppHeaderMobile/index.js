import _styled from "@emotion/styled/base";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Box, ContentContainer, IconButton, Overlay } from '@codecademy/gamut';
import { CloseIcon, MenuIcon } from '@codecademy/gamut-icons';
import { css } from '@codecademy/gamut-styles';
import React, { useState } from 'react';
import { mapItemToElement, StyledAppBar } from '../AppHeader';
import { AppHeaderListItem } from '../AppHeader/AppHeaderElements/AppHeaderListItem';
import { appHeaderMobileBreakpoint } from '../AppHeader/shared';
import { AppHeaderMainMenuMobile } from '../AppHeaderMobile/AppHeaderMainMenuMobile';
import { CrossDeviceBookmarksView } from '../Bookmarks/types';
import { useBookmarkComponentsPair } from '../Bookmarks/useBookmarkComponentsPair';
import { HeaderHeightArea } from '../HeaderHeightArea';
import { NotificationsContents } from '../Notifications/NotificationsContents';
import { useHeaderNotifications } from '../Notifications/useHeaderNotifications';

var StyledOverlay = /*#__PURE__*/_styled(Overlay, {
  target: "eizxoml2",
  label: "StyledOverlay"
})(css({
  display: _defineProperty({
    _: "block"
  }, appHeaderMobileBreakpoint, "none"),
  width: "100vw",
  height: "100vh",
  opacity: 1,
  bg: "background",
  position: "fixed",
  left: 0,
  top: 0,
  overflowX: "hidden"
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

var StyledContentContainer = /*#__PURE__*/_styled(ContentContainer, {
  target: "eizxoml1",
  label: "StyledContentContainer"
})(css({
  display: "flex",
  flexDirection: "column",
  p: 0
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

var StyledMenuBar = _styled("ul", {
  target: "eizxoml0",
  label: "StyledMenuBar"
})(css({
  display: "flex",
  padding: 0,
  listStyle: "none",
  margin: 0,
  width: "100%",
  alignItems: 'center'
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

export var AppHeaderMobile = function AppHeaderMobile(_ref) {
  var action = _ref.action,
      items = _ref.items,
      notifications = _ref.notifications,
      onSearch = _ref.onSearch,
      redirectParam = _ref.redirectParam,
      isAnon = _ref.isAnon,
      openCrossDeviceItemId = _ref.openCrossDeviceItemId,
      setOpenCrossDeviceItemId = _ref.setOpenCrossDeviceItemId,
      crossDeviceBookmarkParts = _ref.crossDeviceBookmarkParts;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      mobileMenuOpen = _useState2[0],
      setMobileMenuOpen = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      allowScroll = _useState4[0],
      setAllowScroll = _useState4[1];

  var _useHeaderNotificatio = useHeaderNotifications({
    settings: notifications,
    Renderer: NotificationsContents,
    openCrossDeviceItemId: openCrossDeviceItemId,
    setOpenCrossDeviceItemId: setOpenCrossDeviceItemId
  }),
      _useHeaderNotificatio2 = _slicedToArray(_useHeaderNotificatio, 2),
      notificationsBell = _useHeaderNotificatio2[0],
      notificationsView = _useHeaderNotificatio2[1];

  var _useBookmarkComponent = useBookmarkComponentsPair({
    openCrossDeviceItemId: openCrossDeviceItemId,
    setOpenCrossDeviceItemId: setOpenCrossDeviceItemId,
    bookmarkParts: crossDeviceBookmarkParts,
    view: CrossDeviceBookmarksView.MOBILE,
    isAnon: isAnon
  }),
      _useBookmarkComponent2 = _slicedToArray(_useBookmarkComponent, 2),
      bookmarksButton = _useBookmarkComponent2[0],
      bookmarksContent = _useBookmarkComponent2[1];

  var openMobileMenu = function openMobileMenu() {
    setMobileMenuOpen(true);
  };

  var mapItemsToElement = function mapItemsToElement(items, side, hideExtraItems) {
    var shouldHideItems = hideExtraItems === true && items.length > 1;
    return items.map(function (item, index) {
      var isLastItem = index + 1 === items.length;
      var isHidable = !isLastItem && shouldHideItems;
      return /*#__PURE__*/React.createElement(AppHeaderListItem, {
        key: item.id,
        ml: side === 'right' && index === 0 ? 'auto' : 0,
        display: {
          _: isHidable ? 'none' : 'flex',
          xs: 'flex'
        }
      }, mapItemToElement(action, item, isAnon, redirectParam, undefined, true));
    });
  };

  var right = [].concat(_toConsumableArray(notificationsBell ? [notificationsBell] : []), _toConsumableArray(bookmarksButton ? [bookmarksButton] : []), _toConsumableArray(items.right));

  var onItemType = function onItemType(type) {
    if (type && (type === 'catalog-dropdown' || type === 'experimental-resources-dropdown')) {
      setAllowScroll(true);
    } else {
      setAllowScroll(false);
    }
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, !mobileMenuOpen &&
  /*#__PURE__*/
  // need this bc AppBar has a hardcoded z-Index of 15
  React.createElement(HeaderHeightArea, {
    display: _defineProperty({
      _: "block"
    }, appHeaderMobileBreakpoint, "none"),
    as: "nav",
    title: "Mobile Navigation"
  }, /*#__PURE__*/React.createElement(StyledAppBar, null, /*#__PURE__*/React.createElement(StyledMenuBar, {
    role: "menubar"
  }, mapItemsToElement(items.left, 'left'), mapItemsToElement(right, 'right', true), /*#__PURE__*/React.createElement(AppHeaderListItem, {
    ml: right.length === 0 ? 'auto' : 0
  }, /*#__PURE__*/React.createElement(IconButton, {
    "data-testid": "header-mobile-menu",
    "aria-label": "open navigation menu",
    onClick: function onClick() {
      openMobileMenu();
    },
    icon: MenuIcon,
    variant: "interface"
  }))))), /*#__PURE__*/React.createElement(StyledOverlay, {
    clickOutsideCloses: true,
    escapeCloses: true,
    isOpen: mobileMenuOpen,
    onRequestClose: function onRequestClose() {
      return setMobileMenuOpen(false);
    },
    allowScroll: allowScroll
  }, /*#__PURE__*/React.createElement(HeaderHeightArea, {
    display: _defineProperty({
      _: "block"
    }, appHeaderMobileBreakpoint, "none"),
    as: "nav",
    title: "Mobile Navigation",
    "data-testid": "header-mobile-menu-dropdown"
  }, /*#__PURE__*/React.createElement(StyledAppBar, null, /*#__PURE__*/React.createElement(StyledMenuBar, {
    role: "menubar"
  }, mapItemsToElement(items.left, 'left'), /*#__PURE__*/React.createElement(AppHeaderListItem, {
    ml: "auto"
  }, /*#__PURE__*/React.createElement(IconButton, {
    "aria-label": "close menu",
    onClick: function onClick() {
      setMobileMenuOpen(false);
    },
    icon: CloseIcon
  })))), /*#__PURE__*/React.createElement(StyledContentContainer, {
    as: "ul",
    role: "menubar",
    size: "small"
  }, /*#__PURE__*/React.createElement(AppHeaderMainMenuMobile, {
    action: action,
    items: items.mainMenu,
    onSearch: onSearch,
    getItemType: onItemType,
    isAnon: isAnon,
    handleCloseMainMenu: function handleCloseMainMenu() {
      return setMobileMenuOpen(false);
    }
  })))), /*#__PURE__*/React.createElement(Box, {
    display: _defineProperty({
      _: "block"
    }, appHeaderMobileBreakpoint, "none")
  }, notificationsView, bookmarksContent));
};