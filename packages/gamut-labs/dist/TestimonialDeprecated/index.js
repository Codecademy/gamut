import _styled from "@emotion/styled/base";

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

import { Anchor, Box, FlexBox, GridBox } from '@codecademy/gamut';
import { CheckerDense } from '@codecademy/gamut-patterns';
import { colors } from '@codecademy/gamut-styles';
import React from 'react';
import darkQuotes from '../assets/darkQuotes.svg';
import lightQuotes from '../assets/lightQuotes.svg';
import { Avatar } from '../Avatar';
import { Byline } from '../Byline';
var modes = {
  dark: {
    cardBackground: colors.navy,
    textColor: colors.beige,
    quoteIcon: darkQuotes
  },
  light: {
    cardBackground: colors.beige,
    textColor: colors.navy,
    quoteIcon: lightQuotes
  }
};

var Shadow = /*#__PURE__*/_styled(CheckerDense, {
  target: "e1d9okcf4",
  label: "Shadow"
})("display:block;position:absolute;bottom:0;right:0;height:calc(100% - 1rem);width:calc(100% - 1rem);color:", function (_ref) {
  var mode = _ref.mode;
  return modes[mode].cardBackground;
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbERlcHJlY2F0ZWQvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCMEQiLCJmaWxlIjoiLi4vLi4vc3JjL1Rlc3RpbW9uaWFsRGVwcmVjYXRlZC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxleEJveCwgR3JpZEJveCwgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBDaGVja2VyRGVuc2UgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1wYXR0ZXJucyc7XG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGRhcmtRdW90ZXMgZnJvbSAnLi4vYXNzZXRzL2RhcmtRdW90ZXMuc3ZnJztcbmltcG9ydCBsaWdodFF1b3RlcyBmcm9tICcuLi9hc3NldHMvbGlnaHRRdW90ZXMuc3ZnJztcbmltcG9ydCB7IEF2YXRhciB9IGZyb20gJy4uL0F2YXRhcic7XG5pbXBvcnQgeyBCeWxpbmUgfSBmcm9tICcuLi9CeWxpbmUnO1xuXG5jb25zdCBtb2RlcyA9IHtcbiAgZGFyazoge1xuICAgIGNhcmRCYWNrZ3JvdW5kOiBjb2xvcnMubmF2eSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5iZWlnZSxcbiAgICBxdW90ZUljb246IGRhcmtRdW90ZXMsXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgY2FyZEJhY2tncm91bmQ6IGNvbG9ycy5iZWlnZSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5uYXZ5LFxuICAgIHF1b3RlSWNvbjogbGlnaHRRdW90ZXMsXG4gIH0sXG59O1xuXG5jb25zdCBTaGFkb3cgPSBzdHlsZWQoQ2hlY2tlckRlbnNlKTx7IG1vZGU6IFZpc3VhbFRoZW1lIH0+YFxuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDFyZW0pO1xuICB3aWR0aDogY2FsYygxMDAlIC0gMXJlbSk7XG4gIGNvbG9yOiAkeyh7IG1vZGUgfSkgPT4gbW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuYDtcblxuY29uc3QgVGVzdGltb25pYWxDYXJkID0gc3R5bGVkKEdyaWRCb3gpKCk7XG5cbmNvbnN0IFRlc3RpbW9uaWFsV3JhcHBlciA9IHN0eWxlZChCb3gpPHsgbW9kZTogVmlzdWFsVGhlbWUgfT5gXG4gIGhlaWdodDogMTAwJTtcblxuICAmOmhvdmVyIHtcbiAgICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAyKTtcbiAgICB9XG4gIH1cblxuICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgJHsoeyBtb2RlIH0pID0+IGBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7bW9kZXNbbW9kZV0udGV4dENvbG9yfTtcbiAgICBgfVxuICAgIGNsaXAtcGF0aDogaW5zZXQoMCAxcmVtIDFyZW0gMCk7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDFyZW07XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG5gO1xuXG5jb25zdCBRdW90ZUljb24gPSBzdHlsZWQuaW1nYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogLTIuNXJlbTtcbmA7XG5cbmNvbnN0IFF1b3RlVGV4dCA9IHN0eWxlZC5xYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHF1b3Rlczogbm9uZTtcbiAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmZvbnRTaXplWzI2XX07XG4gIGxpbmUtaGVpZ2h0OiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmxpbmVIZWlnaHQuYmFzZX07XG5gO1xuXG5leHBvcnQgdHlwZSBUZXN0aW1vbmlhbERlcHJlY2F0ZWRQcm9wcyA9IHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIG9jY3VwYXRpb246IHN0cmluZztcbiAgcXVvdGU6IHN0cmluZztcbiAgbW9kZTogVmlzdWFsVGhlbWU7XG4gIC8qKlxuICAgKiBBc3NvY2lhdGVkIHdvcmtwbGFjZSBvciBpbnN0aXR1dGlvblxuICAgKi9cbiAgY29tcGFueT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGF2YXRhciBwb3J0cmFpdFxuICAgKi9cbiAgaW1hZ2VVcmw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIGxvbmcgcXVvdGUgdG8gcmVwbGFjZSB0aGUgdGV4dCB3aXRoIGF0IFNNIHZpZXdwb3J0cyBhbmQgaGlnaGVyLlxuICAgKi9cbiAgbG9uZ1F1b3RlPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkICBUaGlzIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgc29vbi5cbiAqXG4gKiBQbGVhc2UgY2hlY2sgdGhlIGdhbXV0IGJvYXJkIGZvciB1cGRhdGVzIG9uIHRoZSBuZXcgdmVyc2lvbiBvZiBUZXN0aW1vbmlhbFxuICovXG5cbmV4cG9ydCBjb25zdCBUZXN0aW1vbmlhbERlcHJlY2F0ZWQ6IFJlYWN0LkZDPFRlc3RpbW9uaWFsRGVwcmVjYXRlZFByb3BzPiA9ICh7XG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIG9jY3VwYXRpb24sXG4gIHF1b3RlLFxuICBtb2RlID0gJ2xpZ2h0JyxcbiAgY29tcGFueSxcbiAgaW1hZ2VVcmwsXG4gIGxvbmdRdW90ZSxcbiAgaHJlZixcbiAgb25DbGljayxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VGVzdGltb25pYWxXcmFwcGVyIHBvc2l0aW9uPVwicmVsYXRpdmVcIiBtb2RlPXttb2RlfT5cbiAgICAgIDxTaGFkb3cgbmFtZT1cImNoZWNrZXJEZW5zZVwiIG1vZGU9e21vZGV9IC8+XG4gICAgICA8QW5jaG9yXG4gICAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgICBkaXNwbGF5PVwiYmxvY2tcIlxuICAgICAgICBoZWlnaHQ9XCJpbmhlcml0XCJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgID5cbiAgICAgICAgPFRlc3RpbW9uaWFsQ2FyZD5cbiAgICAgICAgICA8RmxleEJveFxuICAgICAgICAgICAgcHg9e3sgXzogMjQgfX1cbiAgICAgICAgICAgIHB0PXt7IF86IDMyIH19XG4gICAgICAgICAgICBwYj17eyBfOiA0OCB9fVxuICAgICAgICAgICAgZmxleFdyYXA9XCJ3cmFwXCJcbiAgICAgICAgICAgIGFsaWduSXRlbXM9XCJzdGFydFwiXG4gICAgICAgICAgICB0ZXh0Q29sb3I9e21vZGUgPT09ICdkYXJrJyA/ICdiZWlnZScgOiAnbmF2eSd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEZsZXhCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICAgICAgICB7aW1hZ2VVcmwgJiYgKFxuICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9XCI3N3B4XCIgaGVpZ2h0PVwiNzdweFwiIG1iPXs0OH0gbXI9ezE2fT5cbiAgICAgICAgICAgICAgICAgIDxBdmF0YXIgYWx0PVwiXCIgc3JjPXtpbWFnZVVybH0gbW9kZT17bW9kZX0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEJveCBtYj17MTZ9IG1yPXsxNn0gbWluV2lkdGg9XCI5LjVyZW1cIj5cbiAgICAgICAgICAgICAgICA8QnlsaW5lXG4gICAgICAgICAgICAgICAgICBmaXJzdE5hbWU9e2ZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgICAgIG9jY3VwYXRpb249e29jY3VwYXRpb259XG4gICAgICAgICAgICAgICAgICBjb21wYW55PXtjb21wYW55fVxuICAgICAgICAgICAgICAgICAgbGFzdE5hbWU9e2xhc3ROYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9GbGV4Qm94PlxuICAgICAgICAgICAgPEJveCBmbGV4R3Jvdz17OTk5OX0gZmxleFNocmluaz17MX0gZmxleEJhc2lzPVwiMFwiIG1pbldpZHRoPVwiNzAlXCI+XG4gICAgICAgICAgICAgIDxCb3ggcG9zaXRpb249XCJyZWxhdGl2ZVwiPlxuICAgICAgICAgICAgICAgIDxRdW90ZUljb25cbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwOXB4XCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjc0cHhcIlxuICAgICAgICAgICAgICAgICAgc3JjPXttb2Rlc1ttb2RlXS5xdW90ZUljb259XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8UXVvdGVUZXh0PlxuICAgICAgICAgICAgICAgICAge2xvbmdRdW90ZSA/IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICA8Qm94IGFzPVwic3BhblwiIGRpc3BsYXk9e3sgXzogJ2luaXRpYWwnLCBzbTogJ25vbmUnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAge3F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgIDxCb3ggYXM9XCJzcGFuXCIgZGlzcGxheT17eyBfOiAnbm9uZScsIHNtOiAnaW5pdGlhbCcgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bG9uZ1F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHF1b3RlXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvUXVvdGVUZXh0PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvRmxleEJveD5cbiAgICAgICAgPC9UZXN0aW1vbmlhbENhcmQ+XG4gICAgICA8L0FuY2hvcj5cbiAgICA8L1Rlc3RpbW9uaWFsV3JhcHBlcj5cbiAgKTtcbn07XG4iXX0= */"));

var TestimonialCard = /*#__PURE__*/_styled(GridBox, {
  target: "e1d9okcf3",
  label: "TestimonialCard"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbERlcHJlY2F0ZWQvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtDd0IiLCJmaWxlIjoiLi4vLi4vc3JjL1Rlc3RpbW9uaWFsRGVwcmVjYXRlZC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxleEJveCwgR3JpZEJveCwgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBDaGVja2VyRGVuc2UgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1wYXR0ZXJucyc7XG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGRhcmtRdW90ZXMgZnJvbSAnLi4vYXNzZXRzL2RhcmtRdW90ZXMuc3ZnJztcbmltcG9ydCBsaWdodFF1b3RlcyBmcm9tICcuLi9hc3NldHMvbGlnaHRRdW90ZXMuc3ZnJztcbmltcG9ydCB7IEF2YXRhciB9IGZyb20gJy4uL0F2YXRhcic7XG5pbXBvcnQgeyBCeWxpbmUgfSBmcm9tICcuLi9CeWxpbmUnO1xuXG5jb25zdCBtb2RlcyA9IHtcbiAgZGFyazoge1xuICAgIGNhcmRCYWNrZ3JvdW5kOiBjb2xvcnMubmF2eSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5iZWlnZSxcbiAgICBxdW90ZUljb246IGRhcmtRdW90ZXMsXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgY2FyZEJhY2tncm91bmQ6IGNvbG9ycy5iZWlnZSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5uYXZ5LFxuICAgIHF1b3RlSWNvbjogbGlnaHRRdW90ZXMsXG4gIH0sXG59O1xuXG5jb25zdCBTaGFkb3cgPSBzdHlsZWQoQ2hlY2tlckRlbnNlKTx7IG1vZGU6IFZpc3VhbFRoZW1lIH0+YFxuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDFyZW0pO1xuICB3aWR0aDogY2FsYygxMDAlIC0gMXJlbSk7XG4gIGNvbG9yOiAkeyh7IG1vZGUgfSkgPT4gbW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuYDtcblxuY29uc3QgVGVzdGltb25pYWxDYXJkID0gc3R5bGVkKEdyaWRCb3gpKCk7XG5cbmNvbnN0IFRlc3RpbW9uaWFsV3JhcHBlciA9IHN0eWxlZChCb3gpPHsgbW9kZTogVmlzdWFsVGhlbWUgfT5gXG4gIGhlaWdodDogMTAwJTtcblxuICAmOmhvdmVyIHtcbiAgICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAyKTtcbiAgICB9XG4gIH1cblxuICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgJHsoeyBtb2RlIH0pID0+IGBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7bW9kZXNbbW9kZV0udGV4dENvbG9yfTtcbiAgICBgfVxuICAgIGNsaXAtcGF0aDogaW5zZXQoMCAxcmVtIDFyZW0gMCk7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDFyZW07XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG5gO1xuXG5jb25zdCBRdW90ZUljb24gPSBzdHlsZWQuaW1nYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogLTIuNXJlbTtcbmA7XG5cbmNvbnN0IFF1b3RlVGV4dCA9IHN0eWxlZC5xYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHF1b3Rlczogbm9uZTtcbiAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmZvbnRTaXplWzI2XX07XG4gIGxpbmUtaGVpZ2h0OiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmxpbmVIZWlnaHQuYmFzZX07XG5gO1xuXG5leHBvcnQgdHlwZSBUZXN0aW1vbmlhbERlcHJlY2F0ZWRQcm9wcyA9IHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIG9jY3VwYXRpb246IHN0cmluZztcbiAgcXVvdGU6IHN0cmluZztcbiAgbW9kZTogVmlzdWFsVGhlbWU7XG4gIC8qKlxuICAgKiBBc3NvY2lhdGVkIHdvcmtwbGFjZSBvciBpbnN0aXR1dGlvblxuICAgKi9cbiAgY29tcGFueT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGF2YXRhciBwb3J0cmFpdFxuICAgKi9cbiAgaW1hZ2VVcmw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIGxvbmcgcXVvdGUgdG8gcmVwbGFjZSB0aGUgdGV4dCB3aXRoIGF0IFNNIHZpZXdwb3J0cyBhbmQgaGlnaGVyLlxuICAgKi9cbiAgbG9uZ1F1b3RlPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkICBUaGlzIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgc29vbi5cbiAqXG4gKiBQbGVhc2UgY2hlY2sgdGhlIGdhbXV0IGJvYXJkIGZvciB1cGRhdGVzIG9uIHRoZSBuZXcgdmVyc2lvbiBvZiBUZXN0aW1vbmlhbFxuICovXG5cbmV4cG9ydCBjb25zdCBUZXN0aW1vbmlhbERlcHJlY2F0ZWQ6IFJlYWN0LkZDPFRlc3RpbW9uaWFsRGVwcmVjYXRlZFByb3BzPiA9ICh7XG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIG9jY3VwYXRpb24sXG4gIHF1b3RlLFxuICBtb2RlID0gJ2xpZ2h0JyxcbiAgY29tcGFueSxcbiAgaW1hZ2VVcmwsXG4gIGxvbmdRdW90ZSxcbiAgaHJlZixcbiAgb25DbGljayxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VGVzdGltb25pYWxXcmFwcGVyIHBvc2l0aW9uPVwicmVsYXRpdmVcIiBtb2RlPXttb2RlfT5cbiAgICAgIDxTaGFkb3cgbmFtZT1cImNoZWNrZXJEZW5zZVwiIG1vZGU9e21vZGV9IC8+XG4gICAgICA8QW5jaG9yXG4gICAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgICBkaXNwbGF5PVwiYmxvY2tcIlxuICAgICAgICBoZWlnaHQ9XCJpbmhlcml0XCJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgID5cbiAgICAgICAgPFRlc3RpbW9uaWFsQ2FyZD5cbiAgICAgICAgICA8RmxleEJveFxuICAgICAgICAgICAgcHg9e3sgXzogMjQgfX1cbiAgICAgICAgICAgIHB0PXt7IF86IDMyIH19XG4gICAgICAgICAgICBwYj17eyBfOiA0OCB9fVxuICAgICAgICAgICAgZmxleFdyYXA9XCJ3cmFwXCJcbiAgICAgICAgICAgIGFsaWduSXRlbXM9XCJzdGFydFwiXG4gICAgICAgICAgICB0ZXh0Q29sb3I9e21vZGUgPT09ICdkYXJrJyA/ICdiZWlnZScgOiAnbmF2eSd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEZsZXhCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICAgICAgICB7aW1hZ2VVcmwgJiYgKFxuICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9XCI3N3B4XCIgaGVpZ2h0PVwiNzdweFwiIG1iPXs0OH0gbXI9ezE2fT5cbiAgICAgICAgICAgICAgICAgIDxBdmF0YXIgYWx0PVwiXCIgc3JjPXtpbWFnZVVybH0gbW9kZT17bW9kZX0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEJveCBtYj17MTZ9IG1yPXsxNn0gbWluV2lkdGg9XCI5LjVyZW1cIj5cbiAgICAgICAgICAgICAgICA8QnlsaW5lXG4gICAgICAgICAgICAgICAgICBmaXJzdE5hbWU9e2ZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgICAgIG9jY3VwYXRpb249e29jY3VwYXRpb259XG4gICAgICAgICAgICAgICAgICBjb21wYW55PXtjb21wYW55fVxuICAgICAgICAgICAgICAgICAgbGFzdE5hbWU9e2xhc3ROYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9GbGV4Qm94PlxuICAgICAgICAgICAgPEJveCBmbGV4R3Jvdz17OTk5OX0gZmxleFNocmluaz17MX0gZmxleEJhc2lzPVwiMFwiIG1pbldpZHRoPVwiNzAlXCI+XG4gICAgICAgICAgICAgIDxCb3ggcG9zaXRpb249XCJyZWxhdGl2ZVwiPlxuICAgICAgICAgICAgICAgIDxRdW90ZUljb25cbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwOXB4XCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjc0cHhcIlxuICAgICAgICAgICAgICAgICAgc3JjPXttb2Rlc1ttb2RlXS5xdW90ZUljb259XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8UXVvdGVUZXh0PlxuICAgICAgICAgICAgICAgICAge2xvbmdRdW90ZSA/IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICA8Qm94IGFzPVwic3BhblwiIGRpc3BsYXk9e3sgXzogJ2luaXRpYWwnLCBzbTogJ25vbmUnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAge3F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgIDxCb3ggYXM9XCJzcGFuXCIgZGlzcGxheT17eyBfOiAnbm9uZScsIHNtOiAnaW5pdGlhbCcgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bG9uZ1F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHF1b3RlXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvUXVvdGVUZXh0PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvRmxleEJveD5cbiAgICAgICAgPC9UZXN0aW1vbmlhbENhcmQ+XG4gICAgICA8L0FuY2hvcj5cbiAgICA8L1Rlc3RpbW9uaWFsV3JhcHBlcj5cbiAgKTtcbn07XG4iXX0= */");

var TestimonialWrapper = /*#__PURE__*/_styled(Box, {
  target: "e1d9okcf2",
  label: "TestimonialWrapper"
})("height:100%;&:hover{", TestimonialCard, "{transform:scale(1.02);}}", TestimonialCard, "{align-content:center;height:100%;", function (_ref2) {
  var mode = _ref2.mode;
  return "\n      background-color: ".concat(modes[mode].cardBackground, ";\n      color: ").concat(modes[mode].textColor, ";\n    ");
}, " clip-path:inset(0 1rem 1rem 0);overflow-y:hidden;padding-right:1rem;padding-bottom:1rem;position:relative;transition:transform 0.3s ease-in-out;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbERlcHJlY2F0ZWQvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DNkQiLCJmaWxlIjoiLi4vLi4vc3JjL1Rlc3RpbW9uaWFsRGVwcmVjYXRlZC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxleEJveCwgR3JpZEJveCwgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBDaGVja2VyRGVuc2UgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1wYXR0ZXJucyc7XG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGRhcmtRdW90ZXMgZnJvbSAnLi4vYXNzZXRzL2RhcmtRdW90ZXMuc3ZnJztcbmltcG9ydCBsaWdodFF1b3RlcyBmcm9tICcuLi9hc3NldHMvbGlnaHRRdW90ZXMuc3ZnJztcbmltcG9ydCB7IEF2YXRhciB9IGZyb20gJy4uL0F2YXRhcic7XG5pbXBvcnQgeyBCeWxpbmUgfSBmcm9tICcuLi9CeWxpbmUnO1xuXG5jb25zdCBtb2RlcyA9IHtcbiAgZGFyazoge1xuICAgIGNhcmRCYWNrZ3JvdW5kOiBjb2xvcnMubmF2eSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5iZWlnZSxcbiAgICBxdW90ZUljb246IGRhcmtRdW90ZXMsXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgY2FyZEJhY2tncm91bmQ6IGNvbG9ycy5iZWlnZSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5uYXZ5LFxuICAgIHF1b3RlSWNvbjogbGlnaHRRdW90ZXMsXG4gIH0sXG59O1xuXG5jb25zdCBTaGFkb3cgPSBzdHlsZWQoQ2hlY2tlckRlbnNlKTx7IG1vZGU6IFZpc3VhbFRoZW1lIH0+YFxuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDFyZW0pO1xuICB3aWR0aDogY2FsYygxMDAlIC0gMXJlbSk7XG4gIGNvbG9yOiAkeyh7IG1vZGUgfSkgPT4gbW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuYDtcblxuY29uc3QgVGVzdGltb25pYWxDYXJkID0gc3R5bGVkKEdyaWRCb3gpKCk7XG5cbmNvbnN0IFRlc3RpbW9uaWFsV3JhcHBlciA9IHN0eWxlZChCb3gpPHsgbW9kZTogVmlzdWFsVGhlbWUgfT5gXG4gIGhlaWdodDogMTAwJTtcblxuICAmOmhvdmVyIHtcbiAgICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAyKTtcbiAgICB9XG4gIH1cblxuICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgJHsoeyBtb2RlIH0pID0+IGBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7bW9kZXNbbW9kZV0udGV4dENvbG9yfTtcbiAgICBgfVxuICAgIGNsaXAtcGF0aDogaW5zZXQoMCAxcmVtIDFyZW0gMCk7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDFyZW07XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG5gO1xuXG5jb25zdCBRdW90ZUljb24gPSBzdHlsZWQuaW1nYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogLTIuNXJlbTtcbmA7XG5cbmNvbnN0IFF1b3RlVGV4dCA9IHN0eWxlZC5xYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHF1b3Rlczogbm9uZTtcbiAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmZvbnRTaXplWzI2XX07XG4gIGxpbmUtaGVpZ2h0OiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmxpbmVIZWlnaHQuYmFzZX07XG5gO1xuXG5leHBvcnQgdHlwZSBUZXN0aW1vbmlhbERlcHJlY2F0ZWRQcm9wcyA9IHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIG9jY3VwYXRpb246IHN0cmluZztcbiAgcXVvdGU6IHN0cmluZztcbiAgbW9kZTogVmlzdWFsVGhlbWU7XG4gIC8qKlxuICAgKiBBc3NvY2lhdGVkIHdvcmtwbGFjZSBvciBpbnN0aXR1dGlvblxuICAgKi9cbiAgY29tcGFueT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGF2YXRhciBwb3J0cmFpdFxuICAgKi9cbiAgaW1hZ2VVcmw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIGxvbmcgcXVvdGUgdG8gcmVwbGFjZSB0aGUgdGV4dCB3aXRoIGF0IFNNIHZpZXdwb3J0cyBhbmQgaGlnaGVyLlxuICAgKi9cbiAgbG9uZ1F1b3RlPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkICBUaGlzIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgc29vbi5cbiAqXG4gKiBQbGVhc2UgY2hlY2sgdGhlIGdhbXV0IGJvYXJkIGZvciB1cGRhdGVzIG9uIHRoZSBuZXcgdmVyc2lvbiBvZiBUZXN0aW1vbmlhbFxuICovXG5cbmV4cG9ydCBjb25zdCBUZXN0aW1vbmlhbERlcHJlY2F0ZWQ6IFJlYWN0LkZDPFRlc3RpbW9uaWFsRGVwcmVjYXRlZFByb3BzPiA9ICh7XG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIG9jY3VwYXRpb24sXG4gIHF1b3RlLFxuICBtb2RlID0gJ2xpZ2h0JyxcbiAgY29tcGFueSxcbiAgaW1hZ2VVcmwsXG4gIGxvbmdRdW90ZSxcbiAgaHJlZixcbiAgb25DbGljayxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VGVzdGltb25pYWxXcmFwcGVyIHBvc2l0aW9uPVwicmVsYXRpdmVcIiBtb2RlPXttb2RlfT5cbiAgICAgIDxTaGFkb3cgbmFtZT1cImNoZWNrZXJEZW5zZVwiIG1vZGU9e21vZGV9IC8+XG4gICAgICA8QW5jaG9yXG4gICAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgICBkaXNwbGF5PVwiYmxvY2tcIlxuICAgICAgICBoZWlnaHQ9XCJpbmhlcml0XCJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgID5cbiAgICAgICAgPFRlc3RpbW9uaWFsQ2FyZD5cbiAgICAgICAgICA8RmxleEJveFxuICAgICAgICAgICAgcHg9e3sgXzogMjQgfX1cbiAgICAgICAgICAgIHB0PXt7IF86IDMyIH19XG4gICAgICAgICAgICBwYj17eyBfOiA0OCB9fVxuICAgICAgICAgICAgZmxleFdyYXA9XCJ3cmFwXCJcbiAgICAgICAgICAgIGFsaWduSXRlbXM9XCJzdGFydFwiXG4gICAgICAgICAgICB0ZXh0Q29sb3I9e21vZGUgPT09ICdkYXJrJyA/ICdiZWlnZScgOiAnbmF2eSd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEZsZXhCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICAgICAgICB7aW1hZ2VVcmwgJiYgKFxuICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9XCI3N3B4XCIgaGVpZ2h0PVwiNzdweFwiIG1iPXs0OH0gbXI9ezE2fT5cbiAgICAgICAgICAgICAgICAgIDxBdmF0YXIgYWx0PVwiXCIgc3JjPXtpbWFnZVVybH0gbW9kZT17bW9kZX0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEJveCBtYj17MTZ9IG1yPXsxNn0gbWluV2lkdGg9XCI5LjVyZW1cIj5cbiAgICAgICAgICAgICAgICA8QnlsaW5lXG4gICAgICAgICAgICAgICAgICBmaXJzdE5hbWU9e2ZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgICAgIG9jY3VwYXRpb249e29jY3VwYXRpb259XG4gICAgICAgICAgICAgICAgICBjb21wYW55PXtjb21wYW55fVxuICAgICAgICAgICAgICAgICAgbGFzdE5hbWU9e2xhc3ROYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9GbGV4Qm94PlxuICAgICAgICAgICAgPEJveCBmbGV4R3Jvdz17OTk5OX0gZmxleFNocmluaz17MX0gZmxleEJhc2lzPVwiMFwiIG1pbldpZHRoPVwiNzAlXCI+XG4gICAgICAgICAgICAgIDxCb3ggcG9zaXRpb249XCJyZWxhdGl2ZVwiPlxuICAgICAgICAgICAgICAgIDxRdW90ZUljb25cbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwOXB4XCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjc0cHhcIlxuICAgICAgICAgICAgICAgICAgc3JjPXttb2Rlc1ttb2RlXS5xdW90ZUljb259XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8UXVvdGVUZXh0PlxuICAgICAgICAgICAgICAgICAge2xvbmdRdW90ZSA/IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICA8Qm94IGFzPVwic3BhblwiIGRpc3BsYXk9e3sgXzogJ2luaXRpYWwnLCBzbTogJ25vbmUnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAge3F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgIDxCb3ggYXM9XCJzcGFuXCIgZGlzcGxheT17eyBfOiAnbm9uZScsIHNtOiAnaW5pdGlhbCcgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bG9uZ1F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHF1b3RlXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvUXVvdGVUZXh0PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvRmxleEJveD5cbiAgICAgICAgPC9UZXN0aW1vbmlhbENhcmQ+XG4gICAgICA8L0FuY2hvcj5cbiAgICA8L1Rlc3RpbW9uaWFsV3JhcHBlcj5cbiAgKTtcbn07XG4iXX0= */"));

var QuoteIcon = _styled("img", {
  target: "e1d9okcf1",
  label: "QuoteIcon"
})(process.env.NODE_ENV === "production" ? {
  name: "9cwtri",
  styles: "display:block;margin-bottom:-2.5rem"
} : {
  name: "9cwtri",
  styles: "display:block;margin-bottom:-2.5rem",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbERlcHJlY2F0ZWQvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZENEIiLCJmaWxlIjoiLi4vLi4vc3JjL1Rlc3RpbW9uaWFsRGVwcmVjYXRlZC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxleEJveCwgR3JpZEJveCwgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBDaGVja2VyRGVuc2UgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1wYXR0ZXJucyc7XG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGRhcmtRdW90ZXMgZnJvbSAnLi4vYXNzZXRzL2RhcmtRdW90ZXMuc3ZnJztcbmltcG9ydCBsaWdodFF1b3RlcyBmcm9tICcuLi9hc3NldHMvbGlnaHRRdW90ZXMuc3ZnJztcbmltcG9ydCB7IEF2YXRhciB9IGZyb20gJy4uL0F2YXRhcic7XG5pbXBvcnQgeyBCeWxpbmUgfSBmcm9tICcuLi9CeWxpbmUnO1xuXG5jb25zdCBtb2RlcyA9IHtcbiAgZGFyazoge1xuICAgIGNhcmRCYWNrZ3JvdW5kOiBjb2xvcnMubmF2eSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5iZWlnZSxcbiAgICBxdW90ZUljb246IGRhcmtRdW90ZXMsXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgY2FyZEJhY2tncm91bmQ6IGNvbG9ycy5iZWlnZSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5uYXZ5LFxuICAgIHF1b3RlSWNvbjogbGlnaHRRdW90ZXMsXG4gIH0sXG59O1xuXG5jb25zdCBTaGFkb3cgPSBzdHlsZWQoQ2hlY2tlckRlbnNlKTx7IG1vZGU6IFZpc3VhbFRoZW1lIH0+YFxuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDFyZW0pO1xuICB3aWR0aDogY2FsYygxMDAlIC0gMXJlbSk7XG4gIGNvbG9yOiAkeyh7IG1vZGUgfSkgPT4gbW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuYDtcblxuY29uc3QgVGVzdGltb25pYWxDYXJkID0gc3R5bGVkKEdyaWRCb3gpKCk7XG5cbmNvbnN0IFRlc3RpbW9uaWFsV3JhcHBlciA9IHN0eWxlZChCb3gpPHsgbW9kZTogVmlzdWFsVGhlbWUgfT5gXG4gIGhlaWdodDogMTAwJTtcblxuICAmOmhvdmVyIHtcbiAgICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAyKTtcbiAgICB9XG4gIH1cblxuICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgJHsoeyBtb2RlIH0pID0+IGBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7bW9kZXNbbW9kZV0udGV4dENvbG9yfTtcbiAgICBgfVxuICAgIGNsaXAtcGF0aDogaW5zZXQoMCAxcmVtIDFyZW0gMCk7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDFyZW07XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG5gO1xuXG5jb25zdCBRdW90ZUljb24gPSBzdHlsZWQuaW1nYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogLTIuNXJlbTtcbmA7XG5cbmNvbnN0IFF1b3RlVGV4dCA9IHN0eWxlZC5xYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHF1b3Rlczogbm9uZTtcbiAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmZvbnRTaXplWzI2XX07XG4gIGxpbmUtaGVpZ2h0OiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmxpbmVIZWlnaHQuYmFzZX07XG5gO1xuXG5leHBvcnQgdHlwZSBUZXN0aW1vbmlhbERlcHJlY2F0ZWRQcm9wcyA9IHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIG9jY3VwYXRpb246IHN0cmluZztcbiAgcXVvdGU6IHN0cmluZztcbiAgbW9kZTogVmlzdWFsVGhlbWU7XG4gIC8qKlxuICAgKiBBc3NvY2lhdGVkIHdvcmtwbGFjZSBvciBpbnN0aXR1dGlvblxuICAgKi9cbiAgY29tcGFueT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGF2YXRhciBwb3J0cmFpdFxuICAgKi9cbiAgaW1hZ2VVcmw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIGxvbmcgcXVvdGUgdG8gcmVwbGFjZSB0aGUgdGV4dCB3aXRoIGF0IFNNIHZpZXdwb3J0cyBhbmQgaGlnaGVyLlxuICAgKi9cbiAgbG9uZ1F1b3RlPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkICBUaGlzIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgc29vbi5cbiAqXG4gKiBQbGVhc2UgY2hlY2sgdGhlIGdhbXV0IGJvYXJkIGZvciB1cGRhdGVzIG9uIHRoZSBuZXcgdmVyc2lvbiBvZiBUZXN0aW1vbmlhbFxuICovXG5cbmV4cG9ydCBjb25zdCBUZXN0aW1vbmlhbERlcHJlY2F0ZWQ6IFJlYWN0LkZDPFRlc3RpbW9uaWFsRGVwcmVjYXRlZFByb3BzPiA9ICh7XG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIG9jY3VwYXRpb24sXG4gIHF1b3RlLFxuICBtb2RlID0gJ2xpZ2h0JyxcbiAgY29tcGFueSxcbiAgaW1hZ2VVcmwsXG4gIGxvbmdRdW90ZSxcbiAgaHJlZixcbiAgb25DbGljayxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VGVzdGltb25pYWxXcmFwcGVyIHBvc2l0aW9uPVwicmVsYXRpdmVcIiBtb2RlPXttb2RlfT5cbiAgICAgIDxTaGFkb3cgbmFtZT1cImNoZWNrZXJEZW5zZVwiIG1vZGU9e21vZGV9IC8+XG4gICAgICA8QW5jaG9yXG4gICAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgICBkaXNwbGF5PVwiYmxvY2tcIlxuICAgICAgICBoZWlnaHQ9XCJpbmhlcml0XCJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgID5cbiAgICAgICAgPFRlc3RpbW9uaWFsQ2FyZD5cbiAgICAgICAgICA8RmxleEJveFxuICAgICAgICAgICAgcHg9e3sgXzogMjQgfX1cbiAgICAgICAgICAgIHB0PXt7IF86IDMyIH19XG4gICAgICAgICAgICBwYj17eyBfOiA0OCB9fVxuICAgICAgICAgICAgZmxleFdyYXA9XCJ3cmFwXCJcbiAgICAgICAgICAgIGFsaWduSXRlbXM9XCJzdGFydFwiXG4gICAgICAgICAgICB0ZXh0Q29sb3I9e21vZGUgPT09ICdkYXJrJyA/ICdiZWlnZScgOiAnbmF2eSd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEZsZXhCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICAgICAgICB7aW1hZ2VVcmwgJiYgKFxuICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9XCI3N3B4XCIgaGVpZ2h0PVwiNzdweFwiIG1iPXs0OH0gbXI9ezE2fT5cbiAgICAgICAgICAgICAgICAgIDxBdmF0YXIgYWx0PVwiXCIgc3JjPXtpbWFnZVVybH0gbW9kZT17bW9kZX0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEJveCBtYj17MTZ9IG1yPXsxNn0gbWluV2lkdGg9XCI5LjVyZW1cIj5cbiAgICAgICAgICAgICAgICA8QnlsaW5lXG4gICAgICAgICAgICAgICAgICBmaXJzdE5hbWU9e2ZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgICAgIG9jY3VwYXRpb249e29jY3VwYXRpb259XG4gICAgICAgICAgICAgICAgICBjb21wYW55PXtjb21wYW55fVxuICAgICAgICAgICAgICAgICAgbGFzdE5hbWU9e2xhc3ROYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9GbGV4Qm94PlxuICAgICAgICAgICAgPEJveCBmbGV4R3Jvdz17OTk5OX0gZmxleFNocmluaz17MX0gZmxleEJhc2lzPVwiMFwiIG1pbldpZHRoPVwiNzAlXCI+XG4gICAgICAgICAgICAgIDxCb3ggcG9zaXRpb249XCJyZWxhdGl2ZVwiPlxuICAgICAgICAgICAgICAgIDxRdW90ZUljb25cbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwOXB4XCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjc0cHhcIlxuICAgICAgICAgICAgICAgICAgc3JjPXttb2Rlc1ttb2RlXS5xdW90ZUljb259XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8UXVvdGVUZXh0PlxuICAgICAgICAgICAgICAgICAge2xvbmdRdW90ZSA/IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICA8Qm94IGFzPVwic3BhblwiIGRpc3BsYXk9e3sgXzogJ2luaXRpYWwnLCBzbTogJ25vbmUnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAge3F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgIDxCb3ggYXM9XCJzcGFuXCIgZGlzcGxheT17eyBfOiAnbm9uZScsIHNtOiAnaW5pdGlhbCcgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bG9uZ1F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHF1b3RlXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvUXVvdGVUZXh0PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvRmxleEJveD5cbiAgICAgICAgPC9UZXN0aW1vbmlhbENhcmQ+XG4gICAgICA8L0FuY2hvcj5cbiAgICA8L1Rlc3RpbW9uaWFsV3JhcHBlcj5cbiAgKTtcbn07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var QuoteText = _styled("q", {
  target: "e1d9okcf0",
  label: "QuoteText"
})("position:relative;quotes:none;font-size:", function (_ref3) {
  var theme = _ref3.theme;
  return theme.fontSize[26];
}, ";line-height:", function (_ref4) {
  var theme = _ref4.theme;
  return theme.lineHeight.base;
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbERlcHJlY2F0ZWQvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtFMEIiLCJmaWxlIjoiLi4vLi4vc3JjL1Rlc3RpbW9uaWFsRGVwcmVjYXRlZC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxleEJveCwgR3JpZEJveCwgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBDaGVja2VyRGVuc2UgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1wYXR0ZXJucyc7XG5pbXBvcnQgeyBjb2xvcnMgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGRhcmtRdW90ZXMgZnJvbSAnLi4vYXNzZXRzL2RhcmtRdW90ZXMuc3ZnJztcbmltcG9ydCBsaWdodFF1b3RlcyBmcm9tICcuLi9hc3NldHMvbGlnaHRRdW90ZXMuc3ZnJztcbmltcG9ydCB7IEF2YXRhciB9IGZyb20gJy4uL0F2YXRhcic7XG5pbXBvcnQgeyBCeWxpbmUgfSBmcm9tICcuLi9CeWxpbmUnO1xuXG5jb25zdCBtb2RlcyA9IHtcbiAgZGFyazoge1xuICAgIGNhcmRCYWNrZ3JvdW5kOiBjb2xvcnMubmF2eSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5iZWlnZSxcbiAgICBxdW90ZUljb246IGRhcmtRdW90ZXMsXG4gIH0sXG4gIGxpZ2h0OiB7XG4gICAgY2FyZEJhY2tncm91bmQ6IGNvbG9ycy5iZWlnZSxcbiAgICB0ZXh0Q29sb3I6IGNvbG9ycy5uYXZ5LFxuICAgIHF1b3RlSWNvbjogbGlnaHRRdW90ZXMsXG4gIH0sXG59O1xuXG5jb25zdCBTaGFkb3cgPSBzdHlsZWQoQ2hlY2tlckRlbnNlKTx7IG1vZGU6IFZpc3VhbFRoZW1lIH0+YFxuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDFyZW0pO1xuICB3aWR0aDogY2FsYygxMDAlIC0gMXJlbSk7XG4gIGNvbG9yOiAkeyh7IG1vZGUgfSkgPT4gbW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuYDtcblxuY29uc3QgVGVzdGltb25pYWxDYXJkID0gc3R5bGVkKEdyaWRCb3gpKCk7XG5cbmNvbnN0IFRlc3RpbW9uaWFsV3JhcHBlciA9IHN0eWxlZChCb3gpPHsgbW9kZTogVmlzdWFsVGhlbWUgfT5gXG4gIGhlaWdodDogMTAwJTtcblxuICAmOmhvdmVyIHtcbiAgICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjAyKTtcbiAgICB9XG4gIH1cblxuICAke1Rlc3RpbW9uaWFsQ2FyZH0ge1xuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgJHsoeyBtb2RlIH0pID0+IGBcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZXNbbW9kZV0uY2FyZEJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7bW9kZXNbbW9kZV0udGV4dENvbG9yfTtcbiAgICBgfVxuICAgIGNsaXAtcGF0aDogaW5zZXQoMCAxcmVtIDFyZW0gMCk7XG4gICAgb3ZlcmZsb3cteTogaGlkZGVuO1xuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XG4gICAgcGFkZGluZy1ib3R0b206IDFyZW07XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG5gO1xuXG5jb25zdCBRdW90ZUljb24gPSBzdHlsZWQuaW1nYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogLTIuNXJlbTtcbmA7XG5cbmNvbnN0IFF1b3RlVGV4dCA9IHN0eWxlZC5xYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHF1b3Rlczogbm9uZTtcbiAgZm9udC1zaXplOiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmZvbnRTaXplWzI2XX07XG4gIGxpbmUtaGVpZ2h0OiAkeyh7IHRoZW1lIH0pID0+IHRoZW1lLmxpbmVIZWlnaHQuYmFzZX07XG5gO1xuXG5leHBvcnQgdHlwZSBUZXN0aW1vbmlhbERlcHJlY2F0ZWRQcm9wcyA9IHtcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIG9jY3VwYXRpb246IHN0cmluZztcbiAgcXVvdGU6IHN0cmluZztcbiAgbW9kZTogVmlzdWFsVGhlbWU7XG4gIC8qKlxuICAgKiBBc3NvY2lhdGVkIHdvcmtwbGFjZSBvciBpbnN0aXR1dGlvblxuICAgKi9cbiAgY29tcGFueT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIGF2YXRhciBwb3J0cmFpdFxuICAgKi9cbiAgaW1hZ2VVcmw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBIGxvbmcgcXVvdGUgdG8gcmVwbGFjZSB0aGUgdGV4dCB3aXRoIGF0IFNNIHZpZXdwb3J0cyBhbmQgaGlnaGVyLlxuICAgKi9cbiAgbG9uZ1F1b3RlPzogc3RyaW5nO1xuICBocmVmPzogc3RyaW5nO1xuICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkICBUaGlzIGNvbXBvbmVudCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgc29vbi5cbiAqXG4gKiBQbGVhc2UgY2hlY2sgdGhlIGdhbXV0IGJvYXJkIGZvciB1cGRhdGVzIG9uIHRoZSBuZXcgdmVyc2lvbiBvZiBUZXN0aW1vbmlhbFxuICovXG5cbmV4cG9ydCBjb25zdCBUZXN0aW1vbmlhbERlcHJlY2F0ZWQ6IFJlYWN0LkZDPFRlc3RpbW9uaWFsRGVwcmVjYXRlZFByb3BzPiA9ICh7XG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIG9jY3VwYXRpb24sXG4gIHF1b3RlLFxuICBtb2RlID0gJ2xpZ2h0JyxcbiAgY29tcGFueSxcbiAgaW1hZ2VVcmwsXG4gIGxvbmdRdW90ZSxcbiAgaHJlZixcbiAgb25DbGljayxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VGVzdGltb25pYWxXcmFwcGVyIHBvc2l0aW9uPVwicmVsYXRpdmVcIiBtb2RlPXttb2RlfT5cbiAgICAgIDxTaGFkb3cgbmFtZT1cImNoZWNrZXJEZW5zZVwiIG1vZGU9e21vZGV9IC8+XG4gICAgICA8QW5jaG9yXG4gICAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgICBkaXNwbGF5PVwiYmxvY2tcIlxuICAgICAgICBoZWlnaHQ9XCJpbmhlcml0XCJcbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgID5cbiAgICAgICAgPFRlc3RpbW9uaWFsQ2FyZD5cbiAgICAgICAgICA8RmxleEJveFxuICAgICAgICAgICAgcHg9e3sgXzogMjQgfX1cbiAgICAgICAgICAgIHB0PXt7IF86IDMyIH19XG4gICAgICAgICAgICBwYj17eyBfOiA0OCB9fVxuICAgICAgICAgICAgZmxleFdyYXA9XCJ3cmFwXCJcbiAgICAgICAgICAgIGFsaWduSXRlbXM9XCJzdGFydFwiXG4gICAgICAgICAgICB0ZXh0Q29sb3I9e21vZGUgPT09ICdkYXJrJyA/ICdiZWlnZScgOiAnbmF2eSd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEZsZXhCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICAgICAgICB7aW1hZ2VVcmwgJiYgKFxuICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9XCI3N3B4XCIgaGVpZ2h0PVwiNzdweFwiIG1iPXs0OH0gbXI9ezE2fT5cbiAgICAgICAgICAgICAgICAgIDxBdmF0YXIgYWx0PVwiXCIgc3JjPXtpbWFnZVVybH0gbW9kZT17bW9kZX0gLz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEJveCBtYj17MTZ9IG1yPXsxNn0gbWluV2lkdGg9XCI5LjVyZW1cIj5cbiAgICAgICAgICAgICAgICA8QnlsaW5lXG4gICAgICAgICAgICAgICAgICBmaXJzdE5hbWU9e2ZpcnN0TmFtZX1cbiAgICAgICAgICAgICAgICAgIG9jY3VwYXRpb249e29jY3VwYXRpb259XG4gICAgICAgICAgICAgICAgICBjb21wYW55PXtjb21wYW55fVxuICAgICAgICAgICAgICAgICAgbGFzdE5hbWU9e2xhc3ROYW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9GbGV4Qm94PlxuICAgICAgICAgICAgPEJveCBmbGV4R3Jvdz17OTk5OX0gZmxleFNocmluaz17MX0gZmxleEJhc2lzPVwiMFwiIG1pbldpZHRoPVwiNzAlXCI+XG4gICAgICAgICAgICAgIDxCb3ggcG9zaXRpb249XCJyZWxhdGl2ZVwiPlxuICAgICAgICAgICAgICAgIDxRdW90ZUljb25cbiAgICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwOXB4XCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjc0cHhcIlxuICAgICAgICAgICAgICAgICAgc3JjPXttb2Rlc1ttb2RlXS5xdW90ZUljb259XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8UXVvdGVUZXh0PlxuICAgICAgICAgICAgICAgICAge2xvbmdRdW90ZSA/IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICA8Qm94IGFzPVwic3BhblwiIGRpc3BsYXk9e3sgXzogJ2luaXRpYWwnLCBzbTogJ25vbmUnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAge3F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgIDxCb3ggYXM9XCJzcGFuXCIgZGlzcGxheT17eyBfOiAnbm9uZScsIHNtOiAnaW5pdGlhbCcgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bG9uZ1F1b3RlfVxuICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHF1b3RlXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvUXVvdGVUZXh0PlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvRmxleEJveD5cbiAgICAgICAgPC9UZXN0aW1vbmlhbENhcmQ+XG4gICAgICA8L0FuY2hvcj5cbiAgICA8L1Rlc3RpbW9uaWFsV3JhcHBlcj5cbiAgKTtcbn07XG4iXX0= */"));

/**
 * @deprecated  This component is deprecated and will be updated soon.
 *
 * Please check the gamut board for updates on the new version of Testimonial
 */
export var TestimonialDeprecated = function TestimonialDeprecated(_ref5) {
  var firstName = _ref5.firstName,
      lastName = _ref5.lastName,
      occupation = _ref5.occupation,
      quote = _ref5.quote,
      _ref5$mode = _ref5.mode,
      mode = _ref5$mode === void 0 ? 'light' : _ref5$mode,
      company = _ref5.company,
      imageUrl = _ref5.imageUrl,
      longQuote = _ref5.longQuote,
      href = _ref5.href,
      onClick = _ref5.onClick;
  return /*#__PURE__*/React.createElement(TestimonialWrapper, {
    position: "relative",
    mode: mode
  }, /*#__PURE__*/React.createElement(Shadow, {
    name: "checkerDense",
    mode: mode
  }), /*#__PURE__*/React.createElement(Anchor, {
    href: href,
    variant: "interface",
    display: "block",
    height: "inherit",
    onClick: onClick
  }, /*#__PURE__*/React.createElement(TestimonialCard, null, /*#__PURE__*/React.createElement(FlexBox, {
    px: {
      _: 24
    },
    pt: {
      _: 32
    },
    pb: {
      _: 48
    },
    flexWrap: "wrap",
    alignItems: "start",
    textColor: mode === 'dark' ? 'beige' : 'navy'
  }, /*#__PURE__*/React.createElement(FlexBox, {
    flexDirection: "column"
  }, imageUrl && /*#__PURE__*/React.createElement(Box, {
    width: "77px",
    height: "77px",
    mb: 48,
    mr: 16
  }, /*#__PURE__*/React.createElement(Avatar, {
    alt: "",
    src: imageUrl,
    mode: mode
  })), /*#__PURE__*/React.createElement(Box, {
    mb: 16,
    mr: 16,
    minWidth: "9.5rem"
  }, /*#__PURE__*/React.createElement(Byline, {
    firstName: firstName,
    occupation: occupation,
    company: company,
    lastName: lastName
  }))), /*#__PURE__*/React.createElement(Box, {
    flexGrow: 9999,
    flexShrink: 1,
    flexBasis: "0",
    minWidth: "70%"
  }, /*#__PURE__*/React.createElement(Box, {
    position: "relative"
  }, /*#__PURE__*/React.createElement(QuoteIcon, {
    alt: "",
    width: "109px",
    height: "74px",
    src: modes[mode].quoteIcon
  }), /*#__PURE__*/React.createElement(QuoteText, null, longQuote ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {
    as: "span",
    display: {
      _: 'initial',
      sm: 'none'
    }
  }, quote), /*#__PURE__*/React.createElement(Box, {
    as: "span",
    display: {
      _: 'none',
      sm: 'initial'
    }
  }, longQuote)) : quote)))))));
};