function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
import _styled from "@emotion/styled/base";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import { styledOptions, system, theme } from '@codecademy/gamut-styles';
import { css } from '@emotion/react';
import * as React from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
var Image = /*#__PURE__*/_styled('img', _extends({}, {
  target: "e30fw491",
  label: "Image"
}, styledOptions()))(system.layout, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9jIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBzdHlsZWRPcHRpb25zLCBzeXN0ZW0sIHRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCB7IFJlc3BvbnNpdmVQcm9wIH0gZnJvbSAnQGNvZGVjYWRlbXkvdmFyaWFuY2UnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBJbWFnZSA9IHN0eWxlZCgnaW1nJywgc3R5bGVkT3B0aW9uczwnaW1nJz4oKSkoc3lzdGVtLmxheW91dCk7XG5cbmNvbnN0IEF2YXRhckNvbnRhaW5lciA9IHN0eWxlZC5kaXY8e1xuICBtb2RlPzogVmlzdWFsVGhlbWU7XG4gIGRpc2FibGVEcm9wc2hhZG93PzogYm9vbGVhbjtcbn0+YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IHRhYmxlO1xuXG4gICR7KHsgZGlzYWJsZURyb3BzaGFkb3csIG1vZGUgfSkgPT5cbiAgICAhZGlzYWJsZURyb3BzaGFkb3cgJiZcbiAgICBjc3NgXG4gICAgICAmOjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45Mik7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSByaWdodDtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHttb2RlXG4gICAgICAgICAgPyBtb2RlID09PSAnbGlnaHQnXG4gICAgICAgICAgICA/IHRoZW1lLmNvbG9ycy5saWdodEdyZWVuXG4gICAgICAgICAgICA6IHRoZW1lLmNvbG9ycy5ncmVlblxuICAgICAgICAgIDogdGhlbWUuY29sb3JzWydmZWVkYmFjay1zdWNjZXNzJ119O1xuICAgICAgfVxuICAgIGB9XG5cbiAgJHtJbWFnZX0ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgb2JqZWN0LWZpdDogY292ZXI7XG5cbiAgICAkeyh7IGRpc2FibGVEcm9wc2hhZG93IH0pID0+XG4gICAgICAhZGlzYWJsZURyb3BzaGFkb3cgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XG4gICAgICBgfVxuICB9XG5gO1xuXG5leHBvcnQgdHlwZSBBdmF0YXJJbWFnZVByb3BzID1cbiAgfCB7IGFsdDogc3RyaW5nOyAnYXJpYS1sYWJlbGxlZGJ5Jz86IG5ldmVyIH1cbiAgfCB7IGFsdD86IG5ldmVyOyAnYXJpYS1sYWJlbGxlZGJ5Jzogc3RyaW5nIH07XG5cbmV4cG9ydCB0eXBlIEF2YXRhckJhc2VQcm9wcyA9IHtcbiAgLyoqXG4gICAqIHBhdGggdG8gaW1hZ2UgYXNzZXRcbiAgICovXG4gIHNyYzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgZHJvcCBzaGFkb3cgZW50aXJlbHkuXG4gICAqL1xuICBkaXNhYmxlRHJvcHNoYWRvdz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIEF2YXRhci5cbiAgICovXG4gIHNpemU/OiBSZXNwb25zaXZlUHJvcDwyNCB8IDMyIHwgNDAgfCA0OCB8IDY0IHwgMTE4PjtcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIHN0eWxlcyBvbiB0aGUgQXZhdGFyIGNvbnRhaW5lci5cbiAgICovXG4gIGNsYXNzTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVGhpcyB3aWxsIGJlIGRldGVybWluZWQgYXV0b21hdGljYWxseSBieSB0aGUgdGhlbWUgbW92aW5nIGZvcndhcmQuXG4gICAqIFN1cHBseWluZyBpdCB3aWxsIGRldGVybWluZSB0aGUgY29sb3Igb2YgZHJvcCBzaGFkb3cuXG4gICAqL1xuICBtb2RlPzogVmlzdWFsVGhlbWU7XG59O1xuXG5leHBvcnQgdHlwZSBBdmF0YXJQcm9wcyA9IEF2YXRhckJhc2VQcm9wcyAmIEF2YXRhckltYWdlUHJvcHM7XG5cbmV4cG9ydCBjb25zdCBBdmF0YXI6IFJlYWN0LkZDPEF2YXRhclByb3BzPiA9ICh7XG4gIG1vZGUsXG4gIGRpc2FibGVEcm9wc2hhZG93LFxuICBzaXplID0gMTE4LFxuICBjbGFzc05hbWUsXG4gIC4uLmF2YXRhckltYWdlUHJvcHNcbn0pID0+IChcbiAgPEF2YXRhckNvbnRhaW5lclxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIG1vZGU9e21vZGV9XG4gICAgZGlzYWJsZURyb3BzaGFkb3c9e2Rpc2FibGVEcm9wc2hhZG93fVxuICAgIGRhdGEtdGVzdGlkPVwiYXZhdGFyLWNvbnRhaW5lclwiXG4gID5cbiAgICA8SW1hZ2UgZGltZW5zaW9ucz17c2l6ZX0gey4uLmF2YXRhckltYWdlUHJvcHN9IC8+XG4gIDwvQXZhdGFyQ29udGFpbmVyPlxuKTtcbiJdfQ== */");
var _ref = process.env.NODE_ENV === "production" ? {
  name: "im73wu-AvatarContainer",
  styles: "transform:scale(0.92);transform-origin:top left;label:AvatarContainer;"
} : {
  name: "im73wu-AvatarContainer",
  styles: "transform:scale(0.92);transform-origin:top left;label:AvatarContainer;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBDUyIsImZpbGUiOiIuLi8uLi9zcmMvQXZhdGFyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpc3VhbFRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgc3R5bGVkT3B0aW9ucywgc3lzdGVtLCB0aGVtZSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgeyBSZXNwb25zaXZlUHJvcCB9IGZyb20gJ0Bjb2RlY2FkZW15L3ZhcmlhbmNlJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSW1hZ2UgPSBzdHlsZWQoJ2ltZycsIHN0eWxlZE9wdGlvbnM8J2ltZyc+KCkpKHN5c3RlbS5sYXlvdXQpO1xuXG5jb25zdCBBdmF0YXJDb250YWluZXIgPSBzdHlsZWQuZGl2PHtcbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xuICBkaXNhYmxlRHJvcHNoYWRvdz86IGJvb2xlYW47XG59PmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiB0YWJsZTtcblxuICAkeyh7IGRpc2FibGVEcm9wc2hhZG93LCBtb2RlIH0pID0+XG4gICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgY3NzYFxuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gcmlnaHQ7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZVxuICAgICAgICAgID8gbW9kZSA9PT0gJ2xpZ2h0J1xuICAgICAgICAgICAgPyB0aGVtZS5jb2xvcnMubGlnaHRHcmVlblxuICAgICAgICAgICAgOiB0aGVtZS5jb2xvcnMuZ3JlZW5cbiAgICAgICAgICA6IHRoZW1lLmNvbG9yc1snZmVlZGJhY2stc3VjY2VzcyddfTtcbiAgICAgIH1cbiAgICBgfVxuXG4gICR7SW1hZ2V9IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuXG4gICAgJHsoeyBkaXNhYmxlRHJvcHNoYWRvdyB9KSA9PlxuICAgICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgICBjc3NgXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45Mik7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xuICAgICAgYH1cbiAgfVxuYDtcblxuZXhwb3J0IHR5cGUgQXZhdGFySW1hZ2VQcm9wcyA9XG4gIHwgeyBhbHQ6IHN0cmluZzsgJ2FyaWEtbGFiZWxsZWRieSc/OiBuZXZlciB9XG4gIHwgeyBhbHQ/OiBuZXZlcjsgJ2FyaWEtbGFiZWxsZWRieSc6IHN0cmluZyB9O1xuXG5leHBvcnQgdHlwZSBBdmF0YXJCYXNlUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBwYXRoIHRvIGltYWdlIGFzc2V0XG4gICAqL1xuICBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGRyb3Agc2hhZG93IGVudGlyZWx5LlxuICAgKi9cbiAgZGlzYWJsZURyb3BzaGFkb3c/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBBdmF0YXIuXG4gICAqL1xuICBzaXplPzogUmVzcG9uc2l2ZVByb3A8MjQgfCAzMiB8IDQwIHwgNDggfCA2NCB8IDExOD47XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlcyBzdHlsZXMgb24gdGhlIEF2YXRhciBjb250YWluZXIuXG4gICAqL1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFRoaXMgd2lsbCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHRoZW1lIG1vdmluZyBmb3J3YXJkLlxuICAgKiBTdXBwbHlpbmcgaXQgd2lsbCBkZXRlcm1pbmUgdGhlIGNvbG9yIG9mIGRyb3Agc2hhZG93LlxuICAgKi9cbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xufTtcblxuZXhwb3J0IHR5cGUgQXZhdGFyUHJvcHMgPSBBdmF0YXJCYXNlUHJvcHMgJiBBdmF0YXJJbWFnZVByb3BzO1xuXG5leHBvcnQgY29uc3QgQXZhdGFyOiBSZWFjdC5GQzxBdmF0YXJQcm9wcz4gPSAoe1xuICBtb2RlLFxuICBkaXNhYmxlRHJvcHNoYWRvdyxcbiAgc2l6ZSA9IDExOCxcbiAgY2xhc3NOYW1lLFxuICAuLi5hdmF0YXJJbWFnZVByb3BzXG59KSA9PiAoXG4gIDxBdmF0YXJDb250YWluZXJcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBtb2RlPXttb2RlfVxuICAgIGRpc2FibGVEcm9wc2hhZG93PXtkaXNhYmxlRHJvcHNoYWRvd31cbiAgICBkYXRhLXRlc3RpZD1cImF2YXRhci1jb250YWluZXJcIlxuICA+XG4gICAgPEltYWdlIGRpbWVuc2lvbnM9e3NpemV9IHsuLi5hdmF0YXJJbWFnZVByb3BzfSAvPlxuICA8L0F2YXRhckNvbnRhaW5lcj5cbik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var AvatarContainer = /*#__PURE__*/_styled("div", {
  target: "e30fw490",
  label: "AvatarContainer"
})("position:relative;display:table;", function (_ref2) {
  var disableDropshadow = _ref2.disableDropshadow,
    mode = _ref2.mode;
  return !disableDropshadow && /*#__PURE__*/css("&::before{content:'';position:absolute;border-radius:50%;transform:scale(0.92);transform-origin:bottom right;height:100%;width:100%;background-color:", mode ? mode === 'light' ? theme.colors.lightGreen : theme.colors.green : theme.colors['feedback-success'], ";};label:AvatarContainer;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCTyIsImZpbGUiOiIuLi8uLi9zcmMvQXZhdGFyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpc3VhbFRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgc3R5bGVkT3B0aW9ucywgc3lzdGVtLCB0aGVtZSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgeyBSZXNwb25zaXZlUHJvcCB9IGZyb20gJ0Bjb2RlY2FkZW15L3ZhcmlhbmNlJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSW1hZ2UgPSBzdHlsZWQoJ2ltZycsIHN0eWxlZE9wdGlvbnM8J2ltZyc+KCkpKHN5c3RlbS5sYXlvdXQpO1xuXG5jb25zdCBBdmF0YXJDb250YWluZXIgPSBzdHlsZWQuZGl2PHtcbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xuICBkaXNhYmxlRHJvcHNoYWRvdz86IGJvb2xlYW47XG59PmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiB0YWJsZTtcblxuICAkeyh7IGRpc2FibGVEcm9wc2hhZG93LCBtb2RlIH0pID0+XG4gICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgY3NzYFxuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gcmlnaHQ7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZVxuICAgICAgICAgID8gbW9kZSA9PT0gJ2xpZ2h0J1xuICAgICAgICAgICAgPyB0aGVtZS5jb2xvcnMubGlnaHRHcmVlblxuICAgICAgICAgICAgOiB0aGVtZS5jb2xvcnMuZ3JlZW5cbiAgICAgICAgICA6IHRoZW1lLmNvbG9yc1snZmVlZGJhY2stc3VjY2VzcyddfTtcbiAgICAgIH1cbiAgICBgfVxuXG4gICR7SW1hZ2V9IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuXG4gICAgJHsoeyBkaXNhYmxlRHJvcHNoYWRvdyB9KSA9PlxuICAgICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgICBjc3NgXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45Mik7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xuICAgICAgYH1cbiAgfVxuYDtcblxuZXhwb3J0IHR5cGUgQXZhdGFySW1hZ2VQcm9wcyA9XG4gIHwgeyBhbHQ6IHN0cmluZzsgJ2FyaWEtbGFiZWxsZWRieSc/OiBuZXZlciB9XG4gIHwgeyBhbHQ/OiBuZXZlcjsgJ2FyaWEtbGFiZWxsZWRieSc6IHN0cmluZyB9O1xuXG5leHBvcnQgdHlwZSBBdmF0YXJCYXNlUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBwYXRoIHRvIGltYWdlIGFzc2V0XG4gICAqL1xuICBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGRyb3Agc2hhZG93IGVudGlyZWx5LlxuICAgKi9cbiAgZGlzYWJsZURyb3BzaGFkb3c/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBBdmF0YXIuXG4gICAqL1xuICBzaXplPzogUmVzcG9uc2l2ZVByb3A8MjQgfCAzMiB8IDQwIHwgNDggfCA2NCB8IDExOD47XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlcyBzdHlsZXMgb24gdGhlIEF2YXRhciBjb250YWluZXIuXG4gICAqL1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFRoaXMgd2lsbCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHRoZW1lIG1vdmluZyBmb3J3YXJkLlxuICAgKiBTdXBwbHlpbmcgaXQgd2lsbCBkZXRlcm1pbmUgdGhlIGNvbG9yIG9mIGRyb3Agc2hhZG93LlxuICAgKi9cbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xufTtcblxuZXhwb3J0IHR5cGUgQXZhdGFyUHJvcHMgPSBBdmF0YXJCYXNlUHJvcHMgJiBBdmF0YXJJbWFnZVByb3BzO1xuXG5leHBvcnQgY29uc3QgQXZhdGFyOiBSZWFjdC5GQzxBdmF0YXJQcm9wcz4gPSAoe1xuICBtb2RlLFxuICBkaXNhYmxlRHJvcHNoYWRvdyxcbiAgc2l6ZSA9IDExOCxcbiAgY2xhc3NOYW1lLFxuICAuLi5hdmF0YXJJbWFnZVByb3BzXG59KSA9PiAoXG4gIDxBdmF0YXJDb250YWluZXJcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBtb2RlPXttb2RlfVxuICAgIGRpc2FibGVEcm9wc2hhZG93PXtkaXNhYmxlRHJvcHNoYWRvd31cbiAgICBkYXRhLXRlc3RpZD1cImF2YXRhci1jb250YWluZXJcIlxuICA+XG4gICAgPEltYWdlIGRpbWVuc2lvbnM9e3NpemV9IHsuLi5hdmF0YXJJbWFnZVByb3BzfSAvPlxuICA8L0F2YXRhckNvbnRhaW5lcj5cbik7XG4iXX0= */"));
}, " ", Image, "{position:relative;border-radius:50%;object-fit:cover;", function (_ref3) {
  var disableDropshadow = _ref3.disableDropshadow;
  return !disableDropshadow && _ref;
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlFIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBzdHlsZWRPcHRpb25zLCBzeXN0ZW0sIHRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCB7IFJlc3BvbnNpdmVQcm9wIH0gZnJvbSAnQGNvZGVjYWRlbXkvdmFyaWFuY2UnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBJbWFnZSA9IHN0eWxlZCgnaW1nJywgc3R5bGVkT3B0aW9uczwnaW1nJz4oKSkoc3lzdGVtLmxheW91dCk7XG5cbmNvbnN0IEF2YXRhckNvbnRhaW5lciA9IHN0eWxlZC5kaXY8e1xuICBtb2RlPzogVmlzdWFsVGhlbWU7XG4gIGRpc2FibGVEcm9wc2hhZG93PzogYm9vbGVhbjtcbn0+YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IHRhYmxlO1xuXG4gICR7KHsgZGlzYWJsZURyb3BzaGFkb3csIG1vZGUgfSkgPT5cbiAgICAhZGlzYWJsZURyb3BzaGFkb3cgJiZcbiAgICBjc3NgXG4gICAgICAmOjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45Mik7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSByaWdodDtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHttb2RlXG4gICAgICAgICAgPyBtb2RlID09PSAnbGlnaHQnXG4gICAgICAgICAgICA/IHRoZW1lLmNvbG9ycy5saWdodEdyZWVuXG4gICAgICAgICAgICA6IHRoZW1lLmNvbG9ycy5ncmVlblxuICAgICAgICAgIDogdGhlbWUuY29sb3JzWydmZWVkYmFjay1zdWNjZXNzJ119O1xuICAgICAgfVxuICAgIGB9XG5cbiAgJHtJbWFnZX0ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgb2JqZWN0LWZpdDogY292ZXI7XG5cbiAgICAkeyh7IGRpc2FibGVEcm9wc2hhZG93IH0pID0+XG4gICAgICAhZGlzYWJsZURyb3BzaGFkb3cgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XG4gICAgICBgfVxuICB9XG5gO1xuXG5leHBvcnQgdHlwZSBBdmF0YXJJbWFnZVByb3BzID1cbiAgfCB7IGFsdDogc3RyaW5nOyAnYXJpYS1sYWJlbGxlZGJ5Jz86IG5ldmVyIH1cbiAgfCB7IGFsdD86IG5ldmVyOyAnYXJpYS1sYWJlbGxlZGJ5Jzogc3RyaW5nIH07XG5cbmV4cG9ydCB0eXBlIEF2YXRhckJhc2VQcm9wcyA9IHtcbiAgLyoqXG4gICAqIHBhdGggdG8gaW1hZ2UgYXNzZXRcbiAgICovXG4gIHNyYzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgZHJvcCBzaGFkb3cgZW50aXJlbHkuXG4gICAqL1xuICBkaXNhYmxlRHJvcHNoYWRvdz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIEF2YXRhci5cbiAgICovXG4gIHNpemU/OiBSZXNwb25zaXZlUHJvcDwyNCB8IDMyIHwgNDAgfCA0OCB8IDY0IHwgMTE4PjtcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIHN0eWxlcyBvbiB0aGUgQXZhdGFyIGNvbnRhaW5lci5cbiAgICovXG4gIGNsYXNzTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogVGhpcyB3aWxsIGJlIGRldGVybWluZWQgYXV0b21hdGljYWxseSBieSB0aGUgdGhlbWUgbW92aW5nIGZvcndhcmQuXG4gICAqIFN1cHBseWluZyBpdCB3aWxsIGRldGVybWluZSB0aGUgY29sb3Igb2YgZHJvcCBzaGFkb3cuXG4gICAqL1xuICBtb2RlPzogVmlzdWFsVGhlbWU7XG59O1xuXG5leHBvcnQgdHlwZSBBdmF0YXJQcm9wcyA9IEF2YXRhckJhc2VQcm9wcyAmIEF2YXRhckltYWdlUHJvcHM7XG5cbmV4cG9ydCBjb25zdCBBdmF0YXI6IFJlYWN0LkZDPEF2YXRhclByb3BzPiA9ICh7XG4gIG1vZGUsXG4gIGRpc2FibGVEcm9wc2hhZG93LFxuICBzaXplID0gMTE4LFxuICBjbGFzc05hbWUsXG4gIC4uLmF2YXRhckltYWdlUHJvcHNcbn0pID0+IChcbiAgPEF2YXRhckNvbnRhaW5lclxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIG1vZGU9e21vZGV9XG4gICAgZGlzYWJsZURyb3BzaGFkb3c9e2Rpc2FibGVEcm9wc2hhZG93fVxuICAgIGRhdGEtdGVzdGlkPVwiYXZhdGFyLWNvbnRhaW5lclwiXG4gID5cbiAgICA8SW1hZ2UgZGltZW5zaW9ucz17c2l6ZX0gey4uLmF2YXRhckltYWdlUHJvcHN9IC8+XG4gIDwvQXZhdGFyQ29udGFpbmVyPlxuKTtcbiJdfQ== */"));
export var Avatar = function Avatar(_ref4) {
  var mode = _ref4.mode,
    disableDropshadow = _ref4.disableDropshadow,
    _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? 118 : _ref4$size,
    className = _ref4.className,
    avatarImageProps = _objectWithoutProperties(_ref4, ["mode", "disableDropshadow", "size", "className"]);
  return /*#__PURE__*/_jsx(AvatarContainer, {
    className: className,
    mode: mode,
    disableDropshadow: disableDropshadow,
    "data-testid": "avatar-container",
    children: /*#__PURE__*/_jsx(Image, _objectSpread({
      dimensions: size
    }, avatarImageProps))
  });
};