import _styled from "@emotion/styled/base";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

import { styledOptions, system, theme } from '@codecademy/gamut-styles';
import { css } from '@emotion/react';
import React from 'react';

var Image = /*#__PURE__*/_styled('img', _extends({}, {
  target: "e30fw491",
  label: "Image"
}, styledOptions()))(system.layout, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9jIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBzdHlsZWRPcHRpb25zLCBzeXN0ZW0sIHRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCB7IFJlc3BvbnNpdmVQcm9wIH0gZnJvbSAnQGNvZGVjYWRlbXkvdmFyaWFuY2UnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSW1hZ2UgPSBzdHlsZWQoJ2ltZycsIHN0eWxlZE9wdGlvbnM8J2ltZyc+KCkpKHN5c3RlbS5sYXlvdXQpO1xuXG5jb25zdCBBdmF0YXJDb250YWluZXIgPSBzdHlsZWQuZGl2PHtcbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xuICBkaXNhYmxlRHJvcHNoYWRvdz86IGJvb2xlYW47XG59PmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiB0YWJsZTtcblxuICAkeyh7IGRpc2FibGVEcm9wc2hhZG93LCBtb2RlIH0pID0+XG4gICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgY3NzYFxuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gcmlnaHQ7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZVxuICAgICAgICAgID8gbW9kZSA9PT0gJ2xpZ2h0J1xuICAgICAgICAgICAgPyB0aGVtZS5jb2xvcnMubGlnaHRHcmVlblxuICAgICAgICAgICAgOiB0aGVtZS5jb2xvcnMuZ3JlZW5cbiAgICAgICAgICA6IHRoZW1lLmNvbG9yc1snZmVlZGJhY2stc3VjY2VzcyddfTtcbiAgICAgIH1cbiAgICBgfVxuXG4gICR7SW1hZ2V9IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuXG4gICAgJHsoeyBkaXNhYmxlRHJvcHNoYWRvdyB9KSA9PlxuICAgICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgICBjc3NgXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45Mik7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xuICAgICAgYH1cbiAgfVxuYDtcblxuZXhwb3J0IHR5cGUgQXZhdGFySW1hZ2VQcm9wcyA9XG4gIHwgeyBhbHQ6IHN0cmluZzsgJ2FyaWEtbGFiZWxsZWRieSc/OiBuZXZlciB9XG4gIHwgeyBhbHQ/OiBuZXZlcjsgJ2FyaWEtbGFiZWxsZWRieSc6IHN0cmluZyB9O1xuXG5leHBvcnQgdHlwZSBBdmF0YXJCYXNlUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBwYXRoIHRvIGltYWdlIGFzc2V0XG4gICAqL1xuICBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGRyb3Agc2hhZG93IGVudGlyZWx5LlxuICAgKi9cbiAgZGlzYWJsZURyb3BzaGFkb3c/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBBdmF0YXIuXG4gICAqL1xuICBzaXplPzogUmVzcG9uc2l2ZVByb3A8MjQgfCAzMiB8IDQwIHwgNDggfCA2NCB8IDExOD47XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlcyBzdHlsZXMgb24gdGhlIEF2YXRhciBjb250YWluZXIuXG4gICAqL1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFRoaXMgd2lsbCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHRoZW1lIG1vdmluZyBmb3J3YXJkLlxuICAgKiBTdXBwbHlpbmcgaXQgd2lsbCBkZXRlcm1pbmUgdGhlIGNvbG9yIG9mIGRyb3Agc2hhZG93LlxuICAgKi9cbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xufTtcblxuZXhwb3J0IHR5cGUgQXZhdGFyUHJvcHMgPSBBdmF0YXJCYXNlUHJvcHMgJiBBdmF0YXJJbWFnZVByb3BzO1xuXG5leHBvcnQgY29uc3QgQXZhdGFyOiBSZWFjdC5GQzxBdmF0YXJQcm9wcz4gPSAoe1xuICBtb2RlLFxuICBkaXNhYmxlRHJvcHNoYWRvdyxcbiAgc2l6ZSA9IDExOCxcbiAgY2xhc3NOYW1lLFxuICAuLi5hdmF0YXJJbWFnZVByb3BzXG59KSA9PiAoXG4gIDxBdmF0YXJDb250YWluZXJcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBtb2RlPXttb2RlfVxuICAgIGRpc2FibGVEcm9wc2hhZG93PXtkaXNhYmxlRHJvcHNoYWRvd31cbiAgICBkYXRhLXRlc3RpZD1cImF2YXRhci1jb250YWluZXJcIlxuICA+XG4gICAgPEltYWdlIGRpbWVuc2lvbnM9e3NpemV9IHsuLi5hdmF0YXJJbWFnZVByb3BzfSAvPlxuICA8L0F2YXRhckNvbnRhaW5lcj5cbik7XG4iXX0= */");

var _ref = process.env.NODE_ENV === "production" ? {
  name: "im73wu-AvatarContainer",
  styles: "transform:scale(0.92);transform-origin:top left;label:AvatarContainer;"
} : {
  name: "im73wu-AvatarContainer",
  styles: "transform:scale(0.92);transform-origin:top left;label:AvatarContainer;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBDUyIsImZpbGUiOiIuLi8uLi9zcmMvQXZhdGFyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpc3VhbFRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgc3R5bGVkT3B0aW9ucywgc3lzdGVtLCB0aGVtZSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgeyBSZXNwb25zaXZlUHJvcCB9IGZyb20gJ0Bjb2RlY2FkZW15L3ZhcmlhbmNlJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEltYWdlID0gc3R5bGVkKCdpbWcnLCBzdHlsZWRPcHRpb25zPCdpbWcnPigpKShzeXN0ZW0ubGF5b3V0KTtcblxuY29uc3QgQXZhdGFyQ29udGFpbmVyID0gc3R5bGVkLmRpdjx7XG4gIG1vZGU/OiBWaXN1YWxUaGVtZTtcbiAgZGlzYWJsZURyb3BzaGFkb3c/OiBib29sZWFuO1xufT5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogdGFibGU7XG5cbiAgJHsoeyBkaXNhYmxlRHJvcHNoYWRvdywgbW9kZSB9KSA9PlxuICAgICFkaXNhYmxlRHJvcHNoYWRvdyAmJlxuICAgIGNzc2BcbiAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIHJpZ2h0O1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke21vZGVcbiAgICAgICAgICA/IG1vZGUgPT09ICdsaWdodCdcbiAgICAgICAgICAgID8gdGhlbWUuY29sb3JzLmxpZ2h0R3JlZW5cbiAgICAgICAgICAgIDogdGhlbWUuY29sb3JzLmdyZWVuXG4gICAgICAgICAgOiB0aGVtZS5jb2xvcnNbJ2ZlZWRiYWNrLXN1Y2Nlc3MnXX07XG4gICAgICB9XG4gICAgYH1cblxuICAke0ltYWdlfSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcblxuICAgICR7KHsgZGlzYWJsZURyb3BzaGFkb3cgfSkgPT5cbiAgICAgICFkaXNhYmxlRHJvcHNoYWRvdyAmJlxuICAgICAgY3NzYFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcbiAgICAgIGB9XG4gIH1cbmA7XG5cbmV4cG9ydCB0eXBlIEF2YXRhckltYWdlUHJvcHMgPVxuICB8IHsgYWx0OiBzdHJpbmc7ICdhcmlhLWxhYmVsbGVkYnknPzogbmV2ZXIgfVxuICB8IHsgYWx0PzogbmV2ZXI7ICdhcmlhLWxhYmVsbGVkYnknOiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgQXZhdGFyQmFzZVByb3BzID0ge1xuICAvKipcbiAgICogcGF0aCB0byBpbWFnZSBhc3NldFxuICAgKi9cbiAgc3JjOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBkcm9wIHNoYWRvdyBlbnRpcmVseS5cbiAgICovXG4gIGRpc2FibGVEcm9wc2hhZG93PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgQXZhdGFyLlxuICAgKi9cbiAgc2l6ZT86IFJlc3BvbnNpdmVQcm9wPDI0IHwgMzIgfCA0MCB8IDQ4IHwgNjQgfCAxMTg+O1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgc3R5bGVzIG9uIHRoZSBBdmF0YXIgY29udGFpbmVyLlxuICAgKi9cbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBUaGlzIHdpbGwgYmUgZGV0ZXJtaW5lZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSB0aGVtZSBtb3ZpbmcgZm9yd2FyZC5cbiAgICogU3VwcGx5aW5nIGl0IHdpbGwgZGV0ZXJtaW5lIHRoZSBjb2xvciBvZiBkcm9wIHNoYWRvdy5cbiAgICovXG4gIG1vZGU/OiBWaXN1YWxUaGVtZTtcbn07XG5cbmV4cG9ydCB0eXBlIEF2YXRhclByb3BzID0gQXZhdGFyQmFzZVByb3BzICYgQXZhdGFySW1hZ2VQcm9wcztcblxuZXhwb3J0IGNvbnN0IEF2YXRhcjogUmVhY3QuRkM8QXZhdGFyUHJvcHM+ID0gKHtcbiAgbW9kZSxcbiAgZGlzYWJsZURyb3BzaGFkb3csXG4gIHNpemUgPSAxMTgsXG4gIGNsYXNzTmFtZSxcbiAgLi4uYXZhdGFySW1hZ2VQcm9wc1xufSkgPT4gKFxuICA8QXZhdGFyQ29udGFpbmVyXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgbW9kZT17bW9kZX1cbiAgICBkaXNhYmxlRHJvcHNoYWRvdz17ZGlzYWJsZURyb3BzaGFkb3d9XG4gICAgZGF0YS10ZXN0aWQ9XCJhdmF0YXItY29udGFpbmVyXCJcbiAgPlxuICAgIDxJbWFnZSBkaW1lbnNpb25zPXtzaXplfSB7Li4uYXZhdGFySW1hZ2VQcm9wc30gLz5cbiAgPC9BdmF0YXJDb250YWluZXI+XG4pO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var AvatarContainer = _styled("div", {
  target: "e30fw490",
  label: "AvatarContainer"
})("position:relative;display:table;", function (_ref2) {
  var disableDropshadow = _ref2.disableDropshadow,
      mode = _ref2.mode;
  return !disableDropshadow && /*#__PURE__*/css("&::before{content:'';position:absolute;border-radius:50%;transform:scale(0.92);transform-origin:bottom right;height:100%;width:100%;background-color:", mode ? mode === 'light' ? theme.colors.lightGreen : theme.colors.green : theme.colors['feedback-success'], ";};label:AvatarContainer;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCTyIsImZpbGUiOiIuLi8uLi9zcmMvQXZhdGFyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpc3VhbFRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgc3R5bGVkT3B0aW9ucywgc3lzdGVtLCB0aGVtZSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgeyBSZXNwb25zaXZlUHJvcCB9IGZyb20gJ0Bjb2RlY2FkZW15L3ZhcmlhbmNlJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEltYWdlID0gc3R5bGVkKCdpbWcnLCBzdHlsZWRPcHRpb25zPCdpbWcnPigpKShzeXN0ZW0ubGF5b3V0KTtcblxuY29uc3QgQXZhdGFyQ29udGFpbmVyID0gc3R5bGVkLmRpdjx7XG4gIG1vZGU/OiBWaXN1YWxUaGVtZTtcbiAgZGlzYWJsZURyb3BzaGFkb3c/OiBib29sZWFuO1xufT5gXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogdGFibGU7XG5cbiAgJHsoeyBkaXNhYmxlRHJvcHNoYWRvdywgbW9kZSB9KSA9PlxuICAgICFkaXNhYmxlRHJvcHNoYWRvdyAmJlxuICAgIGNzc2BcbiAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIHJpZ2h0O1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke21vZGVcbiAgICAgICAgICA/IG1vZGUgPT09ICdsaWdodCdcbiAgICAgICAgICAgID8gdGhlbWUuY29sb3JzLmxpZ2h0R3JlZW5cbiAgICAgICAgICAgIDogdGhlbWUuY29sb3JzLmdyZWVuXG4gICAgICAgICAgOiB0aGVtZS5jb2xvcnNbJ2ZlZWRiYWNrLXN1Y2Nlc3MnXX07XG4gICAgICB9XG4gICAgYH1cblxuICAke0ltYWdlfSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcblxuICAgICR7KHsgZGlzYWJsZURyb3BzaGFkb3cgfSkgPT5cbiAgICAgICFkaXNhYmxlRHJvcHNoYWRvdyAmJlxuICAgICAgY3NzYFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcbiAgICAgIGB9XG4gIH1cbmA7XG5cbmV4cG9ydCB0eXBlIEF2YXRhckltYWdlUHJvcHMgPVxuICB8IHsgYWx0OiBzdHJpbmc7ICdhcmlhLWxhYmVsbGVkYnknPzogbmV2ZXIgfVxuICB8IHsgYWx0PzogbmV2ZXI7ICdhcmlhLWxhYmVsbGVkYnknOiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgQXZhdGFyQmFzZVByb3BzID0ge1xuICAvKipcbiAgICogcGF0aCB0byBpbWFnZSBhc3NldFxuICAgKi9cbiAgc3JjOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBkcm9wIHNoYWRvdyBlbnRpcmVseS5cbiAgICovXG4gIGRpc2FibGVEcm9wc2hhZG93PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgQXZhdGFyLlxuICAgKi9cbiAgc2l6ZT86IFJlc3BvbnNpdmVQcm9wPDI0IHwgMzIgfCA0MCB8IDQ4IHwgNjQgfCAxMTg+O1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZXMgc3R5bGVzIG9uIHRoZSBBdmF0YXIgY29udGFpbmVyLlxuICAgKi9cbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBUaGlzIHdpbGwgYmUgZGV0ZXJtaW5lZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSB0aGVtZSBtb3ZpbmcgZm9yd2FyZC5cbiAgICogU3VwcGx5aW5nIGl0IHdpbGwgZGV0ZXJtaW5lIHRoZSBjb2xvciBvZiBkcm9wIHNoYWRvdy5cbiAgICovXG4gIG1vZGU/OiBWaXN1YWxUaGVtZTtcbn07XG5cbmV4cG9ydCB0eXBlIEF2YXRhclByb3BzID0gQXZhdGFyQmFzZVByb3BzICYgQXZhdGFySW1hZ2VQcm9wcztcblxuZXhwb3J0IGNvbnN0IEF2YXRhcjogUmVhY3QuRkM8QXZhdGFyUHJvcHM+ID0gKHtcbiAgbW9kZSxcbiAgZGlzYWJsZURyb3BzaGFkb3csXG4gIHNpemUgPSAxMTgsXG4gIGNsYXNzTmFtZSxcbiAgLi4uYXZhdGFySW1hZ2VQcm9wc1xufSkgPT4gKFxuICA8QXZhdGFyQ29udGFpbmVyXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgbW9kZT17bW9kZX1cbiAgICBkaXNhYmxlRHJvcHNoYWRvdz17ZGlzYWJsZURyb3BzaGFkb3d9XG4gICAgZGF0YS10ZXN0aWQ9XCJhdmF0YXItY29udGFpbmVyXCJcbiAgPlxuICAgIDxJbWFnZSBkaW1lbnNpb25zPXtzaXplfSB7Li4uYXZhdGFySW1hZ2VQcm9wc30gLz5cbiAgPC9BdmF0YXJDb250YWluZXI+XG4pO1xuIl19 */"));
}, " ", Image, "{position:relative;border-radius:50%;object-fit:cover;", function (_ref3) {
  var disableDropshadow = _ref3.disableDropshadow;
  return !disableDropshadow && _ref;
}, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlFIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXIvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlzdWFsVGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBzdHlsZWRPcHRpb25zLCBzeXN0ZW0sIHRoZW1lIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCB7IFJlc3BvbnNpdmVQcm9wIH0gZnJvbSAnQGNvZGVjYWRlbXkvdmFyaWFuY2UnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSW1hZ2UgPSBzdHlsZWQoJ2ltZycsIHN0eWxlZE9wdGlvbnM8J2ltZyc+KCkpKHN5c3RlbS5sYXlvdXQpO1xuXG5jb25zdCBBdmF0YXJDb250YWluZXIgPSBzdHlsZWQuZGl2PHtcbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xuICBkaXNhYmxlRHJvcHNoYWRvdz86IGJvb2xlYW47XG59PmBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiB0YWJsZTtcblxuICAkeyh7IGRpc2FibGVEcm9wc2hhZG93LCBtb2RlIH0pID0+XG4gICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgY3NzYFxuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gcmlnaHQ7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7bW9kZVxuICAgICAgICAgID8gbW9kZSA9PT0gJ2xpZ2h0J1xuICAgICAgICAgICAgPyB0aGVtZS5jb2xvcnMubGlnaHRHcmVlblxuICAgICAgICAgICAgOiB0aGVtZS5jb2xvcnMuZ3JlZW5cbiAgICAgICAgICA6IHRoZW1lLmNvbG9yc1snZmVlZGJhY2stc3VjY2VzcyddfTtcbiAgICAgIH1cbiAgICBgfVxuXG4gICR7SW1hZ2V9IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuXG4gICAgJHsoeyBkaXNhYmxlRHJvcHNoYWRvdyB9KSA9PlxuICAgICAgIWRpc2FibGVEcm9wc2hhZG93ICYmXG4gICAgICBjc3NgXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45Mik7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0O1xuICAgICAgYH1cbiAgfVxuYDtcblxuZXhwb3J0IHR5cGUgQXZhdGFySW1hZ2VQcm9wcyA9XG4gIHwgeyBhbHQ6IHN0cmluZzsgJ2FyaWEtbGFiZWxsZWRieSc/OiBuZXZlciB9XG4gIHwgeyBhbHQ/OiBuZXZlcjsgJ2FyaWEtbGFiZWxsZWRieSc6IHN0cmluZyB9O1xuXG5leHBvcnQgdHlwZSBBdmF0YXJCYXNlUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBwYXRoIHRvIGltYWdlIGFzc2V0XG4gICAqL1xuICBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGRyb3Agc2hhZG93IGVudGlyZWx5LlxuICAgKi9cbiAgZGlzYWJsZURyb3BzaGFkb3c/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBBdmF0YXIuXG4gICAqL1xuICBzaXplPzogUmVzcG9uc2l2ZVByb3A8MjQgfCAzMiB8IDQwIHwgNDggfCA2NCB8IDExOD47XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlcyBzdHlsZXMgb24gdGhlIEF2YXRhciBjb250YWluZXIuXG4gICAqL1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIFRoaXMgd2lsbCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHRoZW1lIG1vdmluZyBmb3J3YXJkLlxuICAgKiBTdXBwbHlpbmcgaXQgd2lsbCBkZXRlcm1pbmUgdGhlIGNvbG9yIG9mIGRyb3Agc2hhZG93LlxuICAgKi9cbiAgbW9kZT86IFZpc3VhbFRoZW1lO1xufTtcblxuZXhwb3J0IHR5cGUgQXZhdGFyUHJvcHMgPSBBdmF0YXJCYXNlUHJvcHMgJiBBdmF0YXJJbWFnZVByb3BzO1xuXG5leHBvcnQgY29uc3QgQXZhdGFyOiBSZWFjdC5GQzxBdmF0YXJQcm9wcz4gPSAoe1xuICBtb2RlLFxuICBkaXNhYmxlRHJvcHNoYWRvdyxcbiAgc2l6ZSA9IDExOCxcbiAgY2xhc3NOYW1lLFxuICAuLi5hdmF0YXJJbWFnZVByb3BzXG59KSA9PiAoXG4gIDxBdmF0YXJDb250YWluZXJcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBtb2RlPXttb2RlfVxuICAgIGRpc2FibGVEcm9wc2hhZG93PXtkaXNhYmxlRHJvcHNoYWRvd31cbiAgICBkYXRhLXRlc3RpZD1cImF2YXRhci1jb250YWluZXJcIlxuICA+XG4gICAgPEltYWdlIGRpbWVuc2lvbnM9e3NpemV9IHsuLi5hdmF0YXJJbWFnZVByb3BzfSAvPlxuICA8L0F2YXRhckNvbnRhaW5lcj5cbik7XG4iXX0= */"));

export var Avatar = function Avatar(_ref4) {
  var mode = _ref4.mode,
      disableDropshadow = _ref4.disableDropshadow,
      _ref4$size = _ref4.size,
      size = _ref4$size === void 0 ? 118 : _ref4$size,
      className = _ref4.className,
      avatarImageProps = _objectWithoutProperties(_ref4, ["mode", "disableDropshadow", "size", "className"]);

  return /*#__PURE__*/React.createElement(AvatarContainer, {
    className: className,
    mode: mode,
    disableDropshadow: disableDropshadow,
    "data-testid": "avatar-container"
  }, /*#__PURE__*/React.createElement(Image, _extends({
    dimensions: size
  }, avatarImageProps)));
};