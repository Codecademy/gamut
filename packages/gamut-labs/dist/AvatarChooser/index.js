import _styled from "@emotion/styled/base";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

import { FlexBox, FormError, Input } from '@codecademy/gamut';
import { pxRem, theme } from '@codecademy/gamut-styles';
import React, { useCallback, useRef, useState } from 'react';
import { Avatar } from '..';
var baseSize = 75;
var smBreakpointSize = 120;

var StyledAvatar = /*#__PURE__*/_styled(Avatar, {
  target: "e1puzyt54",
  label: "StyledAvatar"
})("img{width:", pxRem(baseSize), ";height:", pxRem(baseSize), ";}", theme.breakpoints.sm, "{img{width:", pxRem(smBreakpointSize), ";height:", pxRem(smBreakpointSize), ";}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQm1DIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsZXhCb3gsIEZvcm1FcnJvciwgSW5wdXQgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBweFJlbSwgdGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlRm9ybVJldHVybiwgVmFsaWRhdGUgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuXG5pbXBvcnQgeyBBdmF0YXIgfSBmcm9tICcuLic7XG5cbnR5cGUgQXZhdGFyQ2hvb3NlclByb3BzID0ge1xuICBzcmM6IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgcmVnaXN0ZXI/OiBVc2VGb3JtUmV0dXJuWydyZWdpc3RlciddO1xuICBvbkltYWdlQ2hhbmdlZD86IChpbWFnZUZpbGVMaXN0OiBGaWxlTGlzdCkgPT4gdm9pZDtcbiAgdmFsaWRhdGU/OiBWYWxpZGF0ZTxGaWxlTGlzdD4gfCBSZWNvcmQ8c3RyaW5nLCBWYWxpZGF0ZTxGaWxlTGlzdD4+O1xuICBlcnJvcj86IHN0cmluZztcbn07XG5cbmNvbnN0IGJhc2VTaXplID0gNzU7XG5jb25zdCBzbUJyZWFrcG9pbnRTaXplID0gMTIwO1xuXG5jb25zdCBTdHlsZWRBdmF0YXIgPSBzdHlsZWQoQXZhdGFyKWBcbiAgaW1nIHtcbiAgICB3aWR0aDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICAgIGhlaWdodDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICB9XG5cbiAgJHt0aGVtZS5icmVha3BvaW50cy5zbX0ge1xuICAgIGltZyB7XG4gICAgICB3aWR0aDogJHtweFJlbShzbUJyZWFrcG9pbnRTaXplKX07XG4gICAgICBoZWlnaHQ6ICR7cHhSZW0oc21CcmVha3BvaW50U2l6ZSl9O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgQ2hvb3NlUGhvdG9MYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1sxNl19O1xuICAke3RoZW1lLmJyZWFrcG9pbnRzLnNtfSB7XG4gICAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1syNF19O1xuICB9XG5gO1xuXG5jb25zdCBDaG9vc2VQaG90b1NwYW4gPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7dGhlbWUuY29sb3JzLmh5cGVyfTtcbiAgZm9udC13ZWlnaHQ6ICR7dGhlbWUuZm9udFdlaWdodC50aXRsZX07XG4gIGN1cnNvcjogcG9pbnRlcjtcbmA7XG5cbmNvbnN0IEhpZGRlbklucHV0ID0gc3R5bGVkKElucHV0KWBcbiAgZGlzcGxheTogbm9uZTtcbmA7XG5cbmNvbnN0IFN0eWxlZEZvcm1FcnJvciA9IHN0eWxlZChGb3JtRXJyb3IpYFxuICBwb3NpdGlvbjogaW5pdGlhbDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuZXhwb3J0IGNvbnN0IEF2YXRhckNob29zZXI6IFJlYWN0LkZDPEF2YXRhckNob29zZXJQcm9wcz4gPSAoe1xuICBzcmM6IGV4aXN0aW5nU3JjLFxuICBvbkltYWdlQ2hhbmdlZCxcbiAgZXJyb3IsXG4gIHJlZ2lzdGVyLFxuICB2YWxpZGF0ZSA9IHZhbGlkYXRlUGhvdG9VcGxvYWQsXG4gIG5hbWUgPSAnQXZhdGFyIFBob3RvJyxcbn0pID0+IHtcbiAgY29uc3QgW2ltYWdlU3JjLCBzZXRJbWFnZVNyY10gPSB1c2VTdGF0ZTxzdHJpbmc+KGV4aXN0aW5nU3JjKTtcblxuICBjb25zdCBjaG9vc2VQaG90b0xhYmVsUmVmID0gdXNlUmVmPEhUTUxMYWJlbEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50Py50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIGNvbnN0IGltYWdlRmlsZWxpc3QgPSB0YXJnZXQ/LmZpbGVzO1xuICAgICAgY29uc3QgaW1hZ2VGaWxlID0gaW1hZ2VGaWxlbGlzdD8uWzBdO1xuXG4gICAgICBvbkltYWdlQ2hhbmdlZD8uKGltYWdlRmlsZWxpc3QhKTtcbiAgICAgIGlmIChpbWFnZUZpbGUpIHNldEltYWdlU3JjKFVSTC5jcmVhdGVPYmplY3RVUkwoaW1hZ2VGaWxlKSk7XG4gICAgfSxcbiAgICBbc2V0SW1hZ2VTcmMsIG9uSW1hZ2VDaGFuZ2VkXVxuICApO1xuXG4gIC8vIE5lZWQgdG8gc2ltdWxhdGUgRW50ZXIgYW5kIFNwYWNlIGtleWJvYXJkIHByZXNzZXMgdG8gYWN0aXZhdGUgdGhlXG4gIC8vIGZpbGUgdXBsb2FkZXIgaGVyZSBzaW5jZSBpdCdzIG5vdCBhIHJlYWwgYnV0dG9uLlxuICBjb25zdCBvbkNob29zZVVwbG9hZEtleVByZXNzID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJyAnKVxuICAgICAgICBjaG9vc2VQaG90b0xhYmVsUmVmLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgfSxcbiAgICBbY2hvb3NlUGhvdG9MYWJlbFJlZl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxGbGV4Qm94XG4gICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgd2lkdGg9XCJmaXQtY29udGVudFwiXG4gICAgICBtYXhXaWR0aD17cHhSZW0oMTIwKX1cbiAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgPlxuICAgICAgPFN0eWxlZEF2YXRhciBzcmM9e2ltYWdlU3JjfSBkaXNhYmxlRHJvcHNoYWRvdyBhbHQ9XCJBdmF0YXIgUGhvdG9cIiAvPlxuICAgICAgPENob29zZVBob3RvTGFiZWwgcmVmPXtjaG9vc2VQaG90b0xhYmVsUmVmfSBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIj5cbiAgICAgICAgPENob29zZVBob3RvU3BhblxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e29uQ2hvb3NlVXBsb2FkS2V5UHJlc3N9XG4gICAgICAgID5cbiAgICAgICAgICBDaG9vc2UgUGhvdG9cbiAgICAgICAgPC9DaG9vc2VQaG90b1NwYW4+XG4gICAgICA8L0Nob29zZVBob3RvTGFiZWw+XG4gICAgICA8SGlkZGVuSW5wdXRcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIlxuICAgICAgICBhcmlhLWludmFsaWQ9e0Jvb2xlYW4oZXJyb3IpfVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIHsuLi5yZWdpc3Rlcj8uKG5hbWUsIHtcbiAgICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICAgIHtlcnJvciAmJiA8U3R5bGVkRm9ybUVycm9yIHJvbGU9XCJhbGVydFwiPntlcnJvcn08L1N0eWxlZEZvcm1FcnJvcj59XG4gICAgPC9GbGV4Qm94PlxuICApO1xufTtcblxuY29uc3QgdmFsaWRhdGVQaG90b1VwbG9hZCA9IChmaWxlczogRmlsZUxpc3QpOiBib29sZWFuIHwgc3RyaW5nID0+IHtcbiAgY29uc3QgTUFYX0ZJTEVfU0laRSA9IDUyNDI4ODA7XG4gIGNvbnN0IE1BWF9GSUxFX1NJWkVfSU5fTUIgPSA1O1xuXG4gIGNvbnN0IGZpbGUgPSBmaWxlcz8uaXRlbSgwKTtcbiAgaWYgKCFmaWxlKSByZXR1cm4gdHJ1ZTtcblxuICBjb25zdCB7IHR5cGUsIHNpemUgfSA9IGZpbGU7XG4gIGlmICghWydpbWFnZS9qcGVnJywgJ2ltYWdlL3BuZyddLmluY2x1ZGVzKHR5cGUpKVxuICAgIHJldHVybiAnUGxlYXNlIHVwbG9hZCBhIGpwZWcgb3IgcG5nIGZpbGUuJztcblxuICBpZiAoc2l6ZSA+IE1BWF9GSUxFX1NJWkUpXG4gICAgcmV0dXJuIGBTb3JyeSwgd2UgY2Fubm90IGFjY2VwdCBmaWxlcyBsYXJnZXIgdGhhbiAke01BWF9GSUxFX1NJWkVfSU5fTUJ9IE1CLmA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl19 */"));

var ChoosePhotoLabel = _styled("label", {
  target: "e1puzyt53",
  label: "ChoosePhotoLabel"
})("padding-top:", theme.spacing[16], ";", theme.breakpoints.sm, "{padding-top:", theme.spacing[24], ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQ3FDIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsZXhCb3gsIEZvcm1FcnJvciwgSW5wdXQgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBweFJlbSwgdGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlRm9ybVJldHVybiwgVmFsaWRhdGUgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuXG5pbXBvcnQgeyBBdmF0YXIgfSBmcm9tICcuLic7XG5cbnR5cGUgQXZhdGFyQ2hvb3NlclByb3BzID0ge1xuICBzcmM6IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgcmVnaXN0ZXI/OiBVc2VGb3JtUmV0dXJuWydyZWdpc3RlciddO1xuICBvbkltYWdlQ2hhbmdlZD86IChpbWFnZUZpbGVMaXN0OiBGaWxlTGlzdCkgPT4gdm9pZDtcbiAgdmFsaWRhdGU/OiBWYWxpZGF0ZTxGaWxlTGlzdD4gfCBSZWNvcmQ8c3RyaW5nLCBWYWxpZGF0ZTxGaWxlTGlzdD4+O1xuICBlcnJvcj86IHN0cmluZztcbn07XG5cbmNvbnN0IGJhc2VTaXplID0gNzU7XG5jb25zdCBzbUJyZWFrcG9pbnRTaXplID0gMTIwO1xuXG5jb25zdCBTdHlsZWRBdmF0YXIgPSBzdHlsZWQoQXZhdGFyKWBcbiAgaW1nIHtcbiAgICB3aWR0aDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICAgIGhlaWdodDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICB9XG5cbiAgJHt0aGVtZS5icmVha3BvaW50cy5zbX0ge1xuICAgIGltZyB7XG4gICAgICB3aWR0aDogJHtweFJlbShzbUJyZWFrcG9pbnRTaXplKX07XG4gICAgICBoZWlnaHQ6ICR7cHhSZW0oc21CcmVha3BvaW50U2l6ZSl9O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgQ2hvb3NlUGhvdG9MYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1sxNl19O1xuICAke3RoZW1lLmJyZWFrcG9pbnRzLnNtfSB7XG4gICAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1syNF19O1xuICB9XG5gO1xuXG5jb25zdCBDaG9vc2VQaG90b1NwYW4gPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7dGhlbWUuY29sb3JzLmh5cGVyfTtcbiAgZm9udC13ZWlnaHQ6ICR7dGhlbWUuZm9udFdlaWdodC50aXRsZX07XG4gIGN1cnNvcjogcG9pbnRlcjtcbmA7XG5cbmNvbnN0IEhpZGRlbklucHV0ID0gc3R5bGVkKElucHV0KWBcbiAgZGlzcGxheTogbm9uZTtcbmA7XG5cbmNvbnN0IFN0eWxlZEZvcm1FcnJvciA9IHN0eWxlZChGb3JtRXJyb3IpYFxuICBwb3NpdGlvbjogaW5pdGlhbDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuZXhwb3J0IGNvbnN0IEF2YXRhckNob29zZXI6IFJlYWN0LkZDPEF2YXRhckNob29zZXJQcm9wcz4gPSAoe1xuICBzcmM6IGV4aXN0aW5nU3JjLFxuICBvbkltYWdlQ2hhbmdlZCxcbiAgZXJyb3IsXG4gIHJlZ2lzdGVyLFxuICB2YWxpZGF0ZSA9IHZhbGlkYXRlUGhvdG9VcGxvYWQsXG4gIG5hbWUgPSAnQXZhdGFyIFBob3RvJyxcbn0pID0+IHtcbiAgY29uc3QgW2ltYWdlU3JjLCBzZXRJbWFnZVNyY10gPSB1c2VTdGF0ZTxzdHJpbmc+KGV4aXN0aW5nU3JjKTtcblxuICBjb25zdCBjaG9vc2VQaG90b0xhYmVsUmVmID0gdXNlUmVmPEhUTUxMYWJlbEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50Py50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIGNvbnN0IGltYWdlRmlsZWxpc3QgPSB0YXJnZXQ/LmZpbGVzO1xuICAgICAgY29uc3QgaW1hZ2VGaWxlID0gaW1hZ2VGaWxlbGlzdD8uWzBdO1xuXG4gICAgICBvbkltYWdlQ2hhbmdlZD8uKGltYWdlRmlsZWxpc3QhKTtcbiAgICAgIGlmIChpbWFnZUZpbGUpIHNldEltYWdlU3JjKFVSTC5jcmVhdGVPYmplY3RVUkwoaW1hZ2VGaWxlKSk7XG4gICAgfSxcbiAgICBbc2V0SW1hZ2VTcmMsIG9uSW1hZ2VDaGFuZ2VkXVxuICApO1xuXG4gIC8vIE5lZWQgdG8gc2ltdWxhdGUgRW50ZXIgYW5kIFNwYWNlIGtleWJvYXJkIHByZXNzZXMgdG8gYWN0aXZhdGUgdGhlXG4gIC8vIGZpbGUgdXBsb2FkZXIgaGVyZSBzaW5jZSBpdCdzIG5vdCBhIHJlYWwgYnV0dG9uLlxuICBjb25zdCBvbkNob29zZVVwbG9hZEtleVByZXNzID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJyAnKVxuICAgICAgICBjaG9vc2VQaG90b0xhYmVsUmVmLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgfSxcbiAgICBbY2hvb3NlUGhvdG9MYWJlbFJlZl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxGbGV4Qm94XG4gICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgd2lkdGg9XCJmaXQtY29udGVudFwiXG4gICAgICBtYXhXaWR0aD17cHhSZW0oMTIwKX1cbiAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgPlxuICAgICAgPFN0eWxlZEF2YXRhciBzcmM9e2ltYWdlU3JjfSBkaXNhYmxlRHJvcHNoYWRvdyBhbHQ9XCJBdmF0YXIgUGhvdG9cIiAvPlxuICAgICAgPENob29zZVBob3RvTGFiZWwgcmVmPXtjaG9vc2VQaG90b0xhYmVsUmVmfSBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIj5cbiAgICAgICAgPENob29zZVBob3RvU3BhblxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e29uQ2hvb3NlVXBsb2FkS2V5UHJlc3N9XG4gICAgICAgID5cbiAgICAgICAgICBDaG9vc2UgUGhvdG9cbiAgICAgICAgPC9DaG9vc2VQaG90b1NwYW4+XG4gICAgICA8L0Nob29zZVBob3RvTGFiZWw+XG4gICAgICA8SGlkZGVuSW5wdXRcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIlxuICAgICAgICBhcmlhLWludmFsaWQ9e0Jvb2xlYW4oZXJyb3IpfVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIHsuLi5yZWdpc3Rlcj8uKG5hbWUsIHtcbiAgICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICAgIHtlcnJvciAmJiA8U3R5bGVkRm9ybUVycm9yIHJvbGU9XCJhbGVydFwiPntlcnJvcn08L1N0eWxlZEZvcm1FcnJvcj59XG4gICAgPC9GbGV4Qm94PlxuICApO1xufTtcblxuY29uc3QgdmFsaWRhdGVQaG90b1VwbG9hZCA9IChmaWxlczogRmlsZUxpc3QpOiBib29sZWFuIHwgc3RyaW5nID0+IHtcbiAgY29uc3QgTUFYX0ZJTEVfU0laRSA9IDUyNDI4ODA7XG4gIGNvbnN0IE1BWF9GSUxFX1NJWkVfSU5fTUIgPSA1O1xuXG4gIGNvbnN0IGZpbGUgPSBmaWxlcz8uaXRlbSgwKTtcbiAgaWYgKCFmaWxlKSByZXR1cm4gdHJ1ZTtcblxuICBjb25zdCB7IHR5cGUsIHNpemUgfSA9IGZpbGU7XG4gIGlmICghWydpbWFnZS9qcGVnJywgJ2ltYWdlL3BuZyddLmluY2x1ZGVzKHR5cGUpKVxuICAgIHJldHVybiAnUGxlYXNlIHVwbG9hZCBhIGpwZWcgb3IgcG5nIGZpbGUuJztcblxuICBpZiAoc2l6ZSA+IE1BWF9GSUxFX1NJWkUpXG4gICAgcmV0dXJuIGBTb3JyeSwgd2UgY2Fubm90IGFjY2VwdCBmaWxlcyBsYXJnZXIgdGhhbiAke01BWF9GSUxFX1NJWkVfSU5fTUJ9IE1CLmA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl19 */"));

var ChoosePhotoSpan = _styled("span", {
  target: "e1puzyt52",
  label: "ChoosePhotoSpan"
})("color:", theme.colors.hyper, ";font-weight:", theme.fontWeight.title, ";cursor:pointer;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5Q21DIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsZXhCb3gsIEZvcm1FcnJvciwgSW5wdXQgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBweFJlbSwgdGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlRm9ybVJldHVybiwgVmFsaWRhdGUgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuXG5pbXBvcnQgeyBBdmF0YXIgfSBmcm9tICcuLic7XG5cbnR5cGUgQXZhdGFyQ2hvb3NlclByb3BzID0ge1xuICBzcmM6IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgcmVnaXN0ZXI/OiBVc2VGb3JtUmV0dXJuWydyZWdpc3RlciddO1xuICBvbkltYWdlQ2hhbmdlZD86IChpbWFnZUZpbGVMaXN0OiBGaWxlTGlzdCkgPT4gdm9pZDtcbiAgdmFsaWRhdGU/OiBWYWxpZGF0ZTxGaWxlTGlzdD4gfCBSZWNvcmQ8c3RyaW5nLCBWYWxpZGF0ZTxGaWxlTGlzdD4+O1xuICBlcnJvcj86IHN0cmluZztcbn07XG5cbmNvbnN0IGJhc2VTaXplID0gNzU7XG5jb25zdCBzbUJyZWFrcG9pbnRTaXplID0gMTIwO1xuXG5jb25zdCBTdHlsZWRBdmF0YXIgPSBzdHlsZWQoQXZhdGFyKWBcbiAgaW1nIHtcbiAgICB3aWR0aDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICAgIGhlaWdodDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICB9XG5cbiAgJHt0aGVtZS5icmVha3BvaW50cy5zbX0ge1xuICAgIGltZyB7XG4gICAgICB3aWR0aDogJHtweFJlbShzbUJyZWFrcG9pbnRTaXplKX07XG4gICAgICBoZWlnaHQ6ICR7cHhSZW0oc21CcmVha3BvaW50U2l6ZSl9O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgQ2hvb3NlUGhvdG9MYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1sxNl19O1xuICAke3RoZW1lLmJyZWFrcG9pbnRzLnNtfSB7XG4gICAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1syNF19O1xuICB9XG5gO1xuXG5jb25zdCBDaG9vc2VQaG90b1NwYW4gPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7dGhlbWUuY29sb3JzLmh5cGVyfTtcbiAgZm9udC13ZWlnaHQ6ICR7dGhlbWUuZm9udFdlaWdodC50aXRsZX07XG4gIGN1cnNvcjogcG9pbnRlcjtcbmA7XG5cbmNvbnN0IEhpZGRlbklucHV0ID0gc3R5bGVkKElucHV0KWBcbiAgZGlzcGxheTogbm9uZTtcbmA7XG5cbmNvbnN0IFN0eWxlZEZvcm1FcnJvciA9IHN0eWxlZChGb3JtRXJyb3IpYFxuICBwb3NpdGlvbjogaW5pdGlhbDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuZXhwb3J0IGNvbnN0IEF2YXRhckNob29zZXI6IFJlYWN0LkZDPEF2YXRhckNob29zZXJQcm9wcz4gPSAoe1xuICBzcmM6IGV4aXN0aW5nU3JjLFxuICBvbkltYWdlQ2hhbmdlZCxcbiAgZXJyb3IsXG4gIHJlZ2lzdGVyLFxuICB2YWxpZGF0ZSA9IHZhbGlkYXRlUGhvdG9VcGxvYWQsXG4gIG5hbWUgPSAnQXZhdGFyIFBob3RvJyxcbn0pID0+IHtcbiAgY29uc3QgW2ltYWdlU3JjLCBzZXRJbWFnZVNyY10gPSB1c2VTdGF0ZTxzdHJpbmc+KGV4aXN0aW5nU3JjKTtcblxuICBjb25zdCBjaG9vc2VQaG90b0xhYmVsUmVmID0gdXNlUmVmPEhUTUxMYWJlbEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50Py50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIGNvbnN0IGltYWdlRmlsZWxpc3QgPSB0YXJnZXQ/LmZpbGVzO1xuICAgICAgY29uc3QgaW1hZ2VGaWxlID0gaW1hZ2VGaWxlbGlzdD8uWzBdO1xuXG4gICAgICBvbkltYWdlQ2hhbmdlZD8uKGltYWdlRmlsZWxpc3QhKTtcbiAgICAgIGlmIChpbWFnZUZpbGUpIHNldEltYWdlU3JjKFVSTC5jcmVhdGVPYmplY3RVUkwoaW1hZ2VGaWxlKSk7XG4gICAgfSxcbiAgICBbc2V0SW1hZ2VTcmMsIG9uSW1hZ2VDaGFuZ2VkXVxuICApO1xuXG4gIC8vIE5lZWQgdG8gc2ltdWxhdGUgRW50ZXIgYW5kIFNwYWNlIGtleWJvYXJkIHByZXNzZXMgdG8gYWN0aXZhdGUgdGhlXG4gIC8vIGZpbGUgdXBsb2FkZXIgaGVyZSBzaW5jZSBpdCdzIG5vdCBhIHJlYWwgYnV0dG9uLlxuICBjb25zdCBvbkNob29zZVVwbG9hZEtleVByZXNzID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJyAnKVxuICAgICAgICBjaG9vc2VQaG90b0xhYmVsUmVmLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgfSxcbiAgICBbY2hvb3NlUGhvdG9MYWJlbFJlZl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxGbGV4Qm94XG4gICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgd2lkdGg9XCJmaXQtY29udGVudFwiXG4gICAgICBtYXhXaWR0aD17cHhSZW0oMTIwKX1cbiAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgPlxuICAgICAgPFN0eWxlZEF2YXRhciBzcmM9e2ltYWdlU3JjfSBkaXNhYmxlRHJvcHNoYWRvdyBhbHQ9XCJBdmF0YXIgUGhvdG9cIiAvPlxuICAgICAgPENob29zZVBob3RvTGFiZWwgcmVmPXtjaG9vc2VQaG90b0xhYmVsUmVmfSBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIj5cbiAgICAgICAgPENob29zZVBob3RvU3BhblxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e29uQ2hvb3NlVXBsb2FkS2V5UHJlc3N9XG4gICAgICAgID5cbiAgICAgICAgICBDaG9vc2UgUGhvdG9cbiAgICAgICAgPC9DaG9vc2VQaG90b1NwYW4+XG4gICAgICA8L0Nob29zZVBob3RvTGFiZWw+XG4gICAgICA8SGlkZGVuSW5wdXRcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIlxuICAgICAgICBhcmlhLWludmFsaWQ9e0Jvb2xlYW4oZXJyb3IpfVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIHsuLi5yZWdpc3Rlcj8uKG5hbWUsIHtcbiAgICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICAgIHtlcnJvciAmJiA8U3R5bGVkRm9ybUVycm9yIHJvbGU9XCJhbGVydFwiPntlcnJvcn08L1N0eWxlZEZvcm1FcnJvcj59XG4gICAgPC9GbGV4Qm94PlxuICApO1xufTtcblxuY29uc3QgdmFsaWRhdGVQaG90b1VwbG9hZCA9IChmaWxlczogRmlsZUxpc3QpOiBib29sZWFuIHwgc3RyaW5nID0+IHtcbiAgY29uc3QgTUFYX0ZJTEVfU0laRSA9IDUyNDI4ODA7XG4gIGNvbnN0IE1BWF9GSUxFX1NJWkVfSU5fTUIgPSA1O1xuXG4gIGNvbnN0IGZpbGUgPSBmaWxlcz8uaXRlbSgwKTtcbiAgaWYgKCFmaWxlKSByZXR1cm4gdHJ1ZTtcblxuICBjb25zdCB7IHR5cGUsIHNpemUgfSA9IGZpbGU7XG4gIGlmICghWydpbWFnZS9qcGVnJywgJ2ltYWdlL3BuZyddLmluY2x1ZGVzKHR5cGUpKVxuICAgIHJldHVybiAnUGxlYXNlIHVwbG9hZCBhIGpwZWcgb3IgcG5nIGZpbGUuJztcblxuICBpZiAoc2l6ZSA+IE1BWF9GSUxFX1NJWkUpXG4gICAgcmV0dXJuIGBTb3JyeSwgd2UgY2Fubm90IGFjY2VwdCBmaWxlcyBsYXJnZXIgdGhhbiAke01BWF9GSUxFX1NJWkVfSU5fTUJ9IE1CLmA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl19 */"));

var HiddenInput = /*#__PURE__*/_styled(Input, {
  target: "e1puzyt51",
  label: "HiddenInput"
})(process.env.NODE_ENV === "production" ? {
  name: "eivff4",
  styles: "display:none"
} : {
  name: "eivff4",
  styles: "display:none",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErQ2lDIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsZXhCb3gsIEZvcm1FcnJvciwgSW5wdXQgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBweFJlbSwgdGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlRm9ybVJldHVybiwgVmFsaWRhdGUgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuXG5pbXBvcnQgeyBBdmF0YXIgfSBmcm9tICcuLic7XG5cbnR5cGUgQXZhdGFyQ2hvb3NlclByb3BzID0ge1xuICBzcmM6IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgcmVnaXN0ZXI/OiBVc2VGb3JtUmV0dXJuWydyZWdpc3RlciddO1xuICBvbkltYWdlQ2hhbmdlZD86IChpbWFnZUZpbGVMaXN0OiBGaWxlTGlzdCkgPT4gdm9pZDtcbiAgdmFsaWRhdGU/OiBWYWxpZGF0ZTxGaWxlTGlzdD4gfCBSZWNvcmQ8c3RyaW5nLCBWYWxpZGF0ZTxGaWxlTGlzdD4+O1xuICBlcnJvcj86IHN0cmluZztcbn07XG5cbmNvbnN0IGJhc2VTaXplID0gNzU7XG5jb25zdCBzbUJyZWFrcG9pbnRTaXplID0gMTIwO1xuXG5jb25zdCBTdHlsZWRBdmF0YXIgPSBzdHlsZWQoQXZhdGFyKWBcbiAgaW1nIHtcbiAgICB3aWR0aDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICAgIGhlaWdodDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICB9XG5cbiAgJHt0aGVtZS5icmVha3BvaW50cy5zbX0ge1xuICAgIGltZyB7XG4gICAgICB3aWR0aDogJHtweFJlbShzbUJyZWFrcG9pbnRTaXplKX07XG4gICAgICBoZWlnaHQ6ICR7cHhSZW0oc21CcmVha3BvaW50U2l6ZSl9O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgQ2hvb3NlUGhvdG9MYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1sxNl19O1xuICAke3RoZW1lLmJyZWFrcG9pbnRzLnNtfSB7XG4gICAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1syNF19O1xuICB9XG5gO1xuXG5jb25zdCBDaG9vc2VQaG90b1NwYW4gPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7dGhlbWUuY29sb3JzLmh5cGVyfTtcbiAgZm9udC13ZWlnaHQ6ICR7dGhlbWUuZm9udFdlaWdodC50aXRsZX07XG4gIGN1cnNvcjogcG9pbnRlcjtcbmA7XG5cbmNvbnN0IEhpZGRlbklucHV0ID0gc3R5bGVkKElucHV0KWBcbiAgZGlzcGxheTogbm9uZTtcbmA7XG5cbmNvbnN0IFN0eWxlZEZvcm1FcnJvciA9IHN0eWxlZChGb3JtRXJyb3IpYFxuICBwb3NpdGlvbjogaW5pdGlhbDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuZXhwb3J0IGNvbnN0IEF2YXRhckNob29zZXI6IFJlYWN0LkZDPEF2YXRhckNob29zZXJQcm9wcz4gPSAoe1xuICBzcmM6IGV4aXN0aW5nU3JjLFxuICBvbkltYWdlQ2hhbmdlZCxcbiAgZXJyb3IsXG4gIHJlZ2lzdGVyLFxuICB2YWxpZGF0ZSA9IHZhbGlkYXRlUGhvdG9VcGxvYWQsXG4gIG5hbWUgPSAnQXZhdGFyIFBob3RvJyxcbn0pID0+IHtcbiAgY29uc3QgW2ltYWdlU3JjLCBzZXRJbWFnZVNyY10gPSB1c2VTdGF0ZTxzdHJpbmc+KGV4aXN0aW5nU3JjKTtcblxuICBjb25zdCBjaG9vc2VQaG90b0xhYmVsUmVmID0gdXNlUmVmPEhUTUxMYWJlbEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50Py50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIGNvbnN0IGltYWdlRmlsZWxpc3QgPSB0YXJnZXQ/LmZpbGVzO1xuICAgICAgY29uc3QgaW1hZ2VGaWxlID0gaW1hZ2VGaWxlbGlzdD8uWzBdO1xuXG4gICAgICBvbkltYWdlQ2hhbmdlZD8uKGltYWdlRmlsZWxpc3QhKTtcbiAgICAgIGlmIChpbWFnZUZpbGUpIHNldEltYWdlU3JjKFVSTC5jcmVhdGVPYmplY3RVUkwoaW1hZ2VGaWxlKSk7XG4gICAgfSxcbiAgICBbc2V0SW1hZ2VTcmMsIG9uSW1hZ2VDaGFuZ2VkXVxuICApO1xuXG4gIC8vIE5lZWQgdG8gc2ltdWxhdGUgRW50ZXIgYW5kIFNwYWNlIGtleWJvYXJkIHByZXNzZXMgdG8gYWN0aXZhdGUgdGhlXG4gIC8vIGZpbGUgdXBsb2FkZXIgaGVyZSBzaW5jZSBpdCdzIG5vdCBhIHJlYWwgYnV0dG9uLlxuICBjb25zdCBvbkNob29zZVVwbG9hZEtleVByZXNzID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJyAnKVxuICAgICAgICBjaG9vc2VQaG90b0xhYmVsUmVmLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgfSxcbiAgICBbY2hvb3NlUGhvdG9MYWJlbFJlZl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxGbGV4Qm94XG4gICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgd2lkdGg9XCJmaXQtY29udGVudFwiXG4gICAgICBtYXhXaWR0aD17cHhSZW0oMTIwKX1cbiAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgPlxuICAgICAgPFN0eWxlZEF2YXRhciBzcmM9e2ltYWdlU3JjfSBkaXNhYmxlRHJvcHNoYWRvdyBhbHQ9XCJBdmF0YXIgUGhvdG9cIiAvPlxuICAgICAgPENob29zZVBob3RvTGFiZWwgcmVmPXtjaG9vc2VQaG90b0xhYmVsUmVmfSBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIj5cbiAgICAgICAgPENob29zZVBob3RvU3BhblxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e29uQ2hvb3NlVXBsb2FkS2V5UHJlc3N9XG4gICAgICAgID5cbiAgICAgICAgICBDaG9vc2UgUGhvdG9cbiAgICAgICAgPC9DaG9vc2VQaG90b1NwYW4+XG4gICAgICA8L0Nob29zZVBob3RvTGFiZWw+XG4gICAgICA8SGlkZGVuSW5wdXRcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIlxuICAgICAgICBhcmlhLWludmFsaWQ9e0Jvb2xlYW4oZXJyb3IpfVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIHsuLi5yZWdpc3Rlcj8uKG5hbWUsIHtcbiAgICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICAgIHtlcnJvciAmJiA8U3R5bGVkRm9ybUVycm9yIHJvbGU9XCJhbGVydFwiPntlcnJvcn08L1N0eWxlZEZvcm1FcnJvcj59XG4gICAgPC9GbGV4Qm94PlxuICApO1xufTtcblxuY29uc3QgdmFsaWRhdGVQaG90b1VwbG9hZCA9IChmaWxlczogRmlsZUxpc3QpOiBib29sZWFuIHwgc3RyaW5nID0+IHtcbiAgY29uc3QgTUFYX0ZJTEVfU0laRSA9IDUyNDI4ODA7XG4gIGNvbnN0IE1BWF9GSUxFX1NJWkVfSU5fTUIgPSA1O1xuXG4gIGNvbnN0IGZpbGUgPSBmaWxlcz8uaXRlbSgwKTtcbiAgaWYgKCFmaWxlKSByZXR1cm4gdHJ1ZTtcblxuICBjb25zdCB7IHR5cGUsIHNpemUgfSA9IGZpbGU7XG4gIGlmICghWydpbWFnZS9qcGVnJywgJ2ltYWdlL3BuZyddLmluY2x1ZGVzKHR5cGUpKVxuICAgIHJldHVybiAnUGxlYXNlIHVwbG9hZCBhIGpwZWcgb3IgcG5nIGZpbGUuJztcblxuICBpZiAoc2l6ZSA+IE1BWF9GSUxFX1NJWkUpXG4gICAgcmV0dXJuIGBTb3JyeSwgd2UgY2Fubm90IGFjY2VwdCBmaWxlcyBsYXJnZXIgdGhhbiAke01BWF9GSUxFX1NJWkVfSU5fTUJ9IE1CLmA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var StyledFormError = /*#__PURE__*/_styled(FormError, {
  target: "e1puzyt50",
  label: "StyledFormError"
})(process.env.NODE_ENV === "production" ? {
  name: "1l8affw",
  styles: "position:initial;text-align:center"
} : {
  name: "1l8affw",
  styles: "position:initial;text-align:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRHlDIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdmF0YXJDaG9vc2VyL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsZXhCb3gsIEZvcm1FcnJvciwgSW5wdXQgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBweFJlbSwgdGhlbWUgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlRm9ybVJldHVybiwgVmFsaWRhdGUgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuXG5pbXBvcnQgeyBBdmF0YXIgfSBmcm9tICcuLic7XG5cbnR5cGUgQXZhdGFyQ2hvb3NlclByb3BzID0ge1xuICBzcmM6IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgcmVnaXN0ZXI/OiBVc2VGb3JtUmV0dXJuWydyZWdpc3RlciddO1xuICBvbkltYWdlQ2hhbmdlZD86IChpbWFnZUZpbGVMaXN0OiBGaWxlTGlzdCkgPT4gdm9pZDtcbiAgdmFsaWRhdGU/OiBWYWxpZGF0ZTxGaWxlTGlzdD4gfCBSZWNvcmQ8c3RyaW5nLCBWYWxpZGF0ZTxGaWxlTGlzdD4+O1xuICBlcnJvcj86IHN0cmluZztcbn07XG5cbmNvbnN0IGJhc2VTaXplID0gNzU7XG5jb25zdCBzbUJyZWFrcG9pbnRTaXplID0gMTIwO1xuXG5jb25zdCBTdHlsZWRBdmF0YXIgPSBzdHlsZWQoQXZhdGFyKWBcbiAgaW1nIHtcbiAgICB3aWR0aDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICAgIGhlaWdodDogJHtweFJlbShiYXNlU2l6ZSl9O1xuICB9XG5cbiAgJHt0aGVtZS5icmVha3BvaW50cy5zbX0ge1xuICAgIGltZyB7XG4gICAgICB3aWR0aDogJHtweFJlbShzbUJyZWFrcG9pbnRTaXplKX07XG4gICAgICBoZWlnaHQ6ICR7cHhSZW0oc21CcmVha3BvaW50U2l6ZSl9O1xuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgQ2hvb3NlUGhvdG9MYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1sxNl19O1xuICAke3RoZW1lLmJyZWFrcG9pbnRzLnNtfSB7XG4gICAgcGFkZGluZy10b3A6ICR7dGhlbWUuc3BhY2luZ1syNF19O1xuICB9XG5gO1xuXG5jb25zdCBDaG9vc2VQaG90b1NwYW4gPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7dGhlbWUuY29sb3JzLmh5cGVyfTtcbiAgZm9udC13ZWlnaHQ6ICR7dGhlbWUuZm9udFdlaWdodC50aXRsZX07XG4gIGN1cnNvcjogcG9pbnRlcjtcbmA7XG5cbmNvbnN0IEhpZGRlbklucHV0ID0gc3R5bGVkKElucHV0KWBcbiAgZGlzcGxheTogbm9uZTtcbmA7XG5cbmNvbnN0IFN0eWxlZEZvcm1FcnJvciA9IHN0eWxlZChGb3JtRXJyb3IpYFxuICBwb3NpdGlvbjogaW5pdGlhbDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuZXhwb3J0IGNvbnN0IEF2YXRhckNob29zZXI6IFJlYWN0LkZDPEF2YXRhckNob29zZXJQcm9wcz4gPSAoe1xuICBzcmM6IGV4aXN0aW5nU3JjLFxuICBvbkltYWdlQ2hhbmdlZCxcbiAgZXJyb3IsXG4gIHJlZ2lzdGVyLFxuICB2YWxpZGF0ZSA9IHZhbGlkYXRlUGhvdG9VcGxvYWQsXG4gIG5hbWUgPSAnQXZhdGFyIFBob3RvJyxcbn0pID0+IHtcbiAgY29uc3QgW2ltYWdlU3JjLCBzZXRJbWFnZVNyY10gPSB1c2VTdGF0ZTxzdHJpbmc+KGV4aXN0aW5nU3JjKTtcblxuICBjb25zdCBjaG9vc2VQaG90b0xhYmVsUmVmID0gdXNlUmVmPEhUTUxMYWJlbEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50Py50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgIGNvbnN0IGltYWdlRmlsZWxpc3QgPSB0YXJnZXQ/LmZpbGVzO1xuICAgICAgY29uc3QgaW1hZ2VGaWxlID0gaW1hZ2VGaWxlbGlzdD8uWzBdO1xuXG4gICAgICBvbkltYWdlQ2hhbmdlZD8uKGltYWdlRmlsZWxpc3QhKTtcbiAgICAgIGlmIChpbWFnZUZpbGUpIHNldEltYWdlU3JjKFVSTC5jcmVhdGVPYmplY3RVUkwoaW1hZ2VGaWxlKSk7XG4gICAgfSxcbiAgICBbc2V0SW1hZ2VTcmMsIG9uSW1hZ2VDaGFuZ2VkXVxuICApO1xuXG4gIC8vIE5lZWQgdG8gc2ltdWxhdGUgRW50ZXIgYW5kIFNwYWNlIGtleWJvYXJkIHByZXNzZXMgdG8gYWN0aXZhdGUgdGhlXG4gIC8vIGZpbGUgdXBsb2FkZXIgaGVyZSBzaW5jZSBpdCdzIG5vdCBhIHJlYWwgYnV0dG9uLlxuICBjb25zdCBvbkNob29zZVVwbG9hZEtleVByZXNzID0gdXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJyAnKVxuICAgICAgICBjaG9vc2VQaG90b0xhYmVsUmVmLmN1cnJlbnQ/LmNsaWNrKCk7XG4gICAgfSxcbiAgICBbY2hvb3NlUGhvdG9MYWJlbFJlZl1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxGbGV4Qm94XG4gICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgd2lkdGg9XCJmaXQtY29udGVudFwiXG4gICAgICBtYXhXaWR0aD17cHhSZW0oMTIwKX1cbiAgICAgIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4gICAgPlxuICAgICAgPFN0eWxlZEF2YXRhciBzcmM9e2ltYWdlU3JjfSBkaXNhYmxlRHJvcHNoYWRvdyBhbHQ9XCJBdmF0YXIgUGhvdG9cIiAvPlxuICAgICAgPENob29zZVBob3RvTGFiZWwgcmVmPXtjaG9vc2VQaG90b0xhYmVsUmVmfSBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIj5cbiAgICAgICAgPENob29zZVBob3RvU3BhblxuICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e29uQ2hvb3NlVXBsb2FkS2V5UHJlc3N9XG4gICAgICAgID5cbiAgICAgICAgICBDaG9vc2UgUGhvdG9cbiAgICAgICAgPC9DaG9vc2VQaG90b1NwYW4+XG4gICAgICA8L0Nob29zZVBob3RvTGFiZWw+XG4gICAgICA8SGlkZGVuSW5wdXRcbiAgICAgICAgdHlwZT1cImZpbGVcIlxuICAgICAgICBodG1sRm9yPVwiYXZhdGFyLWNob29zZXJcIlxuICAgICAgICBhcmlhLWludmFsaWQ9e0Jvb2xlYW4oZXJyb3IpfVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIHsuLi5yZWdpc3Rlcj8uKG5hbWUsIHtcbiAgICAgICAgICBvbkNoYW5nZSxcbiAgICAgICAgICB2YWxpZGF0ZSxcbiAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIH0pfVxuICAgICAgLz5cbiAgICAgIHtlcnJvciAmJiA8U3R5bGVkRm9ybUVycm9yIHJvbGU9XCJhbGVydFwiPntlcnJvcn08L1N0eWxlZEZvcm1FcnJvcj59XG4gICAgPC9GbGV4Qm94PlxuICApO1xufTtcblxuY29uc3QgdmFsaWRhdGVQaG90b1VwbG9hZCA9IChmaWxlczogRmlsZUxpc3QpOiBib29sZWFuIHwgc3RyaW5nID0+IHtcbiAgY29uc3QgTUFYX0ZJTEVfU0laRSA9IDUyNDI4ODA7XG4gIGNvbnN0IE1BWF9GSUxFX1NJWkVfSU5fTUIgPSA1O1xuXG4gIGNvbnN0IGZpbGUgPSBmaWxlcz8uaXRlbSgwKTtcbiAgaWYgKCFmaWxlKSByZXR1cm4gdHJ1ZTtcblxuICBjb25zdCB7IHR5cGUsIHNpemUgfSA9IGZpbGU7XG4gIGlmICghWydpbWFnZS9qcGVnJywgJ2ltYWdlL3BuZyddLmluY2x1ZGVzKHR5cGUpKVxuICAgIHJldHVybiAnUGxlYXNlIHVwbG9hZCBhIGpwZWcgb3IgcG5nIGZpbGUuJztcblxuICBpZiAoc2l6ZSA+IE1BWF9GSUxFX1NJWkUpXG4gICAgcmV0dXJuIGBTb3JyeSwgd2UgY2Fubm90IGFjY2VwdCBmaWxlcyBsYXJnZXIgdGhhbiAke01BWF9GSUxFX1NJWkVfSU5fTUJ9IE1CLmA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

export var AvatarChooser = function AvatarChooser(_ref) {
  var existingSrc = _ref.src,
      onImageChanged = _ref.onImageChanged,
      error = _ref.error,
      register = _ref.register,
      _ref$validate = _ref.validate,
      validate = _ref$validate === void 0 ? validatePhotoUpload : _ref$validate,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? 'Avatar Photo' : _ref$name;

  var _useState = useState(existingSrc),
      _useState2 = _slicedToArray(_useState, 2),
      imageSrc = _useState2[0],
      setImageSrc = _useState2[1];

  var choosePhotoLabelRef = useRef(null);
  var onChange = useCallback(function (event) {
    var target = event === null || event === void 0 ? void 0 : event.target;
    var imageFilelist = target === null || target === void 0 ? void 0 : target.files;
    var imageFile = imageFilelist === null || imageFilelist === void 0 ? void 0 : imageFilelist[0];
    onImageChanged === null || onImageChanged === void 0 ? void 0 : onImageChanged(imageFilelist);
    if (imageFile) setImageSrc(URL.createObjectURL(imageFile));
  }, [setImageSrc, onImageChanged]); // Need to simulate Enter and Space keyboard presses to activate the
  // file uploader here since it's not a real button.

  var onChooseUploadKeyPress = useCallback(function (event) {
    var _choosePhotoLabelRef$;

    if (event.key === 'Enter' || event.key === ' ') (_choosePhotoLabelRef$ = choosePhotoLabelRef.current) === null || _choosePhotoLabelRef$ === void 0 ? void 0 : _choosePhotoLabelRef$.click();
  }, [choosePhotoLabelRef]);
  return /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: "center",
    flexDirection: "column",
    justifyContent: "center",
    width: "fit-content",
    maxWidth: pxRem(120),
    "aria-live": "polite"
  }, /*#__PURE__*/React.createElement(StyledAvatar, {
    src: imageSrc,
    disableDropshadow: true,
    alt: "Avatar Photo"
  }), /*#__PURE__*/React.createElement(ChoosePhotoLabel, {
    ref: choosePhotoLabelRef,
    htmlFor: "avatar-chooser"
  }, /*#__PURE__*/React.createElement(ChoosePhotoSpan, {
    role: "button",
    tabIndex: 0,
    onKeyPress: onChooseUploadKeyPress
  }, "Choose Photo")), /*#__PURE__*/React.createElement(HiddenInput, _extends({
    type: "file",
    htmlFor: "avatar-chooser",
    "aria-invalid": Boolean(error),
    name: name,
    onChange: onChange
  }, register === null || register === void 0 ? void 0 : register(name, {
    onChange: onChange,
    validate: validate,
    required: false
  }))), error && /*#__PURE__*/React.createElement(StyledFormError, {
    role: "alert"
  }, error));
};

var validatePhotoUpload = function validatePhotoUpload(files) {
  var MAX_FILE_SIZE = 5242880;
  var MAX_FILE_SIZE_IN_MB = 5;
  var file = files === null || files === void 0 ? void 0 : files.item(0);
  if (!file) return true;
  var type = file.type,
      size = file.size;
  if (!['image/jpeg', 'image/png'].includes(type)) return 'Please upload a jpeg or png file.';
  if (size > MAX_FILE_SIZE) return "Sorry, we cannot accept files larger than ".concat(MAX_FILE_SIZE_IN_MB, " MB.");
  return true;
};