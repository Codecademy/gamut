import _styled from "@emotion/styled/base";
import { Anchor, Box, Column, FlexBox, GridBox, LayoutGrid, Text } from '@codecademy/gamut';
import { Background, css } from '@codecademy/gamut-styles';
import React from 'react';
import { careerPaths, topLanguages, topSubjects } from '../../../lib/catalogList';
import { LayoutGridAntiAliased } from '../../shared';

var StyledColumn = /*#__PURE__*/_styled(Column, {
  target: "edbfvag2",
  label: "StyledColumn"
})(css({
  borderBottom: 1,
  borderColor: 'navy-300'
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9BcHBIZWFkZXIvQXBwSGVhZGVyRWxlbWVudHMvQXBwSGVhZGVyQ2F0YWxvZ1NlY3Rpb24vaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DcUIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL0FwcEhlYWRlci9BcHBIZWFkZXJFbGVtZW50cy9BcHBIZWFkZXJDYXRhbG9nU2VjdGlvbi9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbmNob3IsXG4gIEJveCxcbiAgQ29sdW1uLFxuICBGbGV4Qm94LFxuICBHcmlkQm94LFxuICBMYXlvdXRHcmlkLFxuICBUZXh0LFxufSBmcm9tICdAY29kZWNhZGVteS9nYW11dCc7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kLCBjc3MgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgY2FyZWVyUGF0aHMsXG4gIHRvcExhbmd1YWdlcyxcbiAgdG9wU3ViamVjdHMsXG59IGZyb20gJy4uLy4uLy4uL2xpYi9jYXRhbG9nTGlzdCc7XG5pbXBvcnQgeyBMYXlvdXRHcmlkQW50aUFsaWFzZWQgfSBmcm9tICcuLi8uLi9zaGFyZWQnO1xuaW1wb3J0IHtcbiAgQXBwSGVhZGVyQ2F0YWxvZ0Ryb3Bkb3duSXRlbSxcbiAgQXBwSGVhZGVyQ2xpY2tIYW5kbGVyLFxuICBBcHBIZWFkZXJJdGVtLFxufSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIEFwcEhlYWRlckNhdGFsb2dTZWN0aW9uUHJvcHMgPSB7XG4gIGFjdGlvbjogQXBwSGVhZGVyQ2xpY2tIYW5kbGVyO1xuICBpdGVtOiBBcHBIZWFkZXJDYXRhbG9nRHJvcGRvd25JdGVtO1xuICByZWY/OiBSZWFjdC5SZWZPYmplY3Q8SFRNTFVMaXN0RWxlbWVudD47XG4gIHJvbGU/OiBzdHJpbmc7XG4gIGlkPzogc3RyaW5nO1xuICBrZXlEb3duRXZlbnRzPzogKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB2b2lkO1xuICBpc09wZW4/OiBib29sZWFuO1xuICBoYW5kbGVDbG9zZT86ICgpID0+IHZvaWQ7XG59O1xuXG5jb25zdCBTdHlsZWRDb2x1bW4gPSBzdHlsZWQoQ29sdW1uKShcbiAgY3NzKHtcbiAgICBib3JkZXJCb3R0b206IDEsXG4gICAgYm9yZGVyQ29sb3I6ICduYXZ5LTMwMCcsXG4gIH0pXG4pO1xuXG5jb25zdCBTdHlsZWRSZXNwb25zaXZlQ29sdW1uID0gc3R5bGVkKENvbHVtbikoXG4gIGNzcyh7XG4gICAgYm9yZGVyVG9wOiAxLFxuICAgIGJvcmRlckNvbG9yOiAnbmF2eS0zMDAnLFxuICB9KVxuKTtcblxuY29uc3QgU3R5bGVkQW5jaG9yQ29sdW1uID0gc3R5bGVkKENvbHVtbikoXG4gIGNzcyh7XG4gICAgcGI6IDE2LFxuICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICBwYjogMCxcbiAgICB9LFxuICB9KVxuKTtcblxuY29uc3QgY2F0YWxvZ0FuY2hvckRhdGE6IEFwcEhlYWRlckl0ZW0gPSB7XG4gIHRleHQ6ICdFeHBsb3JlIGZ1bGwgY2F0YWxvZycsXG4gIGlkOiAnY2F0YWxvZycsXG4gIHR5cGU6ICd0ZXh0LWJ1dHRvbicsXG4gIGhyZWY6ICcvY2F0YWxvZycsXG4gIHRyYWNraW5nVGFyZ2V0OiAndG9wbmF2X2NhdGFsb2dfZXhwbG9yZV9mdWxsJyxcbn07XG5cbmNvbnN0IGdyaWRUZW1wbGF0ZSA9IGAnbGFuZ3VhZ2VIZWFkZXIgZ2FwIHN1YmplY3RIZWFkZXInXG4gICAgICAgICAgICAgICAgICAgICdsYW5ndWFnZSBsYW5ndWFnZSBzdWJqZWN0J1xuICAgICAgICAgICAgICAgICAgICAnbGFuZ3VhZ2UgbGFuZ3VhZ2Ugc3ViamVjdCdcbiAgICAgICAgICAgICAgICAgICAgJ2xhbmd1YWdlIGxhbmd1YWdlIHN1YmplY3QnXG4gICAgICAgICAgICAgICAgICAgICdsYW5ndWFnZSBsYW5ndWFnZSBzdWJqZWN0J1xuICAgICAgICAgICAgICAgICAgICAnbGFuZ3VhZ2UgbGFuZ3VhZ2Ugc3ViamVjdCdcbiAgICAgICAgICAgICAgICAgICAgJ2xhbmd1YWdlIGxhbmd1YWdlIHN1YmplY3QnYDtcblxuY29uc3QgcmVzcG9uc2l2ZUdyaWRUZW1wbGF0ZSA9IGAnbGFuZ3VhZ2VIZWFkZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhbmd1YWdlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYW5ndWFnZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFuZ3VhZ2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhbmd1YWdlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYW5ndWFnZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFuZ3VhZ2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhbmd1YWdlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYW5ndWFnZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFuZ3VhZ2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhbmd1YWdlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYW5ndWFnZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFuZ3VhZ2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmplY3RIZWFkZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmplY3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmplY3QnYDtcblxuZXhwb3J0IGNvbnN0IEFwcEhlYWRlckNhdGFsb2dTZWN0aW9uID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgSFRNTERpdkVsZW1lbnQsXG4gIEFwcEhlYWRlckNhdGFsb2dTZWN0aW9uUHJvcHNcbj4oKHsgYWN0aW9uLCBpdGVtLCBpc09wZW4sIGtleURvd25FdmVudHMsIGhhbmRsZUNsb3NlIH0sIHJlZikgPT4ge1xuICBjb25zdCB0YWJJbmRleCA9IGlzT3BlbiA9PT0gZmFsc2UgPyAtMSA6IDA7XG5cbiAgY29uc3Qgb25DbGljayA9IChcbiAgICBldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MQW5jaG9yRWxlbWVudCwgTW91c2VFdmVudD4sXG4gICAgbGlua0l0ZW06IEFwcEhlYWRlckl0ZW1cbiAgKSA9PiB7XG4gICAgaGFuZGxlQ2xvc2U/LigpO1xuICAgIHJldHVybiBhY3Rpb24oZXZlbnQsIGxpbmtJdGVtKTtcbiAgfTtcblxuICBjb25zdCBEZXNjcmlwdGlvblNlY3Rpb246IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHN1YnRpdGxlOiBzdHJpbmc7XG4gIH0+ID0gKHsgdGl0bGUsIHN1YnRpdGxlIH0pID0+IChcbiAgICA8RmxleEJveFxuICAgICAgZGF0YS1mb2N1c2FibGVjYXRhbG9nPVwidHJ1ZVwiXG4gICAgICBkYXRhLXRlc3RpZD1cInRpdGxlLWRlc2NyaXB0aW9uLXNlY3Rpb25cIlxuICAgICAgdGFiSW5kZXg9ey0xfVxuICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgPlxuICAgICAgPFRleHQgYXM9XCJoMlwiIHZhcmlhbnQ9XCJ0aXRsZS14c1wiIG1iPXs4fSBmb250V2VpZ2h0PXs3MDB9PlxuICAgICAgICB7dGl0bGV9XG4gICAgICA8L1RleHQ+XG4gICAgICA8VGV4dCBmb250U2l6ZT17MTR9PntzdWJ0aXRsZX08L1RleHQ+XG4gICAgPC9GbGV4Qm94PlxuICApO1xuXG4gIGNvbnN0IFN1YmhlYWRlcjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8eyB0aXRsZTogc3RyaW5nIH0+ID0gKHsgdGl0bGUgfSkgPT4gKFxuICAgIDxUZXh0XG4gICAgICBkYXRhLWZvY3VzYWJsZWNhdGFsb2c9XCJ0cnVlXCJcbiAgICAgIGFzPVwiaDNcIlxuICAgICAga2V5PXtpdGVtLmlkfVxuICAgICAgd2lkdGg9XCIxMnJlbVwiXG4gICAgICB0YWJJbmRleD17LTF9XG4gICAgICB2YXJpYW50PVwicC1zbWFsbFwiXG4gICAgICBjb2xvcj1cIm5hdnktNzAwXCJcbiAgICAgIHBiPXt7IF86IDE2LCBsZzogOCB9fVxuICAgICAgZm9udEZhbWlseT1cImFjY2VudFwiXG4gICAgPlxuICAgICAge3RpdGxlfVxuICAgIDwvVGV4dD5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxMYXlvdXRHcmlkQW50aUFsaWFzZWQgb25LZXlEb3duPXtrZXlEb3duRXZlbnRzfSByZWY9e3JlZn0gYXM9XCJ1bFwiIHA9ezB9PlxuICAgICAgeyFpdGVtLmhpZGVDYXJlZXJQYXRocyAmJiAoXG4gICAgICAgIDxTdHlsZWRDb2x1bW4gc2l6ZT17MTJ9IGtleT1cIlRvcCBjYXJlZXIgcGF0aHNcIiBhcz1cImxpXCI+XG4gICAgICAgICAgPExheW91dEdyaWQ+XG4gICAgICAgICAgICA8Q29sdW1uIHNpemU9e3sgeHM6IDEyLCBsZzogMyB9fT5cbiAgICAgICAgICAgICAgPEJhY2tncm91bmRcbiAgICAgICAgICAgICAgICBiZz1cIm5hdnktODAwXCJcbiAgICAgICAgICAgICAgICBjb2xvcj1cImJsdWUtMFwiXG4gICAgICAgICAgICAgICAgcHg9e3sgXzogMTYsIHhzOiAzMiwgc206IDY0LCBtZDogNDgsIGxnOiA0MCB9fVxuICAgICAgICAgICAgICAgIHB5PXt7IF86IDE2LCBzbTogMzIgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxEZXNjcmlwdGlvblNlY3Rpb25cbiAgICAgICAgICAgICAgICAgIHRpdGxlPVwiVG9wIGNhcmVlciBwYXRoc1wiXG4gICAgICAgICAgICAgICAgICBzdWJ0aXRsZT1cIkxhbmQgYSByb2xlIGluIHRlY2ggd2l0aCBzdGVwLWJ5LXN0ZXAgZ3VpZGFuY2UuXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0JhY2tncm91bmQ+XG4gICAgICAgICAgICA8L0NvbHVtbj5cbiAgICAgICAgICAgIDxDb2x1bW4gc2l6ZT17eyB4czogMTIsIGxnOiA4IH19PlxuICAgICAgICAgICAgICA8TGF5b3V0R3JpZCBweT17MzJ9IHBsPXt7IF86IDE2LCB4czogMzIsIHNtOiA2NCwgbWQ6IDQ4IH19PlxuICAgICAgICAgICAgICAgIHtjYXJlZXJQYXRocy5tYXAoKGl0ZW0pID0+IChcbiAgICAgICAgICAgICAgICAgIDxTdHlsZWRBbmNob3JDb2x1bW4ga2V5PXtpdGVtLmlkfSBzaXplPXt7IF86IDEyLCBsZzogNCB9fT5cbiAgICAgICAgICAgICAgICAgICAgPEFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZm9jdXNhYmxlY2F0YWxvZz1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e2l0ZW0uaHJlZn1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZXZlbnQpID0+IG9uQ2xpY2soZXZlbnQsIGl0ZW0gYXMgQXBwSGVhZGVySXRlbSl9XG4gICAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9e3RhYkluZGV4fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAge2l0ZW0udGV4dH1cbiAgICAgICAgICAgICAgICAgICAgPC9BbmNob3I+XG4gICAgICAgICAgICAgICAgICA8L1N0eWxlZEFuY2hvckNvbHVtbj5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9MYXlvdXRHcmlkPlxuICAgICAgICAgICAgPC9Db2x1bW4+XG4gICAgICAgICAgPC9MYXlvdXRHcmlkPlxuICAgICAgICA8L1N0eWxlZENvbHVtbj5cbiAgICAgICl9XG4gICAgICA8Q29sdW1uIHNpemU9ezEyfSBrZXk9XCJQb3B1bGFyIGxhbmd1YWdlcyBhbmQgc3ViamVjdHNcIiBhcz1cImxpXCI+XG4gICAgICAgIDxMYXlvdXRHcmlkPlxuICAgICAgICAgIDxDb2x1bW4gc2l6ZT17eyB4czogMTIsIGxnOiAzIH19PlxuICAgICAgICAgICAgPEJhY2tncm91bmRcbiAgICAgICAgICAgICAgYmc9XCJuYXZ5LTgwMFwiXG4gICAgICAgICAgICAgIGNvbG9yPVwiYmx1ZS0wXCJcbiAgICAgICAgICAgICAgcHg9e3sgXzogMTYsIHhzOiAzMiwgc206IDY0LCBtZDogNDgsIGxnOiA0MCB9fVxuICAgICAgICAgICAgICBweT17eyBfOiAxNiwgc206IDMyIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxEZXNjcmlwdGlvblNlY3Rpb25cbiAgICAgICAgICAgICAgICB0aXRsZT1cIlBvcHVsYXIgbGFuZ3VhZ2VzIGFuZCBzdWJqZWN0c1wiXG4gICAgICAgICAgICAgICAgc3VidGl0bGU9XCJGaW5kIGNvdXJzZXMgaW4gbGFuZ3VhZ2VzIG9yIHN1YmplY3RzIHRoYXQgaW50ZXJlc3QgeW91LlwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxBbmNob3JcbiAgICAgICAgICAgICAgICBkaXNwbGF5PXt7IF86ICdub25lJywgbGc6ICdibG9jaycgfX1cbiAgICAgICAgICAgICAgICB2YXJpYW50PVwic3RhbmRhcmRcIlxuICAgICAgICAgICAgICAgIGZvbnRTaXplPXsxNH1cbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0PXs3MDB9XG4gICAgICAgICAgICAgICAgdGV4dEFsaWduPXt7IF86ICdjZW50ZXInLCBtZDogJ2xlZnQnIH19XG4gICAgICAgICAgICAgICAgaHJlZj17Y2F0YWxvZ0FuY2hvckRhdGEuaHJlZn1cbiAgICAgICAgICAgICAgICBkYXRhLWZvY3VzYWJsZWNhdGFsb2c9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZXZlbnQpID0+IG9uQ2xpY2soZXZlbnQsIGNhdGFsb2dBbmNob3JEYXRhKX1cbiAgICAgICAgICAgICAgICB0YWJJbmRleD17dGFiSW5kZXh9XG4gICAgICAgICAgICAgICAgbXQ9ezk2fVxuICAgICAgICAgICAgICAgIHB0PXsyNH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtjYXRhbG9nQW5jaG9yRGF0YS50ZXh0fSDihpJcbiAgICAgICAgICAgICAgPC9BbmNob3I+XG4gICAgICAgICAgICA8L0JhY2tncm91bmQ+XG4gICAgICAgICAgPC9Db2x1bW4+XG4gICAgICAgICAgPENvbHVtblxuICAgICAgICAgICAgc2l6ZT17eyB4czogMTIsIGxnOiA4IH19XG4gICAgICAgICAgICBweT17MzJ9XG4gICAgICAgICAgICBwbD17eyBfOiAxNiwgeHM6IDMyLCBzbTogNjQsIG1kOiA0OCB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxHcmlkQm94XG4gICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZUFyZWFzPXt7XG4gICAgICAgICAgICAgICAgXzogcmVzcG9uc2l2ZUdyaWRUZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICBsZzogZ3JpZFRlbXBsYXRlLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Qm94IGdyaWRBcmVhPVwibGFuZ3VhZ2VIZWFkZXJcIj5cbiAgICAgICAgICAgICAgICA8U3ViaGVhZGVyIHRpdGxlPVwiVG9wIExhbmd1YWdlc1wiIC8+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgZ3JpZEFyZWE9XCJsYW5ndWFnZVwiXG4gICAgICAgICAgICAgICAgZGlzcGxheT1cImdyaWRcIlxuICAgICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM9e3sgXzogJzFmcicsIGxnOiAncmVwZWF0KDIsIDFmciknIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dG9wTGFuZ3VhZ2VzLm1hcCgoaXRlbSkgPT4gKFxuICAgICAgICAgICAgICAgICAgPEJveCB3aWR0aD1cIjEycmVtXCIga2V5PXtpdGVtLmlkfSBtaW5IZWlnaHQ9ezM2fT5cbiAgICAgICAgICAgICAgICAgICAgPEFuY2hvclxuICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZm9jdXNhYmxlY2F0YWxvZz1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e2l0ZW0uaHJlZn1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZXZlbnQpID0+IG9uQ2xpY2soZXZlbnQsIGl0ZW0gYXMgQXBwSGVhZGVySXRlbSl9XG4gICAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9e3RhYkluZGV4fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAge2l0ZW0udGV4dH1cbiAgICAgICAgICAgICAgICAgICAgPC9BbmNob3I+XG4gICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDxCb3ggcHQ9e3sgXzogMTYsIGxnOiAwIH19IGdyaWRBcmVhPVwic3ViamVjdEhlYWRlclwiPlxuICAgICAgICAgICAgICAgIDxTdWJoZWFkZXIgdGl0bGU9XCJUb3AgU3ViamVjdHNcIiAvPlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPEJveCBncmlkQXJlYT1cInN1YmplY3RcIiBkaXNwbGF5PVwiZ3JpZFwiIGdyaWRUZW1wbGF0ZUNvbHVtbnM9XCIxZnJcIj5cbiAgICAgICAgICAgICAgICB7dG9wU3ViamVjdHMubWFwKChpdGVtKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8Qm94IHdpZHRoPVwiMTJyZW1cIiBrZXk9e2l0ZW0uaWR9IG1pbkhlaWdodD17MzZ9PlxuICAgICAgICAgICAgICAgICAgICA8QW5jaG9yXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YS1mb2N1c2FibGVjYXRhbG9nPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImludGVyZmFjZVwiXG4gICAgICAgICAgICAgICAgICAgICAgaHJlZj17aXRlbS5ocmVmfVxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4gb25DbGljayhldmVudCwgaXRlbSBhcyBBcHBIZWFkZXJJdGVtKX1cbiAgICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17dGFiSW5kZXh9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7aXRlbS50ZXh0fVxuICAgICAgICAgICAgICAgICAgICA8L0FuY2hvcj5cbiAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvR3JpZEJveD5cbiAgICAgICAgICA8L0NvbHVtbj5cbiAgICAgICAgPC9MYXlvdXRHcmlkPlxuICAgICAgPC9Db2x1bW4+XG4gICAgICA8U3R5bGVkUmVzcG9uc2l2ZUNvbHVtblxuICAgICAgICBzaXplPXsxMn1cbiAgICAgICAgcD17MTZ9XG4gICAgICAgIGRpc3BsYXk9e3sgXzogJ2Jsb2NrJywgbGc6ICdub25lJyB9fVxuICAgICAgPlxuICAgICAgICA8Qm94IHRleHRBbGlnbj1cImNlbnRlclwiPlxuICAgICAgICAgIDxBbmNob3JcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJzdGFuZGFyZFwiXG4gICAgICAgICAgICBmb250U2l6ZT17MTZ9XG4gICAgICAgICAgICBmb250V2VpZ2h0PVwidGl0bGVcIlxuICAgICAgICAgICAgaHJlZj17Y2F0YWxvZ0FuY2hvckRhdGEuaHJlZn1cbiAgICAgICAgICAgIGRhdGEtZm9jdXNhYmxlY2F0YWxvZz1cInRydWVcIlxuICAgICAgICAgICAgb25DbGljaz17KGV2ZW50KSA9PiBvbkNsaWNrKGV2ZW50LCBjYXRhbG9nQW5jaG9yRGF0YSl9XG4gICAgICAgICAgICB0YWJJbmRleD17dGFiSW5kZXh9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NhdGFsb2dBbmNob3JEYXRhLnRleHR9XG4gICAgICAgICAgPC9BbmNob3I+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9TdHlsZWRSZXNwb25zaXZlQ29sdW1uPlxuICAgIDwvTGF5b3V0R3JpZEFudGlBbGlhc2VkPlxuICApO1xufSk7XG4iXX0= */");

var StyledResponsiveColumn = /*#__PURE__*/_styled(Column, {
  target: "edbfvag1",
  label: "StyledResponsiveColumn"
})(css({
  borderTop: 1,
  borderColor: 'navy-300'
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

var StyledAnchorColumn = /*#__PURE__*/_styled(Column, {
  target: "edbfvag0",
  label: "StyledAnchorColumn"
})(css({
  pb: 16,
  '&:last-child': {
    pb: 0
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

var catalogAnchorData = {
  text: 'Explore full catalog',
  id: 'catalog',
  type: 'text-button',
  href: '/catalog',
  trackingTarget: 'topnav_catalog_explore_full'
};
var gridTemplate = "'languageHeader gap subjectHeader'\n                    'language language subject'\n                    'language language subject'\n                    'language language subject'\n                    'language language subject'\n                    'language language subject'\n                    'language language subject'";
var responsiveGridTemplate = "'languageHeader'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'language'\n                            'subjectHeader'\n                            'subject'\n                            'subject'\n                            'subject'\n                            'subject'\n                            'subject'\n                            'subject'";
export var AppHeaderCatalogSection = /*#__PURE__*/React.forwardRef(function AppHeaderCatalogSection(_ref, ref) {
  var action = _ref.action,
      item = _ref.item,
      isOpen = _ref.isOpen,
      keyDownEvents = _ref.keyDownEvents,
      handleClose = _ref.handleClose;
  var tabIndex = isOpen === false ? -1 : 0;

  var _onClick = function onClick(event, linkItem) {
    handleClose === null || handleClose === void 0 ? void 0 : handleClose();
    return action(event, linkItem);
  };

  var DescriptionSection = function DescriptionSection(_ref2) {
    var title = _ref2.title,
        subtitle = _ref2.subtitle;
    return /*#__PURE__*/React.createElement(FlexBox, {
      "data-focusablecatalog": "true",
      "data-testid": "title-description-section",
      tabIndex: -1,
      flexDirection: "column"
    }, /*#__PURE__*/React.createElement(Text, {
      as: "h2",
      variant: "title-xs",
      mb: 8,
      fontWeight: 700
    }, title), /*#__PURE__*/React.createElement(Text, {
      fontSize: 14
    }, subtitle));
  };

  var Subheader = function Subheader(_ref3) {
    var title = _ref3.title;
    return /*#__PURE__*/React.createElement(Text, {
      "data-focusablecatalog": "true",
      as: "h3",
      key: item.id,
      width: "12rem",
      tabIndex: -1,
      variant: "p-small",
      color: "navy-700",
      pb: {
        _: 16,
        lg: 8
      },
      fontFamily: "accent"
    }, title);
  };

  return /*#__PURE__*/React.createElement(LayoutGridAntiAliased, {
    onKeyDown: keyDownEvents,
    ref: ref,
    as: "ul",
    p: 0
  }, !item.hideCareerPaths && /*#__PURE__*/React.createElement(StyledColumn, {
    size: 12,
    key: "Top career paths",
    as: "li"
  }, /*#__PURE__*/React.createElement(LayoutGrid, null, /*#__PURE__*/React.createElement(Column, {
    size: {
      xs: 12,
      lg: 3
    }
  }, /*#__PURE__*/React.createElement(Background, {
    bg: "navy-800",
    color: "blue-0",
    px: {
      _: 16,
      xs: 32,
      sm: 64,
      md: 48,
      lg: 40
    },
    py: {
      _: 16,
      sm: 32
    }
  }, /*#__PURE__*/React.createElement(DescriptionSection, {
    title: "Top career paths",
    subtitle: "Land a role in tech with step-by-step guidance."
  }))), /*#__PURE__*/React.createElement(Column, {
    size: {
      xs: 12,
      lg: 8
    }
  }, /*#__PURE__*/React.createElement(LayoutGrid, {
    py: 32,
    pl: {
      _: 16,
      xs: 32,
      sm: 64,
      md: 48
    }
  }, careerPaths.map(function (item) {
    return /*#__PURE__*/React.createElement(StyledAnchorColumn, {
      key: item.id,
      size: {
        _: 12,
        lg: 4
      }
    }, /*#__PURE__*/React.createElement(Anchor, {
      "data-focusablecatalog": "true",
      variant: "interface",
      href: item.href,
      onClick: function onClick(event) {
        return _onClick(event, item);
      },
      tabIndex: tabIndex
    }, item.text));
  }))))), /*#__PURE__*/React.createElement(Column, {
    size: 12,
    key: "Popular languages and subjects",
    as: "li"
  }, /*#__PURE__*/React.createElement(LayoutGrid, null, /*#__PURE__*/React.createElement(Column, {
    size: {
      xs: 12,
      lg: 3
    }
  }, /*#__PURE__*/React.createElement(Background, {
    bg: "navy-800",
    color: "blue-0",
    px: {
      _: 16,
      xs: 32,
      sm: 64,
      md: 48,
      lg: 40
    },
    py: {
      _: 16,
      sm: 32
    }
  }, /*#__PURE__*/React.createElement(DescriptionSection, {
    title: "Popular languages and subjects",
    subtitle: "Find courses in languages or subjects that interest you."
  }), /*#__PURE__*/React.createElement(Anchor, {
    display: {
      _: 'none',
      lg: 'block'
    },
    variant: "standard",
    fontSize: 14,
    fontWeight: 700,
    textAlign: {
      _: 'center',
      md: 'left'
    },
    href: catalogAnchorData.href,
    "data-focusablecatalog": "true",
    onClick: function onClick(event) {
      return _onClick(event, catalogAnchorData);
    },
    tabIndex: tabIndex,
    mt: 96,
    pt: 24
  }, catalogAnchorData.text, " \u2192"))), /*#__PURE__*/React.createElement(Column, {
    size: {
      xs: 12,
      lg: 8
    },
    py: 32,
    pl: {
      _: 16,
      xs: 32,
      sm: 64,
      md: 48
    }
  }, /*#__PURE__*/React.createElement(GridBox, {
    gridTemplateAreas: {
      _: responsiveGridTemplate,
      lg: gridTemplate
    }
  }, /*#__PURE__*/React.createElement(Box, {
    gridArea: "languageHeader"
  }, /*#__PURE__*/React.createElement(Subheader, {
    title: "Top Languages"
  })), /*#__PURE__*/React.createElement(Box, {
    gridArea: "language",
    display: "grid",
    gridTemplateColumns: {
      _: '1fr',
      lg: 'repeat(2, 1fr)'
    }
  }, topLanguages.map(function (item) {
    return /*#__PURE__*/React.createElement(Box, {
      width: "12rem",
      key: item.id,
      minHeight: 36
    }, /*#__PURE__*/React.createElement(Anchor, {
      "data-focusablecatalog": "true",
      variant: "interface",
      href: item.href,
      onClick: function onClick(event) {
        return _onClick(event, item);
      },
      tabIndex: tabIndex
    }, item.text));
  })), /*#__PURE__*/React.createElement(Box, {
    pt: {
      _: 16,
      lg: 0
    },
    gridArea: "subjectHeader"
  }, /*#__PURE__*/React.createElement(Subheader, {
    title: "Top Subjects"
  })), /*#__PURE__*/React.createElement(Box, {
    gridArea: "subject",
    display: "grid",
    gridTemplateColumns: "1fr"
  }, topSubjects.map(function (item) {
    return /*#__PURE__*/React.createElement(Box, {
      width: "12rem",
      key: item.id,
      minHeight: 36
    }, /*#__PURE__*/React.createElement(Anchor, {
      "data-focusablecatalog": "true",
      variant: "interface",
      href: item.href,
      onClick: function onClick(event) {
        return _onClick(event, item);
      },
      tabIndex: tabIndex
    }, item.text));
  })))))), /*#__PURE__*/React.createElement(StyledResponsiveColumn, {
    size: 12,
    p: 16,
    display: {
      _: 'block',
      lg: 'none'
    }
  }, /*#__PURE__*/React.createElement(Box, {
    textAlign: "center"
  }, /*#__PURE__*/React.createElement(Anchor, {
    variant: "standard",
    fontSize: 16,
    fontWeight: "title",
    href: catalogAnchorData.href,
    "data-focusablecatalog": "true",
    onClick: function onClick(event) {
      return _onClick(event, catalogAnchorData);
    },
    tabIndex: tabIndex
  }, catalogAnchorData.text))));
});