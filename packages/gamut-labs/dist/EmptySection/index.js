import _styled from "@emotion/styled/base";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { FlexBox, Text } from '@codecademy/gamut';
import { DotLoose } from '@codecademy/gamut-patterns';
import { pxRem, styledOptions, variant } from '@codecademy/gamut-styles';
import React from 'react';

var EmptyContainer = /*#__PURE__*/_styled(FlexBox, {
  target: "etfbdk12",
  label: "EmptyContainer"
})(variant({
  prop: 'stretchDirection',
  defaultVariant: 'left',
  base: {
    justifySelf: 'center',
    position: 'relative',
    px: 32,
    py: {
      _: 64,
      lg: 96
    },
    width: 1
  },
  variants: {
    left: {
      pl: {
        sm: 0
      },
      pr: {
        sm: 64,
        lg: 96
      }
    },
    right: {
      pr: {
        sm: 0
      },
      pl: {
        sm: 64,
        lg: 96
      }
    }
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FbXB0eVNlY3Rpb24vaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtDdUIiLCJmaWxlIjoiLi4vLi4vc3JjL0VtcHR5U2VjdGlvbi9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b25Qcm9wcywgRmxleEJveCwgVGV4dCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0JztcbmltcG9ydCB7IElsbHVzdHJhdGlvblByb3BzIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtaWxsdXN0cmF0aW9ucyc7XG5pbXBvcnQgeyBEb3RMb29zZSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXBhdHRlcm5zJztcbmltcG9ydCB7IHB4UmVtLCBzdHlsZWRPcHRpb25zLCB2YXJpYW50IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCB7IFN0eWxlUHJvcHMgfSBmcm9tICdAY29kZWNhZGVteS92YXJpYW5jZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEcm9wZG93bkJ1dHRvblByb3BzIH0gZnJvbSAnLi4nO1xuXG5leHBvcnQgdHlwZSBFbXB0eVNlY3Rpb25Qcm9wcyA9IHtcbiAgLyoqXG4gICAqIFBhcmFncmFwaCB0ZXh0IHRoYXQgZGlzcGxheXMgYmVuZWF0aCB0aGUgaGVhZGluZyB0ZXh0XG4gICAqL1xuICBib2R5VGV4dDogc3RyaW5nO1xuICAvKipcbiAgICogQnV0dG9uIG9yIGRyb3Bkb3duIGJ1dHRvbiB3aXRoIGFuIGFjdGlvbiBmb3IgdGhlIHVzZXIgdG8gdGFrZVxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0RWxlbWVudDxCdXR0b25Qcm9wcyB8IERyb3Bkb3duQnV0dG9uUHJvcHM+O1xuICAvKipcbiAgICogVGhlIGxhcmdlciBoZWFkaW5nIHRleHQgdGhhdCBhcHBlYXJzIG92ZXIgdGhlIGJvZHkgdGV4dFxuICAgKi9cbiAgaGVhZGluZ1RleHQ6IHN0cmluZztcbiAgaWxsdXN0cmF0aW9uOiBSZWFjdC5Db21wb25lbnRUeXBlPElsbHVzdHJhdGlvblByb3BzPjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGlsbHVzdHJhdGlvbiBhcHBlYXJzIHRvIHRoZSBsZWZ0IG9yIHJpZ2h0IG9mIHRoZSByZXN0IG9mIHRoZSBzZWN0aW9uJ3MgY29udGVudFxuICAgKi9cbiAgaWxsdXN0cmF0aW9uUG9zaXRpb24/OiAnbGVmdCcgfCAncmlnaHQnO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgcGF0dGVybiBiYWNrZ3JvdW5kIHN0cmV0Y2hlcyB0byB0aGUgZW5kIG9mIHRoZSBsZWZ0IG9yIHJpZ2h0IG9mIHRoZSB2aWV3cG9ydFxuICAgKi9cbiAgc3RyZXRjaERpcmVjdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0Jztcbn07XG5cbmNvbnN0IEVtcHR5Q29udGFpbmVyID0gc3R5bGVkKEZsZXhCb3gpKFxuICB2YXJpYW50KHtcbiAgICBwcm9wOiAnc3RyZXRjaERpcmVjdGlvbicsXG4gICAgZGVmYXVsdFZhcmlhbnQ6ICdsZWZ0JyxcbiAgICBiYXNlOiB7XG4gICAgICBqdXN0aWZ5U2VsZjogJ2NlbnRlcicsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHB4OiAzMixcbiAgICAgIHB5OiB7IF86IDY0LCBsZzogOTYgfSxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH0sXG4gICAgdmFyaWFudHM6IHtcbiAgICAgIGxlZnQ6IHtcbiAgICAgICAgcGw6IHsgc206IDAgfSxcbiAgICAgICAgcHI6IHsgc206IDY0LCBsZzogOTYgfSxcbiAgICAgIH0sXG4gICAgICByaWdodDoge1xuICAgICAgICBwcjogeyBzbTogMCB9LFxuICAgICAgICBwbDogeyBzbTogNjQsIGxnOiA5NiB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9KVxuKTtcblxuY29uc3QgRG90cyA9IHN0eWxlZChEb3RMb29zZSkoXG4gIHZhcmlhbnQoe1xuICAgIHByb3A6ICdzdHJldGNoRGlyZWN0aW9uJyxcbiAgICBkZWZhdWx0VmFyaWFudDogJ2xlZnQnLFxuICAgIGJhc2U6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogJy02cmVtJyxcbiAgICAgIHJpZ2h0OiAnLTZyZW0nLFxuICAgIH0sXG4gICAgdmFyaWFudHM6IHtcbiAgICAgIGxlZnQ6IHtcbiAgICAgICAgcmlnaHQ6IHsgc206IDAgfSxcbiAgICAgIH0sXG4gICAgICByaWdodDoge1xuICAgICAgICBsZWZ0OiB7IHNtOiAwIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pXG4pO1xuXG5jb25zdCBpbGx1c3RyYXRpb25Qb3NpdGlvblZhcmlhbnRzID0gdmFyaWFudCh7XG4gIHByb3A6ICdpbGx1c3RyYXRpb25Qb3NpdGlvbicsXG4gIGRlZmF1bHRWYXJpYW50OiAncmlnaHQnLFxuICBiYXNlOiB7XG4gICAgbXg6IHsgXzogJ2F1dG8nLCBzbTogMCB9LFxuICAgIG1iOiB7IF86IDMyLCBzbTogMCB9LFxuICB9LFxuICB2YXJpYW50czoge1xuICAgIGxlZnQ6IHtcbiAgICAgIG1yOiB7IHNtOiA0OCB9LFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIG1sOiB7IHNtOiA0OCB9LFxuICAgIH0sXG4gIH0sXG59KTtcblxudHlwZSBJbGx1c3RyYXRpb25Db250YWluZXJQcm9wcyA9IFN0eWxlUHJvcHM8XG4gIHR5cGVvZiBpbGx1c3RyYXRpb25Qb3NpdGlvblZhcmlhbnRzXG4+O1xuXG5jb25zdCBJbGx1c3RyYXRpb25Db250YWluZXIgPSBzdHlsZWQoXG4gICdkaXYnLFxuICBzdHlsZWRPcHRpb25zXG4pPElsbHVzdHJhdGlvbkNvbnRhaW5lclByb3BzPihpbGx1c3RyYXRpb25Qb3NpdGlvblZhcmlhbnRzKTtcblxuZXhwb3J0IGNvbnN0IEVtcHR5U2VjdGlvbjogUmVhY3QuRkM8RW1wdHlTZWN0aW9uUHJvcHM+ID0gKHtcbiAgYm9keVRleHQsXG4gIGNoaWxkcmVuLFxuICBoZWFkaW5nVGV4dCxcbiAgaWxsdXN0cmF0aW9uOiBJbGx1c3RyYXRpb24sXG4gIHN0cmV0Y2hEaXJlY3Rpb24sXG4gIGlsbHVzdHJhdGlvblBvc2l0aW9uID0gc3RyZXRjaERpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCcsXG59KSA9PiB7XG4gIGNvbnN0IGZsZXhEaXJlY3Rpb24gPVxuICAgIGlsbHVzdHJhdGlvblBvc2l0aW9uID09PSAncmlnaHQnID8gJ3Jvdy1yZXZlcnNlJyA6ICdyb3cnO1xuXG4gIHJldHVybiAoXG4gICAgPEVtcHR5Q29udGFpbmVyIHN0cmV0Y2hEaXJlY3Rpb249e3N0cmV0Y2hEaXJlY3Rpb259PlxuICAgICAgPERvdHMgc3RyZXRjaERpcmVjdGlvbj17c3RyZXRjaERpcmVjdGlvbn0gLz5cbiAgICAgIDxGbGV4Qm94XG4gICAgICAgIG1heFdpZHRoPVwiODIycHhcIlxuICAgICAgICBmbGV4QmFzaXM9XCIxMDAlXCJcbiAgICAgICAgcG9zaXRpb249XCJyZWxhdGl2ZVwiXG4gICAgICAgIGJnPVwiYmFja2dyb3VuZC1jdXJyZW50XCJcbiAgICAgICAgcHk9ezQ4fVxuICAgICAgICBweD17eyBfOiAxNiwgc206IDQ4LCBtZDogNjQgfX1cbiAgICAgICAgekluZGV4PXsxfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXt7IF86ICdjb2x1bW4nLCBzbTogZmxleERpcmVjdGlvbiB9fVxuICAgICAgICBqdXN0aWZ5Q29udGVudD17eyBfOiAnc3BhY2UtYXJvdW5kJywgbWQ6ICdzcGFjZS1iZXR3ZWVuJyB9fVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgdGV4dEFsaWduPXt7IF86ICdjZW50ZXInLCBzbTogJ3N0YXJ0JyB9fVxuICAgICAgPlxuICAgICAgICA8SWxsdXN0cmF0aW9uQ29udGFpbmVyIGlsbHVzdHJhdGlvblBvc2l0aW9uPXtpbGx1c3RyYXRpb25Qb3NpdGlvbn0+XG4gICAgICAgICAgPElsbHVzdHJhdGlvbiB3aWR0aD17cHhSZW0oMTAwKX0gLz5cbiAgICAgICAgPC9JbGx1c3RyYXRpb25Db250YWluZXI+XG4gICAgICAgIDxGbGV4Qm94XG4gICAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICAgICAgYWxpZ25JdGVtcz17eyBfOiAnY2VudGVyJywgc206ICdzdGFydCcgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxUZXh0IGFzPVwiaDJcIiBmb250U2l6ZT17MjJ9IG1iPXs4fT5cbiAgICAgICAgICAgIHtoZWFkaW5nVGV4dH1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPFRleHQgbWI9ezMyfT57Ym9keVRleHR9PC9UZXh0PlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9GbGV4Qm94PlxuICAgICAgPC9GbGV4Qm94PlxuICAgIDwvRW1wdHlDb250YWluZXI+XG4gICk7XG59O1xuIl19 */");

var Dots = /*#__PURE__*/_styled(DotLoose, {
  target: "etfbdk11",
  label: "Dots"
})(variant({
  prop: 'stretchDirection',
  defaultVariant: 'left',
  base: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: '-6rem',
    right: '-6rem'
  },
  variants: {
    left: {
      right: {
        sm: 0
      }
    },
    right: {
      left: {
        sm: 0
      }
    }
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FbXB0eVNlY3Rpb24vaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBEYSIsImZpbGUiOiIuLi8uLi9zcmMvRW1wdHlTZWN0aW9uL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1dHRvblByb3BzLCBGbGV4Qm94LCBUZXh0IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgSWxsdXN0cmF0aW9uUHJvcHMgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1pbGx1c3RyYXRpb25zJztcbmltcG9ydCB7IERvdExvb3NlIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtcGF0dGVybnMnO1xuaW1wb3J0IHsgcHhSZW0sIHN0eWxlZE9wdGlvbnMsIHZhcmlhbnQgfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHsgU3R5bGVQcm9wcyB9IGZyb20gJ0Bjb2RlY2FkZW15L3ZhcmlhbmNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IERyb3Bkb3duQnV0dG9uUHJvcHMgfSBmcm9tICcuLic7XG5cbmV4cG9ydCB0eXBlIEVtcHR5U2VjdGlvblByb3BzID0ge1xuICAvKipcbiAgICogUGFyYWdyYXBoIHRleHQgdGhhdCBkaXNwbGF5cyBiZW5lYXRoIHRoZSBoZWFkaW5nIHRleHRcbiAgICovXG4gIGJvZHlUZXh0OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBCdXR0b24gb3IgZHJvcGRvd24gYnV0dG9uIHdpdGggYW4gYWN0aW9uIGZvciB0aGUgdXNlciB0byB0YWtlXG4gICAqL1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3RFbGVtZW50PEJ1dHRvblByb3BzIHwgRHJvcGRvd25CdXR0b25Qcm9wcz47XG4gIC8qKlxuICAgKiBUaGUgbGFyZ2VyIGhlYWRpbmcgdGV4dCB0aGF0IGFwcGVhcnMgb3ZlciB0aGUgYm9keSB0ZXh0XG4gICAqL1xuICBoZWFkaW5nVGV4dDogc3RyaW5nO1xuICBpbGx1c3RyYXRpb246IFJlYWN0LkNvbXBvbmVudFR5cGU8SWxsdXN0cmF0aW9uUHJvcHM+O1xuICAvKipcbiAgICogV2hldGhlciB0aGUgaWxsdXN0cmF0aW9uIGFwcGVhcnMgdG8gdGhlIGxlZnQgb3IgcmlnaHQgb2YgdGhlIHJlc3Qgb2YgdGhlIHNlY3Rpb24ncyBjb250ZW50XG4gICAqL1xuICBpbGx1c3RyYXRpb25Qb3NpdGlvbj86ICdsZWZ0JyB8ICdyaWdodCc7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBwYXR0ZXJuIGJhY2tncm91bmQgc3RyZXRjaGVzIHRvIHRoZSBlbmQgb2YgdGhlIGxlZnQgb3IgcmlnaHQgb2YgdGhlIHZpZXdwb3J0XG4gICAqL1xuICBzdHJldGNoRGlyZWN0aW9uOiAnbGVmdCcgfCAncmlnaHQnO1xufTtcblxuY29uc3QgRW1wdHlDb250YWluZXIgPSBzdHlsZWQoRmxleEJveCkoXG4gIHZhcmlhbnQoe1xuICAgIHByb3A6ICdzdHJldGNoRGlyZWN0aW9uJyxcbiAgICBkZWZhdWx0VmFyaWFudDogJ2xlZnQnLFxuICAgIGJhc2U6IHtcbiAgICAgIGp1c3RpZnlTZWxmOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgcHg6IDMyLFxuICAgICAgcHk6IHsgXzogNjQsIGxnOiA5NiB9LFxuICAgICAgd2lkdGg6IDEsXG4gICAgfSxcbiAgICB2YXJpYW50czoge1xuICAgICAgbGVmdDoge1xuICAgICAgICBwbDogeyBzbTogMCB9LFxuICAgICAgICBwcjogeyBzbTogNjQsIGxnOiA5NiB9LFxuICAgICAgfSxcbiAgICAgIHJpZ2h0OiB7XG4gICAgICAgIHByOiB7IHNtOiAwIH0sXG4gICAgICAgIHBsOiB7IHNtOiA2NCwgbGc6IDk2IH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pXG4pO1xuXG5jb25zdCBEb3RzID0gc3R5bGVkKERvdExvb3NlKShcbiAgdmFyaWFudCh7XG4gICAgcHJvcDogJ3N0cmV0Y2hEaXJlY3Rpb24nLFxuICAgIGRlZmF1bHRWYXJpYW50OiAnbGVmdCcsXG4gICAgYmFzZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAnLTZyZW0nLFxuICAgICAgcmlnaHQ6ICctNnJlbScsXG4gICAgfSxcbiAgICB2YXJpYW50czoge1xuICAgICAgbGVmdDoge1xuICAgICAgICByaWdodDogeyBzbTogMCB9LFxuICAgICAgfSxcbiAgICAgIHJpZ2h0OiB7XG4gICAgICAgIGxlZnQ6IHsgc206IDAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbik7XG5cbmNvbnN0IGlsbHVzdHJhdGlvblBvc2l0aW9uVmFyaWFudHMgPSB2YXJpYW50KHtcbiAgcHJvcDogJ2lsbHVzdHJhdGlvblBvc2l0aW9uJyxcbiAgZGVmYXVsdFZhcmlhbnQ6ICdyaWdodCcsXG4gIGJhc2U6IHtcbiAgICBteDogeyBfOiAnYXV0bycsIHNtOiAwIH0sXG4gICAgbWI6IHsgXzogMzIsIHNtOiAwIH0sXG4gIH0sXG4gIHZhcmlhbnRzOiB7XG4gICAgbGVmdDoge1xuICAgICAgbXI6IHsgc206IDQ4IH0sXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgbWw6IHsgc206IDQ4IH0sXG4gICAgfSxcbiAgfSxcbn0pO1xuXG50eXBlIElsbHVzdHJhdGlvbkNvbnRhaW5lclByb3BzID0gU3R5bGVQcm9wczxcbiAgdHlwZW9mIGlsbHVzdHJhdGlvblBvc2l0aW9uVmFyaWFudHNcbj47XG5cbmNvbnN0IElsbHVzdHJhdGlvbkNvbnRhaW5lciA9IHN0eWxlZChcbiAgJ2RpdicsXG4gIHN0eWxlZE9wdGlvbnNcbik8SWxsdXN0cmF0aW9uQ29udGFpbmVyUHJvcHM+KGlsbHVzdHJhdGlvblBvc2l0aW9uVmFyaWFudHMpO1xuXG5leHBvcnQgY29uc3QgRW1wdHlTZWN0aW9uOiBSZWFjdC5GQzxFbXB0eVNlY3Rpb25Qcm9wcz4gPSAoe1xuICBib2R5VGV4dCxcbiAgY2hpbGRyZW4sXG4gIGhlYWRpbmdUZXh0LFxuICBpbGx1c3RyYXRpb246IElsbHVzdHJhdGlvbixcbiAgc3RyZXRjaERpcmVjdGlvbixcbiAgaWxsdXN0cmF0aW9uUG9zaXRpb24gPSBzdHJldGNoRGlyZWN0aW9uID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0Jyxcbn0pID0+IHtcbiAgY29uc3QgZmxleERpcmVjdGlvbiA9XG4gICAgaWxsdXN0cmF0aW9uUG9zaXRpb24gPT09ICdyaWdodCcgPyAncm93LXJldmVyc2UnIDogJ3Jvdyc7XG5cbiAgcmV0dXJuIChcbiAgICA8RW1wdHlDb250YWluZXIgc3RyZXRjaERpcmVjdGlvbj17c3RyZXRjaERpcmVjdGlvbn0+XG4gICAgICA8RG90cyBzdHJldGNoRGlyZWN0aW9uPXtzdHJldGNoRGlyZWN0aW9ufSAvPlxuICAgICAgPEZsZXhCb3hcbiAgICAgICAgbWF4V2lkdGg9XCI4MjJweFwiXG4gICAgICAgIGZsZXhCYXNpcz1cIjEwMCVcIlxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgYmc9XCJiYWNrZ3JvdW5kLWN1cnJlbnRcIlxuICAgICAgICBweT17NDh9XG4gICAgICAgIHB4PXt7IF86IDE2LCBzbTogNDgsIG1kOiA2NCB9fVxuICAgICAgICB6SW5kZXg9ezF9XG4gICAgICAgIGZsZXhEaXJlY3Rpb249e3sgXzogJ2NvbHVtbicsIHNtOiBmbGV4RGlyZWN0aW9uIH19XG4gICAgICAgIGp1c3RpZnlDb250ZW50PXt7IF86ICdzcGFjZS1hcm91bmQnLCBtZDogJ3NwYWNlLWJldHdlZW4nIH19XG4gICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICB0ZXh0QWxpZ249e3sgXzogJ2NlbnRlcicsIHNtOiAnc3RhcnQnIH19XG4gICAgICA+XG4gICAgICAgIDxJbGx1c3RyYXRpb25Db250YWluZXIgaWxsdXN0cmF0aW9uUG9zaXRpb249e2lsbHVzdHJhdGlvblBvc2l0aW9ufT5cbiAgICAgICAgICA8SWxsdXN0cmF0aW9uIHdpZHRoPXtweFJlbSgxMDApfSAvPlxuICAgICAgICA8L0lsbHVzdHJhdGlvbkNvbnRhaW5lcj5cbiAgICAgICAgPEZsZXhCb3hcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCJcbiAgICAgICAgICBhbGlnbkl0ZW1zPXt7IF86ICdjZW50ZXInLCBzbTogJ3N0YXJ0JyB9fVxuICAgICAgICA+XG4gICAgICAgICAgPFRleHQgYXM9XCJoMlwiIGZvbnRTaXplPXsyMn0gbWI9ezh9PlxuICAgICAgICAgICAge2hlYWRpbmdUZXh0fVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8VGV4dCBtYj17MzJ9Pntib2R5VGV4dH08L1RleHQ+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0ZsZXhCb3g+XG4gICAgICA8L0ZsZXhCb3g+XG4gICAgPC9FbXB0eUNvbnRhaW5lcj5cbiAgKTtcbn07XG4iXX0= */");

var illustrationPositionVariants = variant({
  prop: 'illustrationPosition',
  defaultVariant: 'right',
  base: {
    mx: {
      _: 'auto',
      sm: 0
    },
    mb: {
      _: 32,
      sm: 0
    }
  },
  variants: {
    left: {
      mr: {
        sm: 48
      }
    },
    right: {
      ml: {
        sm: 48
      }
    }
  }
});

var IllustrationContainer = /*#__PURE__*/_styled('div', _extends({}, {
  target: "etfbdk10",
  label: "IllustrationContainer"
}, styledOptions))(illustrationPositionVariants, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FbXB0eVNlY3Rpb24vaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFHOEIiLCJmaWxlIjoiLi4vLi4vc3JjL0VtcHR5U2VjdGlvbi9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdXR0b25Qcm9wcywgRmxleEJveCwgVGV4dCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0JztcbmltcG9ydCB7IElsbHVzdHJhdGlvblByb3BzIH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtaWxsdXN0cmF0aW9ucyc7XG5pbXBvcnQgeyBEb3RMb29zZSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXBhdHRlcm5zJztcbmltcG9ydCB7IHB4UmVtLCBzdHlsZWRPcHRpb25zLCB2YXJpYW50IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQtc3R5bGVzJztcbmltcG9ydCB7IFN0eWxlUHJvcHMgfSBmcm9tICdAY29kZWNhZGVteS92YXJpYW5jZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEcm9wZG93bkJ1dHRvblByb3BzIH0gZnJvbSAnLi4nO1xuXG5leHBvcnQgdHlwZSBFbXB0eVNlY3Rpb25Qcm9wcyA9IHtcbiAgLyoqXG4gICAqIFBhcmFncmFwaCB0ZXh0IHRoYXQgZGlzcGxheXMgYmVuZWF0aCB0aGUgaGVhZGluZyB0ZXh0XG4gICAqL1xuICBib2R5VGV4dDogc3RyaW5nO1xuICAvKipcbiAgICogQnV0dG9uIG9yIGRyb3Bkb3duIGJ1dHRvbiB3aXRoIGFuIGFjdGlvbiBmb3IgdGhlIHVzZXIgdG8gdGFrZVxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0RWxlbWVudDxCdXR0b25Qcm9wcyB8IERyb3Bkb3duQnV0dG9uUHJvcHM+O1xuICAvKipcbiAgICogVGhlIGxhcmdlciBoZWFkaW5nIHRleHQgdGhhdCBhcHBlYXJzIG92ZXIgdGhlIGJvZHkgdGV4dFxuICAgKi9cbiAgaGVhZGluZ1RleHQ6IHN0cmluZztcbiAgaWxsdXN0cmF0aW9uOiBSZWFjdC5Db21wb25lbnRUeXBlPElsbHVzdHJhdGlvblByb3BzPjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGlsbHVzdHJhdGlvbiBhcHBlYXJzIHRvIHRoZSBsZWZ0IG9yIHJpZ2h0IG9mIHRoZSByZXN0IG9mIHRoZSBzZWN0aW9uJ3MgY29udGVudFxuICAgKi9cbiAgaWxsdXN0cmF0aW9uUG9zaXRpb24/OiAnbGVmdCcgfCAncmlnaHQnO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgcGF0dGVybiBiYWNrZ3JvdW5kIHN0cmV0Y2hlcyB0byB0aGUgZW5kIG9mIHRoZSBsZWZ0IG9yIHJpZ2h0IG9mIHRoZSB2aWV3cG9ydFxuICAgKi9cbiAgc3RyZXRjaERpcmVjdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0Jztcbn07XG5cbmNvbnN0IEVtcHR5Q29udGFpbmVyID0gc3R5bGVkKEZsZXhCb3gpKFxuICB2YXJpYW50KHtcbiAgICBwcm9wOiAnc3RyZXRjaERpcmVjdGlvbicsXG4gICAgZGVmYXVsdFZhcmlhbnQ6ICdsZWZ0JyxcbiAgICBiYXNlOiB7XG4gICAgICBqdXN0aWZ5U2VsZjogJ2NlbnRlcicsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHB4OiAzMixcbiAgICAgIHB5OiB7IF86IDY0LCBsZzogOTYgfSxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH0sXG4gICAgdmFyaWFudHM6IHtcbiAgICAgIGxlZnQ6IHtcbiAgICAgICAgcGw6IHsgc206IDAgfSxcbiAgICAgICAgcHI6IHsgc206IDY0LCBsZzogOTYgfSxcbiAgICAgIH0sXG4gICAgICByaWdodDoge1xuICAgICAgICBwcjogeyBzbTogMCB9LFxuICAgICAgICBwbDogeyBzbTogNjQsIGxnOiA5NiB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9KVxuKTtcblxuY29uc3QgRG90cyA9IHN0eWxlZChEb3RMb29zZSkoXG4gIHZhcmlhbnQoe1xuICAgIHByb3A6ICdzdHJldGNoRGlyZWN0aW9uJyxcbiAgICBkZWZhdWx0VmFyaWFudDogJ2xlZnQnLFxuICAgIGJhc2U6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogJy02cmVtJyxcbiAgICAgIHJpZ2h0OiAnLTZyZW0nLFxuICAgIH0sXG4gICAgdmFyaWFudHM6IHtcbiAgICAgIGxlZnQ6IHtcbiAgICAgICAgcmlnaHQ6IHsgc206IDAgfSxcbiAgICAgIH0sXG4gICAgICByaWdodDoge1xuICAgICAgICBsZWZ0OiB7IHNtOiAwIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH0pXG4pO1xuXG5jb25zdCBpbGx1c3RyYXRpb25Qb3NpdGlvblZhcmlhbnRzID0gdmFyaWFudCh7XG4gIHByb3A6ICdpbGx1c3RyYXRpb25Qb3NpdGlvbicsXG4gIGRlZmF1bHRWYXJpYW50OiAncmlnaHQnLFxuICBiYXNlOiB7XG4gICAgbXg6IHsgXzogJ2F1dG8nLCBzbTogMCB9LFxuICAgIG1iOiB7IF86IDMyLCBzbTogMCB9LFxuICB9LFxuICB2YXJpYW50czoge1xuICAgIGxlZnQ6IHtcbiAgICAgIG1yOiB7IHNtOiA0OCB9LFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIG1sOiB7IHNtOiA0OCB9LFxuICAgIH0sXG4gIH0sXG59KTtcblxudHlwZSBJbGx1c3RyYXRpb25Db250YWluZXJQcm9wcyA9IFN0eWxlUHJvcHM8XG4gIHR5cGVvZiBpbGx1c3RyYXRpb25Qb3NpdGlvblZhcmlhbnRzXG4+O1xuXG5jb25zdCBJbGx1c3RyYXRpb25Db250YWluZXIgPSBzdHlsZWQoXG4gICdkaXYnLFxuICBzdHlsZWRPcHRpb25zXG4pPElsbHVzdHJhdGlvbkNvbnRhaW5lclByb3BzPihpbGx1c3RyYXRpb25Qb3NpdGlvblZhcmlhbnRzKTtcblxuZXhwb3J0IGNvbnN0IEVtcHR5U2VjdGlvbjogUmVhY3QuRkM8RW1wdHlTZWN0aW9uUHJvcHM+ID0gKHtcbiAgYm9keVRleHQsXG4gIGNoaWxkcmVuLFxuICBoZWFkaW5nVGV4dCxcbiAgaWxsdXN0cmF0aW9uOiBJbGx1c3RyYXRpb24sXG4gIHN0cmV0Y2hEaXJlY3Rpb24sXG4gIGlsbHVzdHJhdGlvblBvc2l0aW9uID0gc3RyZXRjaERpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCcsXG59KSA9PiB7XG4gIGNvbnN0IGZsZXhEaXJlY3Rpb24gPVxuICAgIGlsbHVzdHJhdGlvblBvc2l0aW9uID09PSAncmlnaHQnID8gJ3Jvdy1yZXZlcnNlJyA6ICdyb3cnO1xuXG4gIHJldHVybiAoXG4gICAgPEVtcHR5Q29udGFpbmVyIHN0cmV0Y2hEaXJlY3Rpb249e3N0cmV0Y2hEaXJlY3Rpb259PlxuICAgICAgPERvdHMgc3RyZXRjaERpcmVjdGlvbj17c3RyZXRjaERpcmVjdGlvbn0gLz5cbiAgICAgIDxGbGV4Qm94XG4gICAgICAgIG1heFdpZHRoPVwiODIycHhcIlxuICAgICAgICBmbGV4QmFzaXM9XCIxMDAlXCJcbiAgICAgICAgcG9zaXRpb249XCJyZWxhdGl2ZVwiXG4gICAgICAgIGJnPVwiYmFja2dyb3VuZC1jdXJyZW50XCJcbiAgICAgICAgcHk9ezQ4fVxuICAgICAgICBweD17eyBfOiAxNiwgc206IDQ4LCBtZDogNjQgfX1cbiAgICAgICAgekluZGV4PXsxfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXt7IF86ICdjb2x1bW4nLCBzbTogZmxleERpcmVjdGlvbiB9fVxuICAgICAgICBqdXN0aWZ5Q29udGVudD17eyBfOiAnc3BhY2UtYXJvdW5kJywgbWQ6ICdzcGFjZS1iZXR3ZWVuJyB9fVxuICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgdGV4dEFsaWduPXt7IF86ICdjZW50ZXInLCBzbTogJ3N0YXJ0JyB9fVxuICAgICAgPlxuICAgICAgICA8SWxsdXN0cmF0aW9uQ29udGFpbmVyIGlsbHVzdHJhdGlvblBvc2l0aW9uPXtpbGx1c3RyYXRpb25Qb3NpdGlvbn0+XG4gICAgICAgICAgPElsbHVzdHJhdGlvbiB3aWR0aD17cHhSZW0oMTAwKX0gLz5cbiAgICAgICAgPC9JbGx1c3RyYXRpb25Db250YWluZXI+XG4gICAgICAgIDxGbGV4Qm94XG4gICAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICAgICAgYWxpZ25JdGVtcz17eyBfOiAnY2VudGVyJywgc206ICdzdGFydCcgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxUZXh0IGFzPVwiaDJcIiBmb250U2l6ZT17MjJ9IG1iPXs4fT5cbiAgICAgICAgICAgIHtoZWFkaW5nVGV4dH1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPFRleHQgbWI9ezMyfT57Ym9keVRleHR9PC9UZXh0PlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9GbGV4Qm94PlxuICAgICAgPC9GbGV4Qm94PlxuICAgIDwvRW1wdHlDb250YWluZXI+XG4gICk7XG59O1xuIl19 */");

export var EmptySection = function EmptySection(_ref) {
  var bodyText = _ref.bodyText,
      children = _ref.children,
      headingText = _ref.headingText,
      Illustration = _ref.illustration,
      stretchDirection = _ref.stretchDirection,
      _ref$illustrationPosi = _ref.illustrationPosition,
      illustrationPosition = _ref$illustrationPosi === void 0 ? stretchDirection === 'right' ? 'left' : 'right' : _ref$illustrationPosi;
  var flexDirection = illustrationPosition === 'right' ? 'row-reverse' : 'row';
  return /*#__PURE__*/React.createElement(EmptyContainer, {
    stretchDirection: stretchDirection
  }, /*#__PURE__*/React.createElement(Dots, {
    stretchDirection: stretchDirection
  }), /*#__PURE__*/React.createElement(FlexBox, {
    maxWidth: "822px",
    flexBasis: "100%",
    position: "relative",
    bg: "background-current",
    py: 48,
    px: {
      _: 16,
      sm: 48,
      md: 64
    },
    zIndex: 1,
    flexDirection: {
      _: 'column',
      sm: flexDirection
    },
    justifyContent: {
      _: 'space-around',
      md: 'space-between'
    },
    alignItems: "center",
    textAlign: {
      _: 'center',
      sm: 'start'
    }
  }, /*#__PURE__*/React.createElement(IllustrationContainer, {
    illustrationPosition: illustrationPosition
  }, /*#__PURE__*/React.createElement(Illustration, {
    width: pxRem(100)
  })), /*#__PURE__*/React.createElement(FlexBox, {
    flexDirection: "column",
    alignItems: {
      _: 'center',
      sm: 'start'
    }
  }, /*#__PURE__*/React.createElement(Text, {
    as: "h2",
    fontSize: 22,
    mb: 8
  }, headingText), /*#__PURE__*/React.createElement(Text, {
    mb: 32
  }, bodyText), children)));
};