import _styled from "@emotion/styled/base";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

import { Anchor, Box, FloatingCard, Text } from '@codecademy/gamut';
import { modeColorProps, system } from '@codecademy/gamut-styles';
import React, { useMemo } from 'react';
import darkQuotes from '../assets/navyQuotes.svg';

var QuoteArt = _styled("img", {
  target: "e5lkuj63",
  label: "QuoteArt"
})(process.env.NODE_ENV === "production" ? {
  name: "1984sn5",
  styles: "height:25px;grid-area:art"
} : {
  name: "1984sn5",
  styles: "height:25px;grid-area:art",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTzJCIiwiZmlsZSI6Ii4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxvYXRpbmdDYXJkLCBUZXh0IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgbW9kZUNvbG9yUHJvcHMsIHN5c3RlbSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50UHJvcHMsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBkYXJrUXVvdGVzIGZyb20gJy4uL2Fzc2V0cy9uYXZ5UXVvdGVzLnN2Zyc7XG5cbmNvbnN0IFF1b3RlQXJ0ID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiAyNXB4O1xuICBncmlkLWFyZWE6IGFydDtcbmA7XG5cbmNvbnN0IFRlc3RpbW9uaWFsUGljdHVyZSA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogOThweDtcbiAgd2lkdGg6IDk4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDcwcHg7XG4gIGdyaWQtYXJlYTogYXZhdGFyO1xuYDtcbmNvbnN0IFRlc3RpbW9uaWFsQ2FyZCA9IHN0eWxlZChGbG9hdGluZ0NhcmQpKG1vZGVDb2xvclByb3BzKTtcblxuY29uc3QgZ3JpZExheW91dHMgPSB7XG4gIHZlcnRpY2FsOiBgJ2FydCBhcnQgYXJ0J1xuICAgICAgICAgICAgICd0ZXh0IHRleHQgdGV4dCdcbiAgICAgICAgICAgICAnYXZhdGFyIGJ5bGluZSBieWxpbmUnXG4gICAgICAgICAgICAgJ2F2YXRhciBieWxpbmUgYnlsaW5lJ1xuICAgICAgICAgICAgIGAsXG4gIGhvcml6b250YWw6IGAnYXZhdGFyIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgYCxcbn07XG5cbmNvbnN0IFRlc3RpbW9uaWFsQ29udGVudCA9IHN0eWxlZChCb3gpKFxuICBzeXN0ZW0udmFyaWFudCh7XG4gICAgZGVmYXVsdFZhcmlhbnQ6ICdob3Jpem9udGFsJyxcbiAgICBiYXNlOiB7XG4gICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICBjb2xvcjogJ3RleHQtYWNjZW50JyxcbiAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICdyZXBlYXQoMiwgbWlubWF4KDAsIG1heC1jb250ZW50KSkgbWlubWF4KDAsIDFmcik7JyxcbiAgICAgIGdyaWRUZW1wbGF0ZVJvd3M6ICdyZXBlYXQobWF4LWNvbnRlbnQsIDQpJyxcbiAgICAgIGdhcDogMTYsXG4gICAgfSxcbiAgICB2YXJpYW50czoge1xuICAgICAgaG9yaXpvbnRhbDoge1xuICAgICAgICBncmlkVGVtcGxhdGVBcmVhczoge1xuICAgICAgICAgIF86IGdyaWRMYXlvdXRzLnZlcnRpY2FsLFxuICAgICAgICAgIG1kOiBncmlkTGF5b3V0cy5ob3Jpem9udGFsLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHZlcnRpY2FsOiB7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUFyZWFzOiBncmlkTGF5b3V0cy52ZXJ0aWNhbCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbik7XG5cbmV4cG9ydCB0eXBlIFRlc3RpbW9uaWFsUHJvcHMgPSBDb21wb25lbnRQcm9wczx0eXBlb2YgVGVzdGltb25pYWxDYXJkPiAmXG4gIENvbXBvbmVudFByb3BzPHR5cGVvZiBUZXN0aW1vbmlhbENvbnRlbnQ+ICYge1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xuICAgIHF1b3RlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2l0eSBsb2NhdGlvblxuICAgICAqL1xuICAgIGxvY2F0aW9uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIGFzc29jaWF0ZWQgb2NjdXBhdGlvbiBvZiB0aGUgcGVyc29uLlxuICAgICAqL1xuICAgIG9jY3VwYXRpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZWQgd29ya3BsYWNlIG9yIGluc3RpdHV0aW9uXG4gICAgICovXG4gICAgY29tcGFueT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogUG9ydHJhaXQgaW1hZ2Ugc3JjXG4gICAgICovXG4gICAgaW1hZ2VVcmw/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIHNldHRpbmcgdGhpcyBocmVmIHdpbGwgd3JhcCB0aGUgdGVzdGltb25pYWwgY2FyZCB3aXRoIGFuIGFuY2hvciB0YWcuXG4gICAgICovXG4gICAgaHJlZj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjb25kaXRvbmFsbHkgaGlkZSB0aGUgcG9ydHJhaXQgcGhvdG9cbiAgICAgKi9cbiAgICBoaWRlUGhvdG8/OiBib29sZWFuO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICB9O1xuXG5leHBvcnQgY29uc3QgVGVzdGltb25pYWw6IFJlYWN0LkZDPFRlc3RpbW9uaWFsUHJvcHM+ID0gKHtcbiAgZmlyc3ROYW1lLFxuICBsYXN0TmFtZSxcbiAgY29tcGFueSxcbiAgb2NjdXBhdGlvbixcbiAgbG9jYXRpb24sXG4gIGhyZWYsXG4gIHF1b3RlLFxuICBvbkNsaWNrLFxuICBoaWRlUGhvdG8sXG4gIGltYWdlVXJsLFxuICB2YXJpYW50LFxuICBtb2RlLFxuICAuLi5yZXN0XG59KSA9PiB7XG4gIGNvbnN0IGlzVmVydGljbGVMYXlvdXQgPSB2YXJpYW50ID09PSAndmVydGljYWwnO1xuXG4gIGNvbnN0IGJvdHRvbVRleHQ6IHN0cmluZyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChjb21wYW55ICYmIGxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fSwgJHtsb2NhdGlvbn1gO1xuICAgIGlmICghY29tcGFueSAmJiBsb2NhdGlvbikgcmV0dXJuIGAke2xvY2F0aW9ufWA7XG4gICAgaWYgKGNvbXBhbnkgJiYgIWxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fWA7XG4gICAgcmV0dXJuICcnO1xuICB9LCBbY29tcGFueSwgbG9jYXRpb25dKTtcblxuICBjb25zdCBhcmlhTGFiZWwgPSBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWV9ICR7Ym90dG9tVGV4dH0uICR7cXVvdGV9YDtcblxuICBjb25zdCByZW5kZXJUZXN0aW1vbmlhbCA9ICgpID0+IChcbiAgICA8VGVzdGltb25pYWxDYXJkIHsuLi5yZXN0fSBwPXszMn0gd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIG1vZGU9e21vZGV9PlxuICAgICAgPFRlc3RpbW9uaWFsQ29udGVudCB2YXJpYW50PXt2YXJpYW50fT5cbiAgICAgICAgeyFoaWRlUGhvdG8gJiYgaW1hZ2VVcmwgJiYgKFxuICAgICAgICAgIDxUZXN0aW1vbmlhbFBpY3R1cmVcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwidGVzdGltb25pYWwtcGhvdG9cIlxuICAgICAgICAgICAgc3JjPXtpbWFnZVVybH1cbiAgICAgICAgICAgIGFsdD1cInRlc3RpbW9uaWFsXCJcbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8Qm94XG4gICAgICAgICAgbXk9e3sgXzogJ2F1dG8nLCBtZDogaXNWZXJ0aWNsZUxheW91dCAmJiAhaGlkZVBob3RvID8gJ2F1dG8nIDogMCB9fVxuICAgICAgICAgIG1yPXszMn1cbiAgICAgICAgICBncmlkQXJlYT17IWhpZGVQaG90byA/ICdieWxpbmUnIDogJ2F2YXRhcid9XG4gICAgICAgID5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtsYXN0TmFtZSA/IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZVswXX0uYCA6IGAke2ZpcnN0TmFtZX1gfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtvY2N1cGF0aW9ufVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICB7ISFib3R0b21UZXh0ICYmIChcbiAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAgICB7Ym90dG9tVGV4dH1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICApfVxuICAgICAgICA8L0JveD5cbiAgICAgICAgPFF1b3RlQXJ0IGFsdD1cIlwiIHNyYz17ZGFya1F1b3Rlc30gLz5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBwdD17eyBfOiAwLCBtZDogaXNWZXJ0aWNsZUxheW91dCA/IDAgOiA0IH19XG4gICAgICAgICAgcHI9e3sgXzogMTYsIHNtOiAwIH19XG4gICAgICAgICAgZ3JpZEFyZWE9XCJ0ZXh0XCJcbiAgICAgICAgICB2YXJpYW50PVwidGl0bGUtbWRcIlxuICAgICAgICAgIGFzPVwicFwiXG4gICAgICAgID5cbiAgICAgICAgICB7cXVvdGV9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvVGVzdGltb25pYWxDb250ZW50PlxuICAgIDwvVGVzdGltb25pYWxDYXJkPlxuICApO1xuXG4gIGNvbnN0IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvciA9ICgpID0+IChcbiAgICA8QW5jaG9yXG4gICAgICBkaXNwbGF5PXtyZXN0LmRpc3BsYXl9XG4gICAgICBkYXRhLXRlc3RpZD1cInRlc3RpbW9uaWFsLWxpbmtcIlxuICAgICAgaHJlZj17aHJlZn1cbiAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICA+XG4gICAgICB7cmVuZGVyVGVzdGltb25pYWwoKX1cbiAgICA8L0FuY2hvcj5cbiAgKTtcblxuICByZXR1cm4gaHJlZiA/IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvcigpIDogcmVuZGVyVGVzdGltb25pYWwoKTtcbn07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var TestimonialPicture = _styled("img", {
  target: "e5lkuj62",
  label: "TestimonialPicture"
})(process.env.NODE_ENV === "production" ? {
  name: "1eyisw3",
  styles: "height:98px;width:98px;border-radius:70px;grid-area:avatar"
} : {
  name: "1eyisw3",
  styles: "height:98px;width:98px;border-radius:70px;grid-area:avatar",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWXFDIiwiZmlsZSI6Ii4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxvYXRpbmdDYXJkLCBUZXh0IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgbW9kZUNvbG9yUHJvcHMsIHN5c3RlbSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50UHJvcHMsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBkYXJrUXVvdGVzIGZyb20gJy4uL2Fzc2V0cy9uYXZ5UXVvdGVzLnN2Zyc7XG5cbmNvbnN0IFF1b3RlQXJ0ID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiAyNXB4O1xuICBncmlkLWFyZWE6IGFydDtcbmA7XG5cbmNvbnN0IFRlc3RpbW9uaWFsUGljdHVyZSA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogOThweDtcbiAgd2lkdGg6IDk4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDcwcHg7XG4gIGdyaWQtYXJlYTogYXZhdGFyO1xuYDtcbmNvbnN0IFRlc3RpbW9uaWFsQ2FyZCA9IHN0eWxlZChGbG9hdGluZ0NhcmQpKG1vZGVDb2xvclByb3BzKTtcblxuY29uc3QgZ3JpZExheW91dHMgPSB7XG4gIHZlcnRpY2FsOiBgJ2FydCBhcnQgYXJ0J1xuICAgICAgICAgICAgICd0ZXh0IHRleHQgdGV4dCdcbiAgICAgICAgICAgICAnYXZhdGFyIGJ5bGluZSBieWxpbmUnXG4gICAgICAgICAgICAgJ2F2YXRhciBieWxpbmUgYnlsaW5lJ1xuICAgICAgICAgICAgIGAsXG4gIGhvcml6b250YWw6IGAnYXZhdGFyIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgYCxcbn07XG5cbmNvbnN0IFRlc3RpbW9uaWFsQ29udGVudCA9IHN0eWxlZChCb3gpKFxuICBzeXN0ZW0udmFyaWFudCh7XG4gICAgZGVmYXVsdFZhcmlhbnQ6ICdob3Jpem9udGFsJyxcbiAgICBiYXNlOiB7XG4gICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICBjb2xvcjogJ3RleHQtYWNjZW50JyxcbiAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICdyZXBlYXQoMiwgbWlubWF4KDAsIG1heC1jb250ZW50KSkgbWlubWF4KDAsIDFmcik7JyxcbiAgICAgIGdyaWRUZW1wbGF0ZVJvd3M6ICdyZXBlYXQobWF4LWNvbnRlbnQsIDQpJyxcbiAgICAgIGdhcDogMTYsXG4gICAgfSxcbiAgICB2YXJpYW50czoge1xuICAgICAgaG9yaXpvbnRhbDoge1xuICAgICAgICBncmlkVGVtcGxhdGVBcmVhczoge1xuICAgICAgICAgIF86IGdyaWRMYXlvdXRzLnZlcnRpY2FsLFxuICAgICAgICAgIG1kOiBncmlkTGF5b3V0cy5ob3Jpem9udGFsLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHZlcnRpY2FsOiB7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUFyZWFzOiBncmlkTGF5b3V0cy52ZXJ0aWNhbCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbik7XG5cbmV4cG9ydCB0eXBlIFRlc3RpbW9uaWFsUHJvcHMgPSBDb21wb25lbnRQcm9wczx0eXBlb2YgVGVzdGltb25pYWxDYXJkPiAmXG4gIENvbXBvbmVudFByb3BzPHR5cGVvZiBUZXN0aW1vbmlhbENvbnRlbnQ+ICYge1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xuICAgIHF1b3RlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2l0eSBsb2NhdGlvblxuICAgICAqL1xuICAgIGxvY2F0aW9uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIGFzc29jaWF0ZWQgb2NjdXBhdGlvbiBvZiB0aGUgcGVyc29uLlxuICAgICAqL1xuICAgIG9jY3VwYXRpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZWQgd29ya3BsYWNlIG9yIGluc3RpdHV0aW9uXG4gICAgICovXG4gICAgY29tcGFueT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogUG9ydHJhaXQgaW1hZ2Ugc3JjXG4gICAgICovXG4gICAgaW1hZ2VVcmw/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIHNldHRpbmcgdGhpcyBocmVmIHdpbGwgd3JhcCB0aGUgdGVzdGltb25pYWwgY2FyZCB3aXRoIGFuIGFuY2hvciB0YWcuXG4gICAgICovXG4gICAgaHJlZj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjb25kaXRvbmFsbHkgaGlkZSB0aGUgcG9ydHJhaXQgcGhvdG9cbiAgICAgKi9cbiAgICBoaWRlUGhvdG8/OiBib29sZWFuO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICB9O1xuXG5leHBvcnQgY29uc3QgVGVzdGltb25pYWw6IFJlYWN0LkZDPFRlc3RpbW9uaWFsUHJvcHM+ID0gKHtcbiAgZmlyc3ROYW1lLFxuICBsYXN0TmFtZSxcbiAgY29tcGFueSxcbiAgb2NjdXBhdGlvbixcbiAgbG9jYXRpb24sXG4gIGhyZWYsXG4gIHF1b3RlLFxuICBvbkNsaWNrLFxuICBoaWRlUGhvdG8sXG4gIGltYWdlVXJsLFxuICB2YXJpYW50LFxuICBtb2RlLFxuICAuLi5yZXN0XG59KSA9PiB7XG4gIGNvbnN0IGlzVmVydGljbGVMYXlvdXQgPSB2YXJpYW50ID09PSAndmVydGljYWwnO1xuXG4gIGNvbnN0IGJvdHRvbVRleHQ6IHN0cmluZyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChjb21wYW55ICYmIGxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fSwgJHtsb2NhdGlvbn1gO1xuICAgIGlmICghY29tcGFueSAmJiBsb2NhdGlvbikgcmV0dXJuIGAke2xvY2F0aW9ufWA7XG4gICAgaWYgKGNvbXBhbnkgJiYgIWxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fWA7XG4gICAgcmV0dXJuICcnO1xuICB9LCBbY29tcGFueSwgbG9jYXRpb25dKTtcblxuICBjb25zdCBhcmlhTGFiZWwgPSBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWV9ICR7Ym90dG9tVGV4dH0uICR7cXVvdGV9YDtcblxuICBjb25zdCByZW5kZXJUZXN0aW1vbmlhbCA9ICgpID0+IChcbiAgICA8VGVzdGltb25pYWxDYXJkIHsuLi5yZXN0fSBwPXszMn0gd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIG1vZGU9e21vZGV9PlxuICAgICAgPFRlc3RpbW9uaWFsQ29udGVudCB2YXJpYW50PXt2YXJpYW50fT5cbiAgICAgICAgeyFoaWRlUGhvdG8gJiYgaW1hZ2VVcmwgJiYgKFxuICAgICAgICAgIDxUZXN0aW1vbmlhbFBpY3R1cmVcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwidGVzdGltb25pYWwtcGhvdG9cIlxuICAgICAgICAgICAgc3JjPXtpbWFnZVVybH1cbiAgICAgICAgICAgIGFsdD1cInRlc3RpbW9uaWFsXCJcbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8Qm94XG4gICAgICAgICAgbXk9e3sgXzogJ2F1dG8nLCBtZDogaXNWZXJ0aWNsZUxheW91dCAmJiAhaGlkZVBob3RvID8gJ2F1dG8nIDogMCB9fVxuICAgICAgICAgIG1yPXszMn1cbiAgICAgICAgICBncmlkQXJlYT17IWhpZGVQaG90byA/ICdieWxpbmUnIDogJ2F2YXRhcid9XG4gICAgICAgID5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtsYXN0TmFtZSA/IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZVswXX0uYCA6IGAke2ZpcnN0TmFtZX1gfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtvY2N1cGF0aW9ufVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICB7ISFib3R0b21UZXh0ICYmIChcbiAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAgICB7Ym90dG9tVGV4dH1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICApfVxuICAgICAgICA8L0JveD5cbiAgICAgICAgPFF1b3RlQXJ0IGFsdD1cIlwiIHNyYz17ZGFya1F1b3Rlc30gLz5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBwdD17eyBfOiAwLCBtZDogaXNWZXJ0aWNsZUxheW91dCA/IDAgOiA0IH19XG4gICAgICAgICAgcHI9e3sgXzogMTYsIHNtOiAwIH19XG4gICAgICAgICAgZ3JpZEFyZWE9XCJ0ZXh0XCJcbiAgICAgICAgICB2YXJpYW50PVwidGl0bGUtbWRcIlxuICAgICAgICAgIGFzPVwicFwiXG4gICAgICAgID5cbiAgICAgICAgICB7cXVvdGV9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvVGVzdGltb25pYWxDb250ZW50PlxuICAgIDwvVGVzdGltb25pYWxDYXJkPlxuICApO1xuXG4gIGNvbnN0IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvciA9ICgpID0+IChcbiAgICA8QW5jaG9yXG4gICAgICBkaXNwbGF5PXtyZXN0LmRpc3BsYXl9XG4gICAgICBkYXRhLXRlc3RpZD1cInRlc3RpbW9uaWFsLWxpbmtcIlxuICAgICAgaHJlZj17aHJlZn1cbiAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICA+XG4gICAgICB7cmVuZGVyVGVzdGltb25pYWwoKX1cbiAgICA8L0FuY2hvcj5cbiAgKTtcblxuICByZXR1cm4gaHJlZiA/IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvcigpIDogcmVuZGVyVGVzdGltb25pYWwoKTtcbn07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var TestimonialCard = /*#__PURE__*/_styled(FloatingCard, {
  target: "e5lkuj61",
  label: "TestimonialCard"
})(modeColorProps, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0J3QiIsImZpbGUiOiIuLi8uLi9zcmMvVGVzdGltb25pYWwvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5jaG9yLCBCb3gsIEZsb2F0aW5nQ2FyZCwgVGV4dCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0JztcbmltcG9ydCB7IG1vZGVDb2xvclByb3BzLCBzeXN0ZW0gfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudFByb3BzLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgZGFya1F1b3RlcyBmcm9tICcuLi9hc3NldHMvbmF2eVF1b3Rlcy5zdmcnO1xuXG5jb25zdCBRdW90ZUFydCA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogMjVweDtcbiAgZ3JpZC1hcmVhOiBhcnQ7XG5gO1xuXG5jb25zdCBUZXN0aW1vbmlhbFBpY3R1cmUgPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDk4cHg7XG4gIHdpZHRoOiA5OHB4O1xuICBib3JkZXItcmFkaXVzOiA3MHB4O1xuICBncmlkLWFyZWE6IGF2YXRhcjtcbmA7XG5jb25zdCBUZXN0aW1vbmlhbENhcmQgPSBzdHlsZWQoRmxvYXRpbmdDYXJkKShtb2RlQ29sb3JQcm9wcyk7XG5cbmNvbnN0IGdyaWRMYXlvdXRzID0ge1xuICB2ZXJ0aWNhbDogYCdhcnQgYXJ0IGFydCdcbiAgICAgICAgICAgICAndGV4dCB0ZXh0IHRleHQnXG4gICAgICAgICAgICAgJ2F2YXRhciBieWxpbmUgYnlsaW5lJ1xuICAgICAgICAgICAgICdhdmF0YXIgYnlsaW5lIGJ5bGluZSdcbiAgICAgICAgICAgICBgLFxuICBob3Jpem9udGFsOiBgJ2F2YXRhciBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgIGAsXG59O1xuXG5jb25zdCBUZXN0aW1vbmlhbENvbnRlbnQgPSBzdHlsZWQoQm94KShcbiAgc3lzdGVtLnZhcmlhbnQoe1xuICAgIGRlZmF1bHRWYXJpYW50OiAnaG9yaXpvbnRhbCcsXG4gICAgYmFzZToge1xuICAgICAgZGlzcGxheTogJ2dyaWQnLFxuICAgICAgY29sb3I6ICd0ZXh0LWFjY2VudCcsXG4gICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiAncmVwZWF0KDIsIG1pbm1heCgwLCBtYXgtY29udGVudCkpIG1pbm1heCgwLCAxZnIpOycsXG4gICAgICBncmlkVGVtcGxhdGVSb3dzOiAncmVwZWF0KG1heC1jb250ZW50LCA0KScsXG4gICAgICBnYXA6IDE2LFxuICAgIH0sXG4gICAgdmFyaWFudHM6IHtcbiAgICAgIGhvcml6b250YWw6IHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQXJlYXM6IHtcbiAgICAgICAgICBfOiBncmlkTGF5b3V0cy52ZXJ0aWNhbCxcbiAgICAgICAgICBtZDogZ3JpZExheW91dHMuaG9yaXpvbnRhbCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB2ZXJ0aWNhbDoge1xuICAgICAgICBncmlkVGVtcGxhdGVBcmVhczogZ3JpZExheW91dHMudmVydGljYWwsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pXG4pO1xuXG5leHBvcnQgdHlwZSBUZXN0aW1vbmlhbFByb3BzID0gQ29tcG9uZW50UHJvcHM8dHlwZW9mIFRlc3RpbW9uaWFsQ2FyZD4gJlxuICBDb21wb25lbnRQcm9wczx0eXBlb2YgVGVzdGltb25pYWxDb250ZW50PiAmIHtcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcbiAgICBsYXN0TmFtZT86IHN0cmluZztcbiAgICBxdW90ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENpdHkgbG9jYXRpb25cbiAgICAgKi9cbiAgICBsb2NhdGlvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBhc3NvY2lhdGVkIG9jY3VwYXRpb24gb2YgdGhlIHBlcnNvbi5cbiAgICAgKi9cbiAgICBvY2N1cGF0aW9uPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBBc3NvY2lhdGVkIHdvcmtwbGFjZSBvciBpbnN0aXR1dGlvblxuICAgICAqL1xuICAgIGNvbXBhbnk/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFBvcnRyYWl0IGltYWdlIHNyY1xuICAgICAqL1xuICAgIGltYWdlVXJsPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBzZXR0aW5nIHRoaXMgaHJlZiB3aWxsIHdyYXAgdGhlIHRlc3RpbW9uaWFsIGNhcmQgd2l0aCBhbiBhbmNob3IgdGFnLlxuICAgICAqL1xuICAgIGhyZWY/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gY29uZGl0b25hbGx5IGhpZGUgdGhlIHBvcnRyYWl0IHBob3RvXG4gICAgICovXG4gICAgaGlkZVBob3RvPzogYm9vbGVhbjtcbiAgICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IFRlc3RpbW9uaWFsOiBSZWFjdC5GQzxUZXN0aW1vbmlhbFByb3BzPiA9ICh7XG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIGNvbXBhbnksXG4gIG9jY3VwYXRpb24sXG4gIGxvY2F0aW9uLFxuICBocmVmLFxuICBxdW90ZSxcbiAgb25DbGljayxcbiAgaGlkZVBob3RvLFxuICBpbWFnZVVybCxcbiAgdmFyaWFudCxcbiAgbW9kZSxcbiAgLi4ucmVzdFxufSkgPT4ge1xuICBjb25zdCBpc1ZlcnRpY2xlTGF5b3V0ID0gdmFyaWFudCA9PT0gJ3ZlcnRpY2FsJztcblxuICBjb25zdCBib3R0b21UZXh0OiBzdHJpbmcgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoY29tcGFueSAmJiBsb2NhdGlvbikgcmV0dXJuIGBAICR7Y29tcGFueX0sICR7bG9jYXRpb259YDtcbiAgICBpZiAoIWNvbXBhbnkgJiYgbG9jYXRpb24pIHJldHVybiBgJHtsb2NhdGlvbn1gO1xuICAgIGlmIChjb21wYW55ICYmICFsb2NhdGlvbikgcmV0dXJuIGBAICR7Y29tcGFueX1gO1xuICAgIHJldHVybiAnJztcbiAgfSwgW2NvbXBhbnksIGxvY2F0aW9uXSk7XG5cbiAgY29uc3QgYXJpYUxhYmVsID0gYCR7Zmlyc3ROYW1lfSAke2xhc3ROYW1lfSAke2JvdHRvbVRleHR9LiAke3F1b3RlfWA7XG5cbiAgY29uc3QgcmVuZGVyVGVzdGltb25pYWwgPSAoKSA9PiAoXG4gICAgPFRlc3RpbW9uaWFsQ2FyZCB7Li4ucmVzdH0gcD17MzJ9IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBtb2RlPXttb2RlfT5cbiAgICAgIDxUZXN0aW1vbmlhbENvbnRlbnQgdmFyaWFudD17dmFyaWFudH0+XG4gICAgICAgIHshaGlkZVBob3RvICYmIGltYWdlVXJsICYmIChcbiAgICAgICAgICA8VGVzdGltb25pYWxQaWN0dXJlXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cInRlc3RpbW9uaWFsLXBob3RvXCJcbiAgICAgICAgICAgIHNyYz17aW1hZ2VVcmx9XG4gICAgICAgICAgICBhbHQ9XCJ0ZXN0aW1vbmlhbFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPEJveFxuICAgICAgICAgIG15PXt7IF86ICdhdXRvJywgbWQ6IGlzVmVydGljbGVMYXlvdXQgJiYgIWhpZGVQaG90byA/ICdhdXRvJyA6IDAgfX1cbiAgICAgICAgICBtcj17MzJ9XG4gICAgICAgICAgZ3JpZEFyZWE9eyFoaWRlUGhvdG8gPyAnYnlsaW5lJyA6ICdhdmF0YXInfVxuICAgICAgICA+XG4gICAgICAgICAgPFRleHQgdmFyaWFudD1cInAtc21hbGxcIiBhcz1cInBcIiBmb250RmFtaWx5PVwiYWNjZW50XCI+XG4gICAgICAgICAgICB7bGFzdE5hbWUgPyBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWVbMF19LmAgOiBgJHtmaXJzdE5hbWV9YH1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPFRleHQgdmFyaWFudD1cInAtc21hbGxcIiBhcz1cInBcIiBmb250RmFtaWx5PVwiYWNjZW50XCI+XG4gICAgICAgICAgICB7b2NjdXBhdGlvbn1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgeyEhYm90dG9tVGV4dCAmJiAoXG4gICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgICAge2JvdHRvbVRleHR9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxRdW90ZUFydCBhbHQ9XCJcIiBzcmM9e2RhcmtRdW90ZXN9IC8+XG4gICAgICAgIDxUZXh0XG4gICAgICAgICAgcHQ9e3sgXzogMCwgbWQ6IGlzVmVydGljbGVMYXlvdXQgPyAwIDogNCB9fVxuICAgICAgICAgIHByPXt7IF86IDE2LCBzbTogMCB9fVxuICAgICAgICAgIGdyaWRBcmVhPVwidGV4dFwiXG4gICAgICAgICAgdmFyaWFudD1cInRpdGxlLW1kXCJcbiAgICAgICAgICBhcz1cInBcIlxuICAgICAgICA+XG4gICAgICAgICAge3F1b3RlfVxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L1Rlc3RpbW9uaWFsQ29udGVudD5cbiAgICA8L1Rlc3RpbW9uaWFsQ2FyZD5cbiAgKTtcblxuICBjb25zdCByZW5kZXJUZXN0aW1vbmlhbFdpdGhBbmNob3IgPSAoKSA9PiAoXG4gICAgPEFuY2hvclxuICAgICAgZGlzcGxheT17cmVzdC5kaXNwbGF5fVxuICAgICAgZGF0YS10ZXN0aWQ9XCJ0ZXN0aW1vbmlhbC1saW5rXCJcbiAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICB2YXJpYW50PVwiaW50ZXJmYWNlXCJcbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWx9XG4gICAgPlxuICAgICAge3JlbmRlclRlc3RpbW9uaWFsKCl9XG4gICAgPC9BbmNob3I+XG4gICk7XG5cbiAgcmV0dXJuIGhyZWYgPyByZW5kZXJUZXN0aW1vbmlhbFdpdGhBbmNob3IoKSA6IHJlbmRlclRlc3RpbW9uaWFsKCk7XG59O1xuIl19 */");

var gridLayouts = {
  vertical: "'art art art'\n             'text text text'\n             'avatar byline byline'\n             'avatar byline byline'\n             ",
  horizontal: "'avatar art text'\n               'byline art text'\n               'byline art text'\n               'byline art text'\n               "
};

var TestimonialContent = /*#__PURE__*/_styled(Box, {
  target: "e5lkuj60",
  label: "TestimonialContent"
})(system.variant({
  defaultVariant: 'horizontal',
  base: {
    display: 'grid',
    color: 'text-accent',
    gridTemplateColumns: 'repeat(2, minmax(0, max-content)) minmax(0, 1fr);',
    gridTemplateRows: 'repeat(max-content, 4)',
    gap: 16
  },
  variants: {
    horizontal: {
      gridTemplateAreas: {
        _: gridLayouts.vertical,
        md: gridLayouts.horizontal
      }
    },
    vertical: {
      gridTemplateAreas: gridLayouts.vertical
    }
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUMyQiIsImZpbGUiOiIuLi8uLi9zcmMvVGVzdGltb25pYWwvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5jaG9yLCBCb3gsIEZsb2F0aW5nQ2FyZCwgVGV4dCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0JztcbmltcG9ydCB7IG1vZGVDb2xvclByb3BzLCBzeXN0ZW0gfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudFByb3BzLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgZGFya1F1b3RlcyBmcm9tICcuLi9hc3NldHMvbmF2eVF1b3Rlcy5zdmcnO1xuXG5jb25zdCBRdW90ZUFydCA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogMjVweDtcbiAgZ3JpZC1hcmVhOiBhcnQ7XG5gO1xuXG5jb25zdCBUZXN0aW1vbmlhbFBpY3R1cmUgPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDk4cHg7XG4gIHdpZHRoOiA5OHB4O1xuICBib3JkZXItcmFkaXVzOiA3MHB4O1xuICBncmlkLWFyZWE6IGF2YXRhcjtcbmA7XG5jb25zdCBUZXN0aW1vbmlhbENhcmQgPSBzdHlsZWQoRmxvYXRpbmdDYXJkKShtb2RlQ29sb3JQcm9wcyk7XG5cbmNvbnN0IGdyaWRMYXlvdXRzID0ge1xuICB2ZXJ0aWNhbDogYCdhcnQgYXJ0IGFydCdcbiAgICAgICAgICAgICAndGV4dCB0ZXh0IHRleHQnXG4gICAgICAgICAgICAgJ2F2YXRhciBieWxpbmUgYnlsaW5lJ1xuICAgICAgICAgICAgICdhdmF0YXIgYnlsaW5lIGJ5bGluZSdcbiAgICAgICAgICAgICBgLFxuICBob3Jpem9udGFsOiBgJ2F2YXRhciBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgIGAsXG59O1xuXG5jb25zdCBUZXN0aW1vbmlhbENvbnRlbnQgPSBzdHlsZWQoQm94KShcbiAgc3lzdGVtLnZhcmlhbnQoe1xuICAgIGRlZmF1bHRWYXJpYW50OiAnaG9yaXpvbnRhbCcsXG4gICAgYmFzZToge1xuICAgICAgZGlzcGxheTogJ2dyaWQnLFxuICAgICAgY29sb3I6ICd0ZXh0LWFjY2VudCcsXG4gICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiAncmVwZWF0KDIsIG1pbm1heCgwLCBtYXgtY29udGVudCkpIG1pbm1heCgwLCAxZnIpOycsXG4gICAgICBncmlkVGVtcGxhdGVSb3dzOiAncmVwZWF0KG1heC1jb250ZW50LCA0KScsXG4gICAgICBnYXA6IDE2LFxuICAgIH0sXG4gICAgdmFyaWFudHM6IHtcbiAgICAgIGhvcml6b250YWw6IHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQXJlYXM6IHtcbiAgICAgICAgICBfOiBncmlkTGF5b3V0cy52ZXJ0aWNhbCxcbiAgICAgICAgICBtZDogZ3JpZExheW91dHMuaG9yaXpvbnRhbCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB2ZXJ0aWNhbDoge1xuICAgICAgICBncmlkVGVtcGxhdGVBcmVhczogZ3JpZExheW91dHMudmVydGljYWwsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pXG4pO1xuXG5leHBvcnQgdHlwZSBUZXN0aW1vbmlhbFByb3BzID0gQ29tcG9uZW50UHJvcHM8dHlwZW9mIFRlc3RpbW9uaWFsQ2FyZD4gJlxuICBDb21wb25lbnRQcm9wczx0eXBlb2YgVGVzdGltb25pYWxDb250ZW50PiAmIHtcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcbiAgICBsYXN0TmFtZT86IHN0cmluZztcbiAgICBxdW90ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIENpdHkgbG9jYXRpb25cbiAgICAgKi9cbiAgICBsb2NhdGlvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBhc3NvY2lhdGVkIG9jY3VwYXRpb24gb2YgdGhlIHBlcnNvbi5cbiAgICAgKi9cbiAgICBvY2N1cGF0aW9uPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBBc3NvY2lhdGVkIHdvcmtwbGFjZSBvciBpbnN0aXR1dGlvblxuICAgICAqL1xuICAgIGNvbXBhbnk/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIFBvcnRyYWl0IGltYWdlIHNyY1xuICAgICAqL1xuICAgIGltYWdlVXJsPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBzZXR0aW5nIHRoaXMgaHJlZiB3aWxsIHdyYXAgdGhlIHRlc3RpbW9uaWFsIGNhcmQgd2l0aCBhbiBhbmNob3IgdGFnLlxuICAgICAqL1xuICAgIGhyZWY/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIHVzZWQgdG8gY29uZGl0b25hbGx5IGhpZGUgdGhlIHBvcnRyYWl0IHBob3RvXG4gICAgICovXG4gICAgaGlkZVBob3RvPzogYm9vbGVhbjtcbiAgICBvbkNsaWNrPzogKCkgPT4gdm9pZDtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IFRlc3RpbW9uaWFsOiBSZWFjdC5GQzxUZXN0aW1vbmlhbFByb3BzPiA9ICh7XG4gIGZpcnN0TmFtZSxcbiAgbGFzdE5hbWUsXG4gIGNvbXBhbnksXG4gIG9jY3VwYXRpb24sXG4gIGxvY2F0aW9uLFxuICBocmVmLFxuICBxdW90ZSxcbiAgb25DbGljayxcbiAgaGlkZVBob3RvLFxuICBpbWFnZVVybCxcbiAgdmFyaWFudCxcbiAgbW9kZSxcbiAgLi4ucmVzdFxufSkgPT4ge1xuICBjb25zdCBpc1ZlcnRpY2xlTGF5b3V0ID0gdmFyaWFudCA9PT0gJ3ZlcnRpY2FsJztcblxuICBjb25zdCBib3R0b21UZXh0OiBzdHJpbmcgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoY29tcGFueSAmJiBsb2NhdGlvbikgcmV0dXJuIGBAICR7Y29tcGFueX0sICR7bG9jYXRpb259YDtcbiAgICBpZiAoIWNvbXBhbnkgJiYgbG9jYXRpb24pIHJldHVybiBgJHtsb2NhdGlvbn1gO1xuICAgIGlmIChjb21wYW55ICYmICFsb2NhdGlvbikgcmV0dXJuIGBAICR7Y29tcGFueX1gO1xuICAgIHJldHVybiAnJztcbiAgfSwgW2NvbXBhbnksIGxvY2F0aW9uXSk7XG5cbiAgY29uc3QgYXJpYUxhYmVsID0gYCR7Zmlyc3ROYW1lfSAke2xhc3ROYW1lfSAke2JvdHRvbVRleHR9LiAke3F1b3RlfWA7XG5cbiAgY29uc3QgcmVuZGVyVGVzdGltb25pYWwgPSAoKSA9PiAoXG4gICAgPFRlc3RpbW9uaWFsQ2FyZCB7Li4ucmVzdH0gcD17MzJ9IHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBtb2RlPXttb2RlfT5cbiAgICAgIDxUZXN0aW1vbmlhbENvbnRlbnQgdmFyaWFudD17dmFyaWFudH0+XG4gICAgICAgIHshaGlkZVBob3RvICYmIGltYWdlVXJsICYmIChcbiAgICAgICAgICA8VGVzdGltb25pYWxQaWN0dXJlXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cInRlc3RpbW9uaWFsLXBob3RvXCJcbiAgICAgICAgICAgIHNyYz17aW1hZ2VVcmx9XG4gICAgICAgICAgICBhbHQ9XCJ0ZXN0aW1vbmlhbFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPEJveFxuICAgICAgICAgIG15PXt7IF86ICdhdXRvJywgbWQ6IGlzVmVydGljbGVMYXlvdXQgJiYgIWhpZGVQaG90byA/ICdhdXRvJyA6IDAgfX1cbiAgICAgICAgICBtcj17MzJ9XG4gICAgICAgICAgZ3JpZEFyZWE9eyFoaWRlUGhvdG8gPyAnYnlsaW5lJyA6ICdhdmF0YXInfVxuICAgICAgICA+XG4gICAgICAgICAgPFRleHQgdmFyaWFudD1cInAtc21hbGxcIiBhcz1cInBcIiBmb250RmFtaWx5PVwiYWNjZW50XCI+XG4gICAgICAgICAgICB7bGFzdE5hbWUgPyBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWVbMF19LmAgOiBgJHtmaXJzdE5hbWV9YH1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPFRleHQgdmFyaWFudD1cInAtc21hbGxcIiBhcz1cInBcIiBmb250RmFtaWx5PVwiYWNjZW50XCI+XG4gICAgICAgICAgICB7b2NjdXBhdGlvbn1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgeyEhYm90dG9tVGV4dCAmJiAoXG4gICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgICAge2JvdHRvbVRleHR9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxRdW90ZUFydCBhbHQ9XCJcIiBzcmM9e2RhcmtRdW90ZXN9IC8+XG4gICAgICAgIDxUZXh0XG4gICAgICAgICAgcHQ9e3sgXzogMCwgbWQ6IGlzVmVydGljbGVMYXlvdXQgPyAwIDogNCB9fVxuICAgICAgICAgIHByPXt7IF86IDE2LCBzbTogMCB9fVxuICAgICAgICAgIGdyaWRBcmVhPVwidGV4dFwiXG4gICAgICAgICAgdmFyaWFudD1cInRpdGxlLW1kXCJcbiAgICAgICAgICBhcz1cInBcIlxuICAgICAgICA+XG4gICAgICAgICAge3F1b3RlfVxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L1Rlc3RpbW9uaWFsQ29udGVudD5cbiAgICA8L1Rlc3RpbW9uaWFsQ2FyZD5cbiAgKTtcblxuICBjb25zdCByZW5kZXJUZXN0aW1vbmlhbFdpdGhBbmNob3IgPSAoKSA9PiAoXG4gICAgPEFuY2hvclxuICAgICAgZGlzcGxheT17cmVzdC5kaXNwbGF5fVxuICAgICAgZGF0YS10ZXN0aWQ9XCJ0ZXN0aW1vbmlhbC1saW5rXCJcbiAgICAgIGhyZWY9e2hyZWZ9XG4gICAgICB2YXJpYW50PVwiaW50ZXJmYWNlXCJcbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWx9XG4gICAgPlxuICAgICAge3JlbmRlclRlc3RpbW9uaWFsKCl9XG4gICAgPC9BbmNob3I+XG4gICk7XG5cbiAgcmV0dXJuIGhyZWYgPyByZW5kZXJUZXN0aW1vbmlhbFdpdGhBbmNob3IoKSA6IHJlbmRlclRlc3RpbW9uaWFsKCk7XG59O1xuIl19 */");

export var Testimonial = function Testimonial(_ref) {
  var firstName = _ref.firstName,
      lastName = _ref.lastName,
      company = _ref.company,
      occupation = _ref.occupation,
      location = _ref.location,
      href = _ref.href,
      quote = _ref.quote,
      onClick = _ref.onClick,
      hidePhoto = _ref.hidePhoto,
      imageUrl = _ref.imageUrl,
      variant = _ref.variant,
      mode = _ref.mode,
      rest = _objectWithoutProperties(_ref, ["firstName", "lastName", "company", "occupation", "location", "href", "quote", "onClick", "hidePhoto", "imageUrl", "variant", "mode"]);

  var isVerticleLayout = variant === 'vertical';
  var bottomText = useMemo(function () {
    if (company && location) return "@ ".concat(company, ", ").concat(location);
    if (!company && location) return "".concat(location);
    if (company && !location) return "@ ".concat(company);
    return '';
  }, [company, location]);
  var ariaLabel = "".concat(firstName, " ").concat(lastName, " ").concat(bottomText, ". ").concat(quote);

  var renderTestimonial = function renderTestimonial() {
    return /*#__PURE__*/React.createElement(TestimonialCard, _extends({}, rest, {
      p: 32,
      width: "100%",
      height: "100%",
      mode: mode
    }), /*#__PURE__*/React.createElement(TestimonialContent, {
      variant: variant
    }, !hidePhoto && imageUrl && /*#__PURE__*/React.createElement(TestimonialPicture, {
      "data-testid": "testimonial-photo",
      src: imageUrl,
      alt: "testimonial"
    }), /*#__PURE__*/React.createElement(Box, {
      my: {
        _: 'auto',
        md: isVerticleLayout && !hidePhoto ? 'auto' : 0
      },
      mr: 32,
      gridArea: !hidePhoto ? 'byline' : 'avatar'
    }, /*#__PURE__*/React.createElement(Text, {
      variant: "p-small",
      as: "p",
      fontFamily: "accent"
    }, lastName ? "".concat(firstName, " ").concat(lastName[0], ".") : "".concat(firstName)), /*#__PURE__*/React.createElement(Text, {
      variant: "p-small",
      as: "p",
      fontFamily: "accent"
    }, occupation), !!bottomText && /*#__PURE__*/React.createElement(Text, {
      variant: "p-small",
      as: "p",
      fontFamily: "accent"
    }, bottomText)), /*#__PURE__*/React.createElement(QuoteArt, {
      alt: "",
      src: darkQuotes
    }), /*#__PURE__*/React.createElement(Text, {
      pt: {
        _: 0,
        md: isVerticleLayout ? 0 : 4
      },
      pr: {
        _: 16,
        sm: 0
      },
      gridArea: "text",
      variant: "title-md",
      as: "p"
    }, quote)));
  };

  var renderTestimonialWithAnchor = function renderTestimonialWithAnchor() {
    return /*#__PURE__*/React.createElement(Anchor, {
      display: rest.display,
      "data-testid": "testimonial-link",
      href: href,
      variant: "interface",
      onClick: onClick,
      "aria-label": ariaLabel
    }, renderTestimonial());
  };

  return href ? renderTestimonialWithAnchor() : renderTestimonial();
};