function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
import _styled from "@emotion/styled/base";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import { Anchor, Box, FloatingCard, Text } from '@codecademy/gamut';
import { modeColorProps, system } from '@codecademy/gamut-styles';
import { useMemo } from 'react';
import * as React from 'react';
import darkQuotes from '../assets/navyQuotes.svg';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var QuoteArt = /*#__PURE__*/_styled("img", {
  target: "e5lkuj63",
  label: "QuoteArt"
})(process.env.NODE_ENV === "production" ? {
  name: "1984sn5",
  styles: "height:25px;grid-area:art"
} : {
  name: "1984sn5",
  styles: "height:25px;grid-area:art",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUTJCIiwiZmlsZSI6Ii4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxvYXRpbmdDYXJkLCBUZXh0IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgbW9kZUNvbG9yUHJvcHMsIHN5c3RlbSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBDb21wb25lbnRQcm9wcywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGRhcmtRdW90ZXMgZnJvbSAnLi4vYXNzZXRzL25hdnlRdW90ZXMuc3ZnJztcblxuY29uc3QgUXVvdGVBcnQgPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDI1cHg7XG4gIGdyaWQtYXJlYTogYXJ0O1xuYDtcblxuY29uc3QgVGVzdGltb25pYWxQaWN0dXJlID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiA5OHB4O1xuICB3aWR0aDogOThweDtcbiAgYm9yZGVyLXJhZGl1czogNzBweDtcbiAgZ3JpZC1hcmVhOiBhdmF0YXI7XG5gO1xuY29uc3QgVGVzdGltb25pYWxDYXJkID0gc3R5bGVkKEZsb2F0aW5nQ2FyZCkobW9kZUNvbG9yUHJvcHMpO1xuXG5jb25zdCBncmlkTGF5b3V0cyA9IHtcbiAgdmVydGljYWw6IGAnYXJ0IGFydCBhcnQnXG4gICAgICAgICAgICAgJ3RleHQgdGV4dCB0ZXh0J1xuICAgICAgICAgICAgICdhdmF0YXIgYnlsaW5lIGJ5bGluZSdcbiAgICAgICAgICAgICAnYXZhdGFyIGJ5bGluZSBieWxpbmUnXG4gICAgICAgICAgICAgYCxcbiAgaG9yaXpvbnRhbDogYCdhdmF0YXIgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICBgLFxufTtcblxuY29uc3QgVGVzdGltb25pYWxDb250ZW50ID0gc3R5bGVkKEJveCkoXG4gIHN5c3RlbS52YXJpYW50KHtcbiAgICBkZWZhdWx0VmFyaWFudDogJ2hvcml6b250YWwnLFxuICAgIGJhc2U6IHtcbiAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgIGNvbG9yOiAndGV4dC1hY2NlbnQnLFxuICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJ3JlcGVhdCgyLCBtaW5tYXgoMCwgbWF4LWNvbnRlbnQpKSBtaW5tYXgoMCwgMWZyKTsnLFxuICAgICAgZ3JpZFRlbXBsYXRlUm93czogJ3JlcGVhdChtYXgtY29udGVudCwgNCknLFxuICAgICAgZ2FwOiAxNixcbiAgICB9LFxuICAgIHZhcmlhbnRzOiB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUFyZWFzOiB7XG4gICAgICAgICAgXzogZ3JpZExheW91dHMudmVydGljYWwsXG4gICAgICAgICAgbWQ6IGdyaWRMYXlvdXRzLmhvcml6b250YWwsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQXJlYXM6IGdyaWRMYXlvdXRzLnZlcnRpY2FsLFxuICAgICAgfSxcbiAgICB9LFxuICB9KVxuKTtcblxuZXhwb3J0IHR5cGUgVGVzdGltb25pYWxQcm9wcyA9IENvbXBvbmVudFByb3BzPHR5cGVvZiBUZXN0aW1vbmlhbENhcmQ+ICZcbiAgQ29tcG9uZW50UHJvcHM8dHlwZW9mIFRlc3RpbW9uaWFsQ29udGVudD4gJiB7XG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gICAgcXVvdGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDaXR5IGxvY2F0aW9uXG4gICAgICovXG4gICAgbG9jYXRpb24/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogYXNzb2NpYXRlZCBvY2N1cGF0aW9uIG9mIHRoZSBwZXJzb24uXG4gICAgICovXG4gICAgb2NjdXBhdGlvbj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogQXNzb2NpYXRlZCB3b3JrcGxhY2Ugb3IgaW5zdGl0dXRpb25cbiAgICAgKi9cbiAgICBjb21wYW55Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBQb3J0cmFpdCBpbWFnZSBzcmNcbiAgICAgKi9cbiAgICBpbWFnZVVybD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogc2V0dGluZyB0aGlzIGhyZWYgd2lsbCB3cmFwIHRoZSB0ZXN0aW1vbmlhbCBjYXJkIHdpdGggYW4gYW5jaG9yIHRhZy5cbiAgICAgKi9cbiAgICBocmVmPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGNvbmRpdG9uYWxseSBoaWRlIHRoZSBwb3J0cmFpdCBwaG90b1xuICAgICAqL1xuICAgIGhpZGVQaG90bz86IGJvb2xlYW47XG4gICAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gIH07XG5cbmV4cG9ydCBjb25zdCBUZXN0aW1vbmlhbDogUmVhY3QuRkM8VGVzdGltb25pYWxQcm9wcz4gPSAoe1xuICBmaXJzdE5hbWUsXG4gIGxhc3ROYW1lLFxuICBjb21wYW55LFxuICBvY2N1cGF0aW9uLFxuICBsb2NhdGlvbixcbiAgaHJlZixcbiAgcXVvdGUsXG4gIG9uQ2xpY2ssXG4gIGhpZGVQaG90byxcbiAgaW1hZ2VVcmwsXG4gIHZhcmlhbnQsXG4gIG1vZGUsXG4gIC4uLnJlc3Rcbn0pID0+IHtcbiAgY29uc3QgaXNWZXJ0aWNsZUxheW91dCA9IHZhcmlhbnQgPT09ICd2ZXJ0aWNhbCc7XG5cbiAgY29uc3QgYm90dG9tVGV4dDogc3RyaW5nID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGNvbXBhbnkgJiYgbG9jYXRpb24pIHJldHVybiBgQCAke2NvbXBhbnl9LCAke2xvY2F0aW9ufWA7XG4gICAgaWYgKCFjb21wYW55ICYmIGxvY2F0aW9uKSByZXR1cm4gYCR7bG9jYXRpb259YDtcbiAgICBpZiAoY29tcGFueSAmJiAhbG9jYXRpb24pIHJldHVybiBgQCAke2NvbXBhbnl9YDtcbiAgICByZXR1cm4gJyc7XG4gIH0sIFtjb21wYW55LCBsb2NhdGlvbl0pO1xuXG4gIGNvbnN0IGFyaWFMYWJlbCA9IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZX0gJHtib3R0b21UZXh0fS4gJHtxdW90ZX1gO1xuXG4gIGNvbnN0IHJlbmRlclRlc3RpbW9uaWFsID0gKCkgPT4gKFxuICAgIDxUZXN0aW1vbmlhbENhcmQgey4uLnJlc3R9IHA9ezMyfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgbW9kZT17bW9kZX0+XG4gICAgICA8VGVzdGltb25pYWxDb250ZW50IHZhcmlhbnQ9e3ZhcmlhbnR9PlxuICAgICAgICB7IWhpZGVQaG90byAmJiBpbWFnZVVybCAmJiAoXG4gICAgICAgICAgPFRlc3RpbW9uaWFsUGljdHVyZVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJ0ZXN0aW1vbmlhbC1waG90b1wiXG4gICAgICAgICAgICBzcmM9e2ltYWdlVXJsfVxuICAgICAgICAgICAgYWx0PVwidGVzdGltb25pYWxcIlxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBteT17eyBfOiAnYXV0bycsIG1kOiBpc1ZlcnRpY2xlTGF5b3V0ICYmICFoaWRlUGhvdG8gPyAnYXV0bycgOiAwIH19XG4gICAgICAgICAgbXI9ezMyfVxuICAgICAgICAgIGdyaWRBcmVhPXshaGlkZVBob3RvID8gJ2J5bGluZScgOiAnYXZhdGFyJ31cbiAgICAgICAgPlxuICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAge2xhc3ROYW1lID8gYCR7Zmlyc3ROYW1lfSAke2xhc3ROYW1lWzBdfS5gIDogYCR7Zmlyc3ROYW1lfWB9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAge29jY3VwYXRpb259XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIHshIWJvdHRvbVRleHQgJiYgKFxuICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cInAtc21hbGxcIiBhcz1cInBcIiBmb250RmFtaWx5PVwiYWNjZW50XCI+XG4gICAgICAgICAgICAgIHtib3R0b21UZXh0fVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8UXVvdGVBcnQgYWx0PVwiXCIgc3JjPXtkYXJrUXVvdGVzfSAvPlxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHB0PXt7IF86IDAsIG1kOiBpc1ZlcnRpY2xlTGF5b3V0ID8gMCA6IDQgfX1cbiAgICAgICAgICBwcj17eyBfOiAxNiwgc206IDAgfX1cbiAgICAgICAgICBncmlkQXJlYT1cInRleHRcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0aXRsZS1tZFwiXG4gICAgICAgICAgYXM9XCJwXCJcbiAgICAgICAgPlxuICAgICAgICAgIHtxdW90ZX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9UZXN0aW1vbmlhbENvbnRlbnQ+XG4gICAgPC9UZXN0aW1vbmlhbENhcmQ+XG4gICk7XG5cbiAgY29uc3QgcmVuZGVyVGVzdGltb25pYWxXaXRoQW5jaG9yID0gKCkgPT4gKFxuICAgIDxBbmNob3JcbiAgICAgIGRpc3BsYXk9e3Jlc3QuZGlzcGxheX1cbiAgICAgIGRhdGEtdGVzdGlkPVwidGVzdGltb25pYWwtbGlua1wiXG4gICAgICBocmVmPXtocmVmfVxuICAgICAgdmFyaWFudD1cImludGVyZmFjZVwiXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgID5cbiAgICAgIHtyZW5kZXJUZXN0aW1vbmlhbCgpfVxuICAgIDwvQW5jaG9yPlxuICApO1xuXG4gIHJldHVybiBocmVmID8gcmVuZGVyVGVzdGltb25pYWxXaXRoQW5jaG9yKCkgOiByZW5kZXJUZXN0aW1vbmlhbCgpO1xufTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
var TestimonialPicture = /*#__PURE__*/_styled("img", {
  target: "e5lkuj62",
  label: "TestimonialPicture"
})(process.env.NODE_ENV === "production" ? {
  name: "1eyisw3",
  styles: "height:98px;width:98px;border-radius:70px;grid-area:avatar"
} : {
  name: "1eyisw3",
  styles: "height:98px;width:98px;border-radius:70px;grid-area:avatar",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYXFDIiwiZmlsZSI6Ii4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbmNob3IsIEJveCwgRmxvYXRpbmdDYXJkLCBUZXh0IH0gZnJvbSAnQGNvZGVjYWRlbXkvZ2FtdXQnO1xuaW1wb3J0IHsgbW9kZUNvbG9yUHJvcHMsIHN5c3RlbSB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0LXN0eWxlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBDb21wb25lbnRQcm9wcywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGRhcmtRdW90ZXMgZnJvbSAnLi4vYXNzZXRzL25hdnlRdW90ZXMuc3ZnJztcblxuY29uc3QgUXVvdGVBcnQgPSBzdHlsZWQuaW1nYFxuICBoZWlnaHQ6IDI1cHg7XG4gIGdyaWQtYXJlYTogYXJ0O1xuYDtcblxuY29uc3QgVGVzdGltb25pYWxQaWN0dXJlID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiA5OHB4O1xuICB3aWR0aDogOThweDtcbiAgYm9yZGVyLXJhZGl1czogNzBweDtcbiAgZ3JpZC1hcmVhOiBhdmF0YXI7XG5gO1xuY29uc3QgVGVzdGltb25pYWxDYXJkID0gc3R5bGVkKEZsb2F0aW5nQ2FyZCkobW9kZUNvbG9yUHJvcHMpO1xuXG5jb25zdCBncmlkTGF5b3V0cyA9IHtcbiAgdmVydGljYWw6IGAnYXJ0IGFydCBhcnQnXG4gICAgICAgICAgICAgJ3RleHQgdGV4dCB0ZXh0J1xuICAgICAgICAgICAgICdhdmF0YXIgYnlsaW5lIGJ5bGluZSdcbiAgICAgICAgICAgICAnYXZhdGFyIGJ5bGluZSBieWxpbmUnXG4gICAgICAgICAgICAgYCxcbiAgaG9yaXpvbnRhbDogYCdhdmF0YXIgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICBgLFxufTtcblxuY29uc3QgVGVzdGltb25pYWxDb250ZW50ID0gc3R5bGVkKEJveCkoXG4gIHN5c3RlbS52YXJpYW50KHtcbiAgICBkZWZhdWx0VmFyaWFudDogJ2hvcml6b250YWwnLFxuICAgIGJhc2U6IHtcbiAgICAgIGRpc3BsYXk6ICdncmlkJyxcbiAgICAgIGNvbG9yOiAndGV4dC1hY2NlbnQnLFxuICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogJ3JlcGVhdCgyLCBtaW5tYXgoMCwgbWF4LWNvbnRlbnQpKSBtaW5tYXgoMCwgMWZyKTsnLFxuICAgICAgZ3JpZFRlbXBsYXRlUm93czogJ3JlcGVhdChtYXgtY29udGVudCwgNCknLFxuICAgICAgZ2FwOiAxNixcbiAgICB9LFxuICAgIHZhcmlhbnRzOiB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUFyZWFzOiB7XG4gICAgICAgICAgXzogZ3JpZExheW91dHMudmVydGljYWwsXG4gICAgICAgICAgbWQ6IGdyaWRMYXlvdXRzLmhvcml6b250YWwsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgZ3JpZFRlbXBsYXRlQXJlYXM6IGdyaWRMYXlvdXRzLnZlcnRpY2FsLFxuICAgICAgfSxcbiAgICB9LFxuICB9KVxuKTtcblxuZXhwb3J0IHR5cGUgVGVzdGltb25pYWxQcm9wcyA9IENvbXBvbmVudFByb3BzPHR5cGVvZiBUZXN0aW1vbmlhbENhcmQ+ICZcbiAgQ29tcG9uZW50UHJvcHM8dHlwZW9mIFRlc3RpbW9uaWFsQ29udGVudD4gJiB7XG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gICAgcXVvdGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDaXR5IGxvY2F0aW9uXG4gICAgICovXG4gICAgbG9jYXRpb24/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogYXNzb2NpYXRlZCBvY2N1cGF0aW9uIG9mIHRoZSBwZXJzb24uXG4gICAgICovXG4gICAgb2NjdXBhdGlvbj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogQXNzb2NpYXRlZCB3b3JrcGxhY2Ugb3IgaW5zdGl0dXRpb25cbiAgICAgKi9cbiAgICBjb21wYW55Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBQb3J0cmFpdCBpbWFnZSBzcmNcbiAgICAgKi9cbiAgICBpbWFnZVVybD86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogc2V0dGluZyB0aGlzIGhyZWYgd2lsbCB3cmFwIHRoZSB0ZXN0aW1vbmlhbCBjYXJkIHdpdGggYW4gYW5jaG9yIHRhZy5cbiAgICAgKi9cbiAgICBocmVmPzogc3RyaW5nIHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiB1c2VkIHRvIGNvbmRpdG9uYWxseSBoaWRlIHRoZSBwb3J0cmFpdCBwaG90b1xuICAgICAqL1xuICAgIGhpZGVQaG90bz86IGJvb2xlYW47XG4gICAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gIH07XG5cbmV4cG9ydCBjb25zdCBUZXN0aW1vbmlhbDogUmVhY3QuRkM8VGVzdGltb25pYWxQcm9wcz4gPSAoe1xuICBmaXJzdE5hbWUsXG4gIGxhc3ROYW1lLFxuICBjb21wYW55LFxuICBvY2N1cGF0aW9uLFxuICBsb2NhdGlvbixcbiAgaHJlZixcbiAgcXVvdGUsXG4gIG9uQ2xpY2ssXG4gIGhpZGVQaG90byxcbiAgaW1hZ2VVcmwsXG4gIHZhcmlhbnQsXG4gIG1vZGUsXG4gIC4uLnJlc3Rcbn0pID0+IHtcbiAgY29uc3QgaXNWZXJ0aWNsZUxheW91dCA9IHZhcmlhbnQgPT09ICd2ZXJ0aWNhbCc7XG5cbiAgY29uc3QgYm90dG9tVGV4dDogc3RyaW5nID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGNvbXBhbnkgJiYgbG9jYXRpb24pIHJldHVybiBgQCAke2NvbXBhbnl9LCAke2xvY2F0aW9ufWA7XG4gICAgaWYgKCFjb21wYW55ICYmIGxvY2F0aW9uKSByZXR1cm4gYCR7bG9jYXRpb259YDtcbiAgICBpZiAoY29tcGFueSAmJiAhbG9jYXRpb24pIHJldHVybiBgQCAke2NvbXBhbnl9YDtcbiAgICByZXR1cm4gJyc7XG4gIH0sIFtjb21wYW55LCBsb2NhdGlvbl0pO1xuXG4gIGNvbnN0IGFyaWFMYWJlbCA9IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZX0gJHtib3R0b21UZXh0fS4gJHtxdW90ZX1gO1xuXG4gIGNvbnN0IHJlbmRlclRlc3RpbW9uaWFsID0gKCkgPT4gKFxuICAgIDxUZXN0aW1vbmlhbENhcmQgey4uLnJlc3R9IHA9ezMyfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgbW9kZT17bW9kZX0+XG4gICAgICA8VGVzdGltb25pYWxDb250ZW50IHZhcmlhbnQ9e3ZhcmlhbnR9PlxuICAgICAgICB7IWhpZGVQaG90byAmJiBpbWFnZVVybCAmJiAoXG4gICAgICAgICAgPFRlc3RpbW9uaWFsUGljdHVyZVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJ0ZXN0aW1vbmlhbC1waG90b1wiXG4gICAgICAgICAgICBzcmM9e2ltYWdlVXJsfVxuICAgICAgICAgICAgYWx0PVwidGVzdGltb25pYWxcIlxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBteT17eyBfOiAnYXV0bycsIG1kOiBpc1ZlcnRpY2xlTGF5b3V0ICYmICFoaWRlUGhvdG8gPyAnYXV0bycgOiAwIH19XG4gICAgICAgICAgbXI9ezMyfVxuICAgICAgICAgIGdyaWRBcmVhPXshaGlkZVBob3RvID8gJ2J5bGluZScgOiAnYXZhdGFyJ31cbiAgICAgICAgPlxuICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAge2xhc3ROYW1lID8gYCR7Zmlyc3ROYW1lfSAke2xhc3ROYW1lWzBdfS5gIDogYCR7Zmlyc3ROYW1lfWB9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAge29jY3VwYXRpb259XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIHshIWJvdHRvbVRleHQgJiYgKFxuICAgICAgICAgICAgPFRleHQgdmFyaWFudD1cInAtc21hbGxcIiBhcz1cInBcIiBmb250RmFtaWx5PVwiYWNjZW50XCI+XG4gICAgICAgICAgICAgIHtib3R0b21UZXh0fVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8UXVvdGVBcnQgYWx0PVwiXCIgc3JjPXtkYXJrUXVvdGVzfSAvPlxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHB0PXt7IF86IDAsIG1kOiBpc1ZlcnRpY2xlTGF5b3V0ID8gMCA6IDQgfX1cbiAgICAgICAgICBwcj17eyBfOiAxNiwgc206IDAgfX1cbiAgICAgICAgICBncmlkQXJlYT1cInRleHRcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJ0aXRsZS1tZFwiXG4gICAgICAgICAgYXM9XCJwXCJcbiAgICAgICAgPlxuICAgICAgICAgIHtxdW90ZX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9UZXN0aW1vbmlhbENvbnRlbnQ+XG4gICAgPC9UZXN0aW1vbmlhbENhcmQ+XG4gICk7XG5cbiAgY29uc3QgcmVuZGVyVGVzdGltb25pYWxXaXRoQW5jaG9yID0gKCkgPT4gKFxuICAgIDxBbmNob3JcbiAgICAgIGRpc3BsYXk9e3Jlc3QuZGlzcGxheX1cbiAgICAgIGRhdGEtdGVzdGlkPVwidGVzdGltb25pYWwtbGlua1wiXG4gICAgICBocmVmPXtocmVmfVxuICAgICAgdmFyaWFudD1cImludGVyZmFjZVwiXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgYXJpYS1sYWJlbD17YXJpYUxhYmVsfVxuICAgID5cbiAgICAgIHtyZW5kZXJUZXN0aW1vbmlhbCgpfVxuICAgIDwvQW5jaG9yPlxuICApO1xuXG4gIHJldHVybiBocmVmID8gcmVuZGVyVGVzdGltb25pYWxXaXRoQW5jaG9yKCkgOiByZW5kZXJUZXN0aW1vbmlhbCgpO1xufTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
var TestimonialCard = /*#__PURE__*/_styled(FloatingCard, {
  target: "e5lkuj61",
  label: "TestimonialCard"
})(modeColorProps, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJ3QiIsImZpbGUiOiIuLi8uLi9zcmMvVGVzdGltb25pYWwvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5jaG9yLCBCb3gsIEZsb2F0aW5nQ2FyZCwgVGV4dCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0JztcbmltcG9ydCB7IG1vZGVDb2xvclByb3BzLCBzeXN0ZW0gfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgQ29tcG9uZW50UHJvcHMsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBkYXJrUXVvdGVzIGZyb20gJy4uL2Fzc2V0cy9uYXZ5UXVvdGVzLnN2Zyc7XG5cbmNvbnN0IFF1b3RlQXJ0ID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiAyNXB4O1xuICBncmlkLWFyZWE6IGFydDtcbmA7XG5cbmNvbnN0IFRlc3RpbW9uaWFsUGljdHVyZSA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogOThweDtcbiAgd2lkdGg6IDk4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDcwcHg7XG4gIGdyaWQtYXJlYTogYXZhdGFyO1xuYDtcbmNvbnN0IFRlc3RpbW9uaWFsQ2FyZCA9IHN0eWxlZChGbG9hdGluZ0NhcmQpKG1vZGVDb2xvclByb3BzKTtcblxuY29uc3QgZ3JpZExheW91dHMgPSB7XG4gIHZlcnRpY2FsOiBgJ2FydCBhcnQgYXJ0J1xuICAgICAgICAgICAgICd0ZXh0IHRleHQgdGV4dCdcbiAgICAgICAgICAgICAnYXZhdGFyIGJ5bGluZSBieWxpbmUnXG4gICAgICAgICAgICAgJ2F2YXRhciBieWxpbmUgYnlsaW5lJ1xuICAgICAgICAgICAgIGAsXG4gIGhvcml6b250YWw6IGAnYXZhdGFyIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgYCxcbn07XG5cbmNvbnN0IFRlc3RpbW9uaWFsQ29udGVudCA9IHN0eWxlZChCb3gpKFxuICBzeXN0ZW0udmFyaWFudCh7XG4gICAgZGVmYXVsdFZhcmlhbnQ6ICdob3Jpem9udGFsJyxcbiAgICBiYXNlOiB7XG4gICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICBjb2xvcjogJ3RleHQtYWNjZW50JyxcbiAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICdyZXBlYXQoMiwgbWlubWF4KDAsIG1heC1jb250ZW50KSkgbWlubWF4KDAsIDFmcik7JyxcbiAgICAgIGdyaWRUZW1wbGF0ZVJvd3M6ICdyZXBlYXQobWF4LWNvbnRlbnQsIDQpJyxcbiAgICAgIGdhcDogMTYsXG4gICAgfSxcbiAgICB2YXJpYW50czoge1xuICAgICAgaG9yaXpvbnRhbDoge1xuICAgICAgICBncmlkVGVtcGxhdGVBcmVhczoge1xuICAgICAgICAgIF86IGdyaWRMYXlvdXRzLnZlcnRpY2FsLFxuICAgICAgICAgIG1kOiBncmlkTGF5b3V0cy5ob3Jpem9udGFsLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHZlcnRpY2FsOiB7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUFyZWFzOiBncmlkTGF5b3V0cy52ZXJ0aWNhbCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbik7XG5cbmV4cG9ydCB0eXBlIFRlc3RpbW9uaWFsUHJvcHMgPSBDb21wb25lbnRQcm9wczx0eXBlb2YgVGVzdGltb25pYWxDYXJkPiAmXG4gIENvbXBvbmVudFByb3BzPHR5cGVvZiBUZXN0aW1vbmlhbENvbnRlbnQ+ICYge1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xuICAgIHF1b3RlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2l0eSBsb2NhdGlvblxuICAgICAqL1xuICAgIGxvY2F0aW9uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIGFzc29jaWF0ZWQgb2NjdXBhdGlvbiBvZiB0aGUgcGVyc29uLlxuICAgICAqL1xuICAgIG9jY3VwYXRpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZWQgd29ya3BsYWNlIG9yIGluc3RpdHV0aW9uXG4gICAgICovXG4gICAgY29tcGFueT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogUG9ydHJhaXQgaW1hZ2Ugc3JjXG4gICAgICovXG4gICAgaW1hZ2VVcmw/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIHNldHRpbmcgdGhpcyBocmVmIHdpbGwgd3JhcCB0aGUgdGVzdGltb25pYWwgY2FyZCB3aXRoIGFuIGFuY2hvciB0YWcuXG4gICAgICovXG4gICAgaHJlZj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjb25kaXRvbmFsbHkgaGlkZSB0aGUgcG9ydHJhaXQgcGhvdG9cbiAgICAgKi9cbiAgICBoaWRlUGhvdG8/OiBib29sZWFuO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICB9O1xuXG5leHBvcnQgY29uc3QgVGVzdGltb25pYWw6IFJlYWN0LkZDPFRlc3RpbW9uaWFsUHJvcHM+ID0gKHtcbiAgZmlyc3ROYW1lLFxuICBsYXN0TmFtZSxcbiAgY29tcGFueSxcbiAgb2NjdXBhdGlvbixcbiAgbG9jYXRpb24sXG4gIGhyZWYsXG4gIHF1b3RlLFxuICBvbkNsaWNrLFxuICBoaWRlUGhvdG8sXG4gIGltYWdlVXJsLFxuICB2YXJpYW50LFxuICBtb2RlLFxuICAuLi5yZXN0XG59KSA9PiB7XG4gIGNvbnN0IGlzVmVydGljbGVMYXlvdXQgPSB2YXJpYW50ID09PSAndmVydGljYWwnO1xuXG4gIGNvbnN0IGJvdHRvbVRleHQ6IHN0cmluZyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChjb21wYW55ICYmIGxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fSwgJHtsb2NhdGlvbn1gO1xuICAgIGlmICghY29tcGFueSAmJiBsb2NhdGlvbikgcmV0dXJuIGAke2xvY2F0aW9ufWA7XG4gICAgaWYgKGNvbXBhbnkgJiYgIWxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fWA7XG4gICAgcmV0dXJuICcnO1xuICB9LCBbY29tcGFueSwgbG9jYXRpb25dKTtcblxuICBjb25zdCBhcmlhTGFiZWwgPSBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWV9ICR7Ym90dG9tVGV4dH0uICR7cXVvdGV9YDtcblxuICBjb25zdCByZW5kZXJUZXN0aW1vbmlhbCA9ICgpID0+IChcbiAgICA8VGVzdGltb25pYWxDYXJkIHsuLi5yZXN0fSBwPXszMn0gd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIG1vZGU9e21vZGV9PlxuICAgICAgPFRlc3RpbW9uaWFsQ29udGVudCB2YXJpYW50PXt2YXJpYW50fT5cbiAgICAgICAgeyFoaWRlUGhvdG8gJiYgaW1hZ2VVcmwgJiYgKFxuICAgICAgICAgIDxUZXN0aW1vbmlhbFBpY3R1cmVcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwidGVzdGltb25pYWwtcGhvdG9cIlxuICAgICAgICAgICAgc3JjPXtpbWFnZVVybH1cbiAgICAgICAgICAgIGFsdD1cInRlc3RpbW9uaWFsXCJcbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8Qm94XG4gICAgICAgICAgbXk9e3sgXzogJ2F1dG8nLCBtZDogaXNWZXJ0aWNsZUxheW91dCAmJiAhaGlkZVBob3RvID8gJ2F1dG8nIDogMCB9fVxuICAgICAgICAgIG1yPXszMn1cbiAgICAgICAgICBncmlkQXJlYT17IWhpZGVQaG90byA/ICdieWxpbmUnIDogJ2F2YXRhcid9XG4gICAgICAgID5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtsYXN0TmFtZSA/IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZVswXX0uYCA6IGAke2ZpcnN0TmFtZX1gfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtvY2N1cGF0aW9ufVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICB7ISFib3R0b21UZXh0ICYmIChcbiAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAgICB7Ym90dG9tVGV4dH1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICApfVxuICAgICAgICA8L0JveD5cbiAgICAgICAgPFF1b3RlQXJ0IGFsdD1cIlwiIHNyYz17ZGFya1F1b3Rlc30gLz5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBwdD17eyBfOiAwLCBtZDogaXNWZXJ0aWNsZUxheW91dCA/IDAgOiA0IH19XG4gICAgICAgICAgcHI9e3sgXzogMTYsIHNtOiAwIH19XG4gICAgICAgICAgZ3JpZEFyZWE9XCJ0ZXh0XCJcbiAgICAgICAgICB2YXJpYW50PVwidGl0bGUtbWRcIlxuICAgICAgICAgIGFzPVwicFwiXG4gICAgICAgID5cbiAgICAgICAgICB7cXVvdGV9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvVGVzdGltb25pYWxDb250ZW50PlxuICAgIDwvVGVzdGltb25pYWxDYXJkPlxuICApO1xuXG4gIGNvbnN0IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvciA9ICgpID0+IChcbiAgICA8QW5jaG9yXG4gICAgICBkaXNwbGF5PXtyZXN0LmRpc3BsYXl9XG4gICAgICBkYXRhLXRlc3RpZD1cInRlc3RpbW9uaWFsLWxpbmtcIlxuICAgICAgaHJlZj17aHJlZn1cbiAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICA+XG4gICAgICB7cmVuZGVyVGVzdGltb25pYWwoKX1cbiAgICA8L0FuY2hvcj5cbiAgKTtcblxuICByZXR1cm4gaHJlZiA/IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvcigpIDogcmVuZGVyVGVzdGltb25pYWwoKTtcbn07XG4iXX0= */");
var gridLayouts = {
  vertical: "'art art art'\n             'text text text'\n             'avatar byline byline'\n             'avatar byline byline'\n             ",
  horizontal: "'avatar art text'\n               'byline art text'\n               'byline art text'\n               'byline art text'\n               "
};
var TestimonialContent = /*#__PURE__*/_styled(Box, {
  target: "e5lkuj60",
  label: "TestimonialContent"
})(system.variant({
  defaultVariant: 'horizontal',
  base: {
    display: 'grid',
    color: 'text-accent',
    gridTemplateColumns: 'repeat(2, minmax(0, max-content)) minmax(0, 1fr);',
    gridTemplateRows: 'repeat(max-content, 4)',
    gap: 16
  },
  variants: {
    horizontal: {
      gridTemplateAreas: {
        _: gridLayouts.vertical,
        md: gridLayouts.horizontal
      }
    },
    vertical: {
      gridTemplateAreas: gridLayouts.vertical
    }
  }
}), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UZXN0aW1vbmlhbC9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0MyQiIsImZpbGUiOiIuLi8uLi9zcmMvVGVzdGltb25pYWwvaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5jaG9yLCBCb3gsIEZsb2F0aW5nQ2FyZCwgVGV4dCB9IGZyb20gJ0Bjb2RlY2FkZW15L2dhbXV0JztcbmltcG9ydCB7IG1vZGVDb2xvclByb3BzLCBzeXN0ZW0gfSBmcm9tICdAY29kZWNhZGVteS9nYW11dC1zdHlsZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgQ29tcG9uZW50UHJvcHMsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBkYXJrUXVvdGVzIGZyb20gJy4uL2Fzc2V0cy9uYXZ5UXVvdGVzLnN2Zyc7XG5cbmNvbnN0IFF1b3RlQXJ0ID0gc3R5bGVkLmltZ2BcbiAgaGVpZ2h0OiAyNXB4O1xuICBncmlkLWFyZWE6IGFydDtcbmA7XG5cbmNvbnN0IFRlc3RpbW9uaWFsUGljdHVyZSA9IHN0eWxlZC5pbWdgXG4gIGhlaWdodDogOThweDtcbiAgd2lkdGg6IDk4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDcwcHg7XG4gIGdyaWQtYXJlYTogYXZhdGFyO1xuYDtcbmNvbnN0IFRlc3RpbW9uaWFsQ2FyZCA9IHN0eWxlZChGbG9hdGluZ0NhcmQpKG1vZGVDb2xvclByb3BzKTtcblxuY29uc3QgZ3JpZExheW91dHMgPSB7XG4gIHZlcnRpY2FsOiBgJ2FydCBhcnQgYXJ0J1xuICAgICAgICAgICAgICd0ZXh0IHRleHQgdGV4dCdcbiAgICAgICAgICAgICAnYXZhdGFyIGJ5bGluZSBieWxpbmUnXG4gICAgICAgICAgICAgJ2F2YXRhciBieWxpbmUgYnlsaW5lJ1xuICAgICAgICAgICAgIGAsXG4gIGhvcml6b250YWw6IGAnYXZhdGFyIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgJ2J5bGluZSBhcnQgdGV4dCdcbiAgICAgICAgICAgICAgICdieWxpbmUgYXJ0IHRleHQnXG4gICAgICAgICAgICAgICAnYnlsaW5lIGFydCB0ZXh0J1xuICAgICAgICAgICAgICAgYCxcbn07XG5cbmNvbnN0IFRlc3RpbW9uaWFsQ29udGVudCA9IHN0eWxlZChCb3gpKFxuICBzeXN0ZW0udmFyaWFudCh7XG4gICAgZGVmYXVsdFZhcmlhbnQ6ICdob3Jpem9udGFsJyxcbiAgICBiYXNlOiB7XG4gICAgICBkaXNwbGF5OiAnZ3JpZCcsXG4gICAgICBjb2xvcjogJ3RleHQtYWNjZW50JyxcbiAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6ICdyZXBlYXQoMiwgbWlubWF4KDAsIG1heC1jb250ZW50KSkgbWlubWF4KDAsIDFmcik7JyxcbiAgICAgIGdyaWRUZW1wbGF0ZVJvd3M6ICdyZXBlYXQobWF4LWNvbnRlbnQsIDQpJyxcbiAgICAgIGdhcDogMTYsXG4gICAgfSxcbiAgICB2YXJpYW50czoge1xuICAgICAgaG9yaXpvbnRhbDoge1xuICAgICAgICBncmlkVGVtcGxhdGVBcmVhczoge1xuICAgICAgICAgIF86IGdyaWRMYXlvdXRzLnZlcnRpY2FsLFxuICAgICAgICAgIG1kOiBncmlkTGF5b3V0cy5ob3Jpem9udGFsLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHZlcnRpY2FsOiB7XG4gICAgICAgIGdyaWRUZW1wbGF0ZUFyZWFzOiBncmlkTGF5b3V0cy52ZXJ0aWNhbCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSlcbik7XG5cbmV4cG9ydCB0eXBlIFRlc3RpbW9uaWFsUHJvcHMgPSBDb21wb25lbnRQcm9wczx0eXBlb2YgVGVzdGltb25pYWxDYXJkPiAmXG4gIENvbXBvbmVudFByb3BzPHR5cGVvZiBUZXN0aW1vbmlhbENvbnRlbnQ+ICYge1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xuICAgIHF1b3RlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2l0eSBsb2NhdGlvblxuICAgICAqL1xuICAgIGxvY2F0aW9uPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIGFzc29jaWF0ZWQgb2NjdXBhdGlvbiBvZiB0aGUgcGVyc29uLlxuICAgICAqL1xuICAgIG9jY3VwYXRpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZWQgd29ya3BsYWNlIG9yIGluc3RpdHV0aW9uXG4gICAgICovXG4gICAgY29tcGFueT86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogUG9ydHJhaXQgaW1hZ2Ugc3JjXG4gICAgICovXG4gICAgaW1hZ2VVcmw/OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKlxuICAgICAqIHNldHRpbmcgdGhpcyBocmVmIHdpbGwgd3JhcCB0aGUgdGVzdGltb25pYWwgY2FyZCB3aXRoIGFuIGFuY2hvciB0YWcuXG4gICAgICovXG4gICAgaHJlZj86IHN0cmluZyB8IG51bGw7XG4gICAgLyoqXG4gICAgICogdXNlZCB0byBjb25kaXRvbmFsbHkgaGlkZSB0aGUgcG9ydHJhaXQgcGhvdG9cbiAgICAgKi9cbiAgICBoaWRlUGhvdG8/OiBib29sZWFuO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICB9O1xuXG5leHBvcnQgY29uc3QgVGVzdGltb25pYWw6IFJlYWN0LkZDPFRlc3RpbW9uaWFsUHJvcHM+ID0gKHtcbiAgZmlyc3ROYW1lLFxuICBsYXN0TmFtZSxcbiAgY29tcGFueSxcbiAgb2NjdXBhdGlvbixcbiAgbG9jYXRpb24sXG4gIGhyZWYsXG4gIHF1b3RlLFxuICBvbkNsaWNrLFxuICBoaWRlUGhvdG8sXG4gIGltYWdlVXJsLFxuICB2YXJpYW50LFxuICBtb2RlLFxuICAuLi5yZXN0XG59KSA9PiB7XG4gIGNvbnN0IGlzVmVydGljbGVMYXlvdXQgPSB2YXJpYW50ID09PSAndmVydGljYWwnO1xuXG4gIGNvbnN0IGJvdHRvbVRleHQ6IHN0cmluZyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChjb21wYW55ICYmIGxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fSwgJHtsb2NhdGlvbn1gO1xuICAgIGlmICghY29tcGFueSAmJiBsb2NhdGlvbikgcmV0dXJuIGAke2xvY2F0aW9ufWA7XG4gICAgaWYgKGNvbXBhbnkgJiYgIWxvY2F0aW9uKSByZXR1cm4gYEAgJHtjb21wYW55fWA7XG4gICAgcmV0dXJuICcnO1xuICB9LCBbY29tcGFueSwgbG9jYXRpb25dKTtcblxuICBjb25zdCBhcmlhTGFiZWwgPSBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWV9ICR7Ym90dG9tVGV4dH0uICR7cXVvdGV9YDtcblxuICBjb25zdCByZW5kZXJUZXN0aW1vbmlhbCA9ICgpID0+IChcbiAgICA8VGVzdGltb25pYWxDYXJkIHsuLi5yZXN0fSBwPXszMn0gd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIG1vZGU9e21vZGV9PlxuICAgICAgPFRlc3RpbW9uaWFsQ29udGVudCB2YXJpYW50PXt2YXJpYW50fT5cbiAgICAgICAgeyFoaWRlUGhvdG8gJiYgaW1hZ2VVcmwgJiYgKFxuICAgICAgICAgIDxUZXN0aW1vbmlhbFBpY3R1cmVcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwidGVzdGltb25pYWwtcGhvdG9cIlxuICAgICAgICAgICAgc3JjPXtpbWFnZVVybH1cbiAgICAgICAgICAgIGFsdD1cInRlc3RpbW9uaWFsXCJcbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8Qm94XG4gICAgICAgICAgbXk9e3sgXzogJ2F1dG8nLCBtZDogaXNWZXJ0aWNsZUxheW91dCAmJiAhaGlkZVBob3RvID8gJ2F1dG8nIDogMCB9fVxuICAgICAgICAgIG1yPXszMn1cbiAgICAgICAgICBncmlkQXJlYT17IWhpZGVQaG90byA/ICdieWxpbmUnIDogJ2F2YXRhcid9XG4gICAgICAgID5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtsYXN0TmFtZSA/IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZVswXX0uYCA6IGAke2ZpcnN0TmFtZX1gfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8VGV4dCB2YXJpYW50PVwicC1zbWFsbFwiIGFzPVwicFwiIGZvbnRGYW1pbHk9XCJhY2NlbnRcIj5cbiAgICAgICAgICAgIHtvY2N1cGF0aW9ufVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICB7ISFib3R0b21UZXh0ICYmIChcbiAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJwLXNtYWxsXCIgYXM9XCJwXCIgZm9udEZhbWlseT1cImFjY2VudFwiPlxuICAgICAgICAgICAgICB7Ym90dG9tVGV4dH1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICApfVxuICAgICAgICA8L0JveD5cbiAgICAgICAgPFF1b3RlQXJ0IGFsdD1cIlwiIHNyYz17ZGFya1F1b3Rlc30gLz5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBwdD17eyBfOiAwLCBtZDogaXNWZXJ0aWNsZUxheW91dCA/IDAgOiA0IH19XG4gICAgICAgICAgcHI9e3sgXzogMTYsIHNtOiAwIH19XG4gICAgICAgICAgZ3JpZEFyZWE9XCJ0ZXh0XCJcbiAgICAgICAgICB2YXJpYW50PVwidGl0bGUtbWRcIlxuICAgICAgICAgIGFzPVwicFwiXG4gICAgICAgID5cbiAgICAgICAgICB7cXVvdGV9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvVGVzdGltb25pYWxDb250ZW50PlxuICAgIDwvVGVzdGltb25pYWxDYXJkPlxuICApO1xuXG4gIGNvbnN0IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvciA9ICgpID0+IChcbiAgICA8QW5jaG9yXG4gICAgICBkaXNwbGF5PXtyZXN0LmRpc3BsYXl9XG4gICAgICBkYXRhLXRlc3RpZD1cInRlc3RpbW9uaWFsLWxpbmtcIlxuICAgICAgaHJlZj17aHJlZn1cbiAgICAgIHZhcmlhbnQ9XCJpbnRlcmZhY2VcIlxuICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgIGFyaWEtbGFiZWw9e2FyaWFMYWJlbH1cbiAgICA+XG4gICAgICB7cmVuZGVyVGVzdGltb25pYWwoKX1cbiAgICA8L0FuY2hvcj5cbiAgKTtcblxuICByZXR1cm4gaHJlZiA/IHJlbmRlclRlc3RpbW9uaWFsV2l0aEFuY2hvcigpIDogcmVuZGVyVGVzdGltb25pYWwoKTtcbn07XG4iXX0= */");
export var Testimonial = function Testimonial(_ref) {
  var firstName = _ref.firstName,
    lastName = _ref.lastName,
    company = _ref.company,
    occupation = _ref.occupation,
    location = _ref.location,
    href = _ref.href,
    quote = _ref.quote,
    onClick = _ref.onClick,
    hidePhoto = _ref.hidePhoto,
    imageUrl = _ref.imageUrl,
    variant = _ref.variant,
    mode = _ref.mode,
    rest = _objectWithoutProperties(_ref, ["firstName", "lastName", "company", "occupation", "location", "href", "quote", "onClick", "hidePhoto", "imageUrl", "variant", "mode"]);
  var isVerticleLayout = variant === 'vertical';
  var bottomText = useMemo(function () {
    if (company && location) return "@ ".concat(company, ", ").concat(location);
    if (!company && location) return "".concat(location);
    if (company && !location) return "@ ".concat(company);
    return '';
  }, [company, location]);
  var ariaLabel = "".concat(firstName, " ").concat(lastName, " ").concat(bottomText, ". ").concat(quote);
  var renderTestimonial = function renderTestimonial() {
    return /*#__PURE__*/_jsx(TestimonialCard, _objectSpread(_objectSpread({}, rest), {}, {
      p: 32,
      width: "100%",
      height: "100%",
      mode: mode,
      children: /*#__PURE__*/_jsxs(TestimonialContent, {
        variant: variant,
        children: [!hidePhoto && imageUrl && /*#__PURE__*/_jsx(TestimonialPicture, {
          "data-testid": "testimonial-photo",
          src: imageUrl,
          alt: "testimonial"
        }), /*#__PURE__*/_jsxs(Box, {
          my: {
            _: 'auto',
            md: isVerticleLayout && !hidePhoto ? 'auto' : 0
          },
          mr: 32,
          gridArea: !hidePhoto ? 'byline' : 'avatar',
          children: [/*#__PURE__*/_jsx(Text, {
            variant: "p-small",
            as: "p",
            fontFamily: "accent",
            children: lastName ? "".concat(firstName, " ").concat(lastName[0], ".") : "".concat(firstName)
          }), /*#__PURE__*/_jsx(Text, {
            variant: "p-small",
            as: "p",
            fontFamily: "accent",
            children: occupation
          }), !!bottomText && /*#__PURE__*/_jsx(Text, {
            variant: "p-small",
            as: "p",
            fontFamily: "accent",
            children: bottomText
          })]
        }), /*#__PURE__*/_jsx(QuoteArt, {
          alt: "",
          src: darkQuotes
        }), /*#__PURE__*/_jsx(Text, {
          pt: {
            _: 0,
            md: isVerticleLayout ? 0 : 4
          },
          pr: {
            _: 16,
            sm: 0
          },
          gridArea: "text",
          variant: "title-md",
          as: "p",
          children: quote
        })]
      })
    }));
  };
  var renderTestimonialWithAnchor = function renderTestimonialWithAnchor() {
    return /*#__PURE__*/_jsx(Anchor, {
      display: rest.display,
      "data-testid": "testimonial-link",
      href: href,
      variant: "interface",
      onClick: onClick,
      "aria-label": ariaLabel,
      children: renderTestimonial()
    });
  };
  return href ? renderTestimonialWithAnchor() : renderTestimonial();
};