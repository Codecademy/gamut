import {
  Alert,
  Box,
  Card,
  FillButton,
  FlexBox,
  GridBox,
  IconButton,
  List,
  ListRow,
  Markdown,
  StrokeButton,
  Text,
  TextButton,
} from '@codecademy/gamut';
import {
  MiniArrowLeftIcon,
  MiniArrowRightIcon,
  MiniRibbonIcon,
  SearchIcon,
} from '@codecademy/gamut-icons';
import type { Meta, StoryObj } from '@storybook/react';

const meta: Meta = {
  title: 'Foundations/RTL',
  parameters: {
    docs: {
      description: {
        component:
          'Examples demonstrating Gamut components with Right-to-Left (RTL) languages like Arabic.',
      },
    },
  },
};

export default meta;
type Story = StoryObj;

// Arabic text samples
const arabicText = {
  heading: 'ูุฑุญุจุงู ุจู ูู ููุตุฉ Codecademy',
  paragraph:
    'ูุฐุง ูุซุงู ุนูู ููููุฉ ุนูู ููููุงุช Gamut ูุน ุงููุตูุต ุงูุนุฑุจูุฉ. ุงููุต ุงูุนุฑุจู ูููุฑุฃ ูู ุงููููู ุฅูู ุงููุณุงุฑุ ููุง ูุชุทูุจ ูุนุงูุฌุฉ ุฎุงุตุฉ ููุชุฎุทูุท ูุงูุชุตููู.',
  button: 'ุงููุฑ ููุง',
  listItem1: 'ุชุนูู ุงูุจุฑูุฌุฉ',
  listItem2: 'ุชุทููุฑ ุงูููุงุฑุงุช',
  listItem3: 'ุจูุงุก ุงููุดุงุฑูุน',
  alert: 'ูุฐู ุฑุณุงูุฉ ุชูุจูู ุจุงููุบุฉ ุงูุนุฑุจูุฉ',
  cardTitle: 'ุจุทุงูุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ',
  cardContent:
    'ูุญุชูู ุงูุจุทุงูุฉ ููุถุญ ููููุฉ ุนุฑุถ ุงููุตูุต ุงูุนุฑุจูุฉ ุจุดูู ุตุญูุญ ูู ููููุงุช Gamut.',
};

const RTLContainer: React.FC<{ children: React.ReactNode; title: string }> = ({
  children,
  title,
}) => (
  <Box border={1} borderColor="gray-300" borderRadius="md" p={24}>
    <Text as="h3" fontSize={18} fontWeight="bold" mb={16}>
      {title}
    </Text>
    <Box dir="rtl">{children}</Box>
  </Box>
);

export const Typography: Story = {
  render: () => (
    <RTLContainer title="Typography Components">
      <FlexBox column gap={16}>
        <Text as="h1" fontSize={26} fontWeight="bold">
          {arabicText.heading}
        </Text>
        <Text fontSize={16} lineHeight="base">
          {arabicText.paragraph}
        </Text>
        <Text color="text-secondary" fontSize={14}>
          ูุต ุฃุตุบุฑ ุจุงููุบุฉ ุงูุนุฑุจูุฉ
        </Text>
      </FlexBox>
    </RTLContainer>
  ),
};

export const Buttons: Story = {
  render: () => (
    <RTLContainer title="Button Components">
      <FlexBox gap={16} wrap>
        <FillButton variant="primary">{arabicText.button}</FillButton>
        <StrokeButton variant="secondary">{arabicText.button}</StrokeButton>
        <TextButton>{arabicText.button}</TextButton>
        <IconButton icon={SearchIcon} tip="ุจุญุซ" />
      </FlexBox>
    </RTLContainer>
  ),
};

export const ButtonsWithIcons: Story = {
  render: () => (
    <RTLContainer title="Buttons with Icons (RTL-aware)">
      <FlexBox gap={16} wrap>
        <FillButton icon={MiniArrowLeftIcon} iconPosition="left">
          ุฒุฑ ูุน ุฃููููุฉ ูุณุงุฑ
        </FillButton>
        <StrokeButton icon={MiniArrowRightIcon} iconPosition="right">
          ุฒุฑ ูุน ุฃููููุฉ ูููู
        </StrokeButton>
        <TextButton icon={MiniRibbonIcon} iconPosition="left">
          ุฒุฑ ูุต ูุน ุฃููููุฉ
        </TextButton>
      </FlexBox>
    </RTLContainer>
  ),
};

export const Lists: Story = {
  render: () => (
    <RTLContainer title="List Components">
      <List>
        <ListRow>{arabicText.listItem1}</ListRow>
        <ListRow>{arabicText.listItem2}</ListRow>
        <ListRow>{arabicText.listItem3}</ListRow>
      </List>
    </RTLContainer>
  ),
};

export const Cards: Story = {
  render: () => (
    <RTLContainer title="Card Components">
      <Card>
        <Text as="h3" fontSize={18} fontWeight="bold" mb={12}>
          {arabicText.cardTitle}
        </Text>
        <Text fontSize={16}>{arabicText.cardContent}</Text>
      </Card>
    </RTLContainer>
  ),
};

export const Alerts: Story = {
  render: () => (
    <RTLContainer title="Alert Components">
      <FlexBox column gap={16}>
        <Alert type="general">{arabicText.alert}</Alert>
        <Alert type="success">ุชู ุจูุฌุงุญ! ูุฐู ุฑุณุงูุฉ ูุฌุงุญ ุจุงููุบุฉ ุงูุนุฑุจูุฉ.</Alert>
        <Alert type="notice">
          ุชุญุฐูุฑ: ูุฐุง ูุซุงู ุนูู ุฑุณุงูุฉ ุชุญุฐูุฑ ุจุงููุบุฉ ุงูุนุฑุจูุฉ.
        </Alert>
        <Alert type="error">
          ุฎุทุฃ: ุญุฏุซ ุฎุทุฃ ูุง. ูุฐู ุฑุณุงูุฉ ุฎุทุฃ ุจุงููุบุฉ ุงูุนุฑุจูุฉ.
        </Alert>
      </FlexBox>
    </RTLContainer>
  ),
};

export const Layouts: Story = {
  render: () => (
    <RTLContainer title="Layout Components">
      <FlexBox column gap={16}>
        <Text fontSize={16} fontWeight="bold">
          FlexBox Layout:
        </Text>
        <FlexBox gap={16} wrap>
          <Box bg="blue-0" borderRadius="sm" p={16}>
            <Text>ุนูุตุฑ 1</Text>
          </Box>
          <Box bg="green-0" borderRadius="sm" p={16}>
            <Text>ุนูุตุฑ 2</Text>
          </Box>
          <Box bg="pink-0" borderRadius="sm" p={16}>
            <Text>ุนูุตุฑ 3</Text>
          </Box>
        </FlexBox>

        <Text fontSize={16} fontWeight="bold" mt={16}>
          GridBox Layout:
        </Text>
        <GridBox gap={16} gridTemplateColumns="repeat(3, 1fr)">
          <Box bg="red-0" borderRadius="sm" p={16}>
            <Text>ุดุจูุฉ 1</Text>
          </Box>
          <Box bg="yellow-0" borderRadius="sm" p={16}>
            <Text>ุดุจูุฉ 2</Text>
          </Box>
          <Box bg="pink-0" borderRadius="sm" p={16}>
            <Text>ุดุจูุฉ 3</Text>
          </Box>
        </GridBox>
      </FlexBox>
    </RTLContainer>
  ),
};

export const MarkdownExample: Story = {
  render: () => (
    <RTLContainer title="Markdown Component">
      <Markdown
        text={`
# ุนููุงู ุฑุฆูุณู ุจุงููุบุฉ ุงูุนุฑุจูุฉ

ูุฐุง ูุซุงู ุนูู **ูุต ุนุฑุจู** ูู ูููู Markdown.

## ูุงุฆูุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ:
- ุนูุตุฑ ุงููุงุฆูุฉ ุงูุฃูู
- ุนูุตุฑ ุงููุงุฆูุฉ ุงูุซุงูู
- ุนูุตุฑ ุงููุงุฆูุฉ ุงูุซุงูุซ

### ุฑุงุจุท
[ุฑุงุจุท ุฅูู Codecademy](https://www.codecademy.com)

> ูุฐุง ุงูุชุจุงุณ ุจุงููุบุฉ ุงูุนุฑุจูุฉ ููุถุญ ููููุฉ ุนูู ูููู Markdown ูุน ุงููุตูุต ุงูุนุฑุจูุฉ.
        `}
      />
    </RTLContainer>
  ),
};

export const MixedContent: Story = {
  render: () => (
    <RTLContainer title="Mixed Arabic and English Content">
      <FlexBox column gap={16}>
        <Text fontSize={16}>Mixed content: ูุฑุญุจุงู Hello ุงูุนุฑุจูุฉ English</Text>
        <Text fontSize={16}>Numbers: ูกูขูฃ 456 ูงูจูฉ</Text>
        <Text fontSize={16}>
          Mixed direction: ูุฑุญุจุงู Hello ุงูุนุฑุจูุฉ English ูุฑุญุจุงู
        </Text>
        <FillButton variant="primary">Submit / ุฅุฑุณุงู</FillButton>
      </FlexBox>
    </RTLContainer>
  ),
};

export const CompleteExample: Story = {
  render: () => (
    <Box p={24}>
      <Text as="h2" fontSize={26} fontWeight="bold" mb={24}>
        Complete RTL Example - Arabic Interface
      </Text>

      <FlexBox column dir="rtl" gap={24}>
        {/* Header */}
        <Box bg="blue-0" borderRadius="md" p={16}>
          <Text as="h1" color="blue-500" fontSize={18} fontWeight="bold">
            {arabicText.heading}
          </Text>
          <Text fontSize={16} mt={8}>
            {arabicText.paragraph}
          </Text>
        </Box>

        {/* Navigation */}
        <FlexBox gap={16} wrap>
          <FillButton size="small" variant="primary">
            ุงูุฑุฆูุณูุฉ
          </FillButton>
          <StrokeButton size="small" variant="secondary">
            ุงูุฏูุฑุงุช
          </StrokeButton>
          <TextButton size="small">ุงูููู ุงูุดุฎุตู</TextButton>
          <IconButton icon={SearchIcon} tip="ุจุญุซ" />
        </FlexBox>

        {/* Content Cards */}
        <GridBox
          gap={16}
          gridTemplateColumns="repeat(auto-fit, minmax(300px, 1fr))"
        >
          <Card>
            <Text as="h3" fontSize={16} fontWeight="bold" mb={12}>
              ุชุนูู ุงูุจุฑูุฌุฉ
            </Text>
            <Text fontSize={14} mb={16}>
              ุงุจุฏุฃ ุฑุญูุชู ูู ุชุนูู ุงูุจุฑูุฌุฉ ูุน ุฏูุฑุงุชูุง ุงูุชูุงุนููุฉ
            </Text>
            <FillButton size="small" variant="primary">
              ุงุจุฏุฃ ุงูุขู
            </FillButton>
          </Card>

          <Card>
            <Text as="h3" fontSize={16} fontWeight="bold" mb={12}>
              ุชุทููุฑ ุงูููุงุฑุงุช
            </Text>
            <Text fontSize={14} mb={16}>
              ุทูุฑ ููุงุฑุงุชู ุงูุชูููุฉ ูุน ูุดุงุฑูุน ุนูููุฉ
            </Text>
            <StrokeButton size="small" variant="secondary">
              ุนุฑุถ ุงูุฏูุฑุงุช
            </StrokeButton>
          </Card>
        </GridBox>

        {/* Alert */}
        <Alert type="general">
          ๐ก ูุตูุญุฉ: ููููู ุชุบููุฑ ูุบุฉ ุงููุงุฌูุฉ ูู ุฅุนุฏุงุฏุงุช ุงูุญุณุงุจ
        </Alert>

        {/* List */}
        <Box>
          <Text as="h3" fontSize={16} fontWeight="bold" mb={12}>
            ุงูููุฒุงุช ุงูุฑุฆูุณูุฉ:
          </Text>
          <List>
            <ListRow>ุฏูุฑุงุช ุชูุงุนููุฉ ุจุงููุบุฉ ุงูุนุฑุจูุฉ</ListRow>
            <ListRow>ูุดุงุฑูุน ุนูููุฉ ูุชุทุจูู ูุง ุชุนููุชู</ListRow>
            <ListRow>ุดูุงุฏุงุช ูุนุชูุฏุฉ ุนูุฏ ุฅููุงู ุงูุฏูุฑุงุช</ListRow>
            <ListRow>ูุฌุชูุน ูู ุงููุชุนูููู ูุงููุทูุฑูู</ListRow>
          </List>
        </Box>
      </FlexBox>
    </Box>
  ),
};
