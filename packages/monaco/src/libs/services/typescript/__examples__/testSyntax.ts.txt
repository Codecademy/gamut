// Variables
var num = 1;
let str = 'test';
const bool = true;
const arr = [1, 'true', { val: true }];
const ob = { val: true };
const nestob = { val: { nested: true } };
const a = require('ase');
import asdf from 'asdfs';
var f = null;
var s = undefined;
var b = Infinity;
var n = -Infinity;
Math.random();
a << 2;
3 >> 1;
debugger;
// Functions
function myFunction(a, b) {
  return a * b;
}
var x = function (a, b) {
  return a * b;
};
const x = (x, y) => x * y;
const x = () => {};
const funcObj = {
  func1: () => {
    var b = 1;
  },
  func2() {
    var b = 1;
  },
  func3: function () {
    return a * b;
  },
};
function funcWithDefaults(param1, param2 = true, param3 = { num }) {
  return true;
}
function funcWithNests() {
  if (bool === true) {
    console.log(num + str);
  } else {
    // do nothing
  }
  for (var i = 0; i < 10; i++) {
    console.log({ a: 1 });
  }
}
// Object properties
const obj = {
  prop1: 'a',
  prop2: [1, 2],
  func1: () => {
    var b = 1;
  },
  prop3: num,
  func2(foo) {
    return 'test';
  },
  set func3(foo) {
    return foo;
  },
  prop4: true,
};
const nestedObjects = function () {
  const obj = { foo: 1 };
  const obj2 = {
    bar() {
      return false;
    },
    baz: () => {
      return { lol };
    },
  };
  const { def } = obj3;
  if (true) {
    return {
      foo: 'bar',
    };
  }
};
// Class properties
class Test {
  constructor() {
    this.foo = 'foo';
  }
  static myName() {}
  get foo() {
    return this.foo;
  }
  set foo(bar) {
    this.foo = bar;
  }
  foobar() {
    return this.foo + 'bar';
  }
}
const basicRegex = /test/;
const charClasses = /\w\W\d\D\s\S\n\t\r\f\\\-\{\}/;
const ranges = /[a-zA-Z]\w*/;
const flags = /test/gimsuy;
const url = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)\w+(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
<a my-attribute-name={!true} href="http://www.example.com">
  Welcome to t()he Web()
</a>;
const title = <h1 id="title">Introduction to React.js: Part I</h1>;
const panda = (
  <img
    src="images/panda.jpg"
    alt="panda"
    data-oh
    data-wat={false}
    data-sizes={[true, 3, Infinity, NaN, { wat: true }]}
    width="500px"
    height="500px"
  />
);
const nestedJsx = (
  <div>
    <h1>
      <div>
        <Component />
      </div>
    </h1>
    <p>
      <span>{Math.PI.toFixed(20)}</span>
    </p>
    <p>My Component is Cool</p>
  </div>
);
ReactDOM.render(<h1>Hello world</h1>, document.getElementById('app'));

// Test closing delimiters in class statements and if statements
// with property attributes in var definitions
class LinkedList {
  constructor() {
    this.head = null;
  }

  addToHead(data) {
    const newHead = new Node(data);
    const currentHead = this.head;
    this.head = newHead;
    if (currentHead) {
      this.head.setNextNode(currentHead);
    }
  }

  addToTail(data) {
    let x = this.head;
    if (!tail) {
      this.head = new Node(data);
    } else {
      while (tail.getNextNode() !== null) {
        tail = tail.getNextNode();
      }
      tail.setNextNode(new Node(data));
    }
  }

  removeHead() {
    const removedHead = this.head;
    if (!removedHead) {
      return;
    }
    this.head = removedHead.getNextNode();
    return removedHead.data;
  }
}

// Test bracket highlighting when using dot syntax attributes inside
// array brackets
graph.vertices.forEach((vertex) => {
  distances[vertex.data] = Infinity;
  previous[vertex.data] = null;
});

//Test that loop syntax is correct when user fails to add space between < and variable in loops.
function string(arr) {
  var x = b ? 'String' : { test: 123 };
  const newString = 'string';
  for(let i = 0; i <newString.length; i++) {
    console.log(i);
  }
}

const something = (num) => {
  while (i <num) {
    console.log(num);
    i--;
  }
};

const myComponent = <a test="prop">JSX text goes here</a>;

//Test bracket (and other) highlighting when user unreliably uses semi-colons
function string(arr) {
  var x = b ? 'String' : { test: 123 };
  const newString = 'string'
  for (let i = 0; i <= newString.length; i++) {
    console.log(arr[i])
  }
}

const arrow = (variable) => {
  const newString = 'string'
  let number = 1;
  while (number > 10) {
    console.log(variable);
    number++
  }
  return false;
}

//tests that while + for keywords don't trigger loopDefinition accidentally

let button = document.getElementById('fortuneButton');
let fortune = document.getElementById('fortune');

function fortuneSelector(){
  let randomFortune = Math.floor(Math.random() * fortunes.length);
  return fortunes[randomFortune];
}
const whileSelector = () => {
  let randomWhile = Math.floor(Math.random() * whiles.length);
  return whiles[randomWhile];
}

//tests that default function variable declaration does not catch the equals in =>

const messageReducer = (state = '', action) => {
  if (action.type === 'NEW_MESSAGE') {
    return action.payload;
  } else {
    return state;
  }
}

const store = createStore(messageReducer, "")