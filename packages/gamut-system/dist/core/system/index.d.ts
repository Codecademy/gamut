import { AbstractTheme, PropertyConfig, Handler, UnionToIntersection, ThematicScaleValue, GetAltProps, ResponsiveProp } from '../../types/system';
import * as BaseProps from '../../props';
import { CSSObject } from '@emotion/core';
export declare const system: <Config extends Record<string, Record<string, PropertyConfig<Theme>>>, Theme extends AbstractTheme>(config?: Config | undefined) => {
    properties: UnionToIntersection<{ [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
        handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
        /** All possible prop type signatures  */
        props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
    }; }[keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]["handlers"]>;
    variant: <Variants extends Record<string, UnionToIntersection<Parameters<{ [PropGroup_1 in keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
        handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
        /** All possible prop type signatures  */
        props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
    }; }]: Handler<{ [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
        handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
        /** All possible prop type signatures  */
        props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
    }; }[PropGroup_1]["props"][keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
        handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
        /** All possible prop type signatures  */
        props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
    }; }[PropGroup_1]["props"]]>; }[keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]>[0]>> | {
        key: string;
        variants: Record<string, UnionToIntersection<Parameters<{ [PropGroup_1 in keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
            handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
            /** All possible prop type signatures  */
            props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
        }; }]: Handler<{ [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
            handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
            /** All possible prop type signatures  */
            props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
        }; }[PropGroup_1]["props"][keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
            handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
            /** All possible prop type signatures  */
            props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
        }; }[PropGroup_1]["props"]]>; }[keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]>[0]>>;
    }>(config: Variants) => (props: Partial<Record<Variants extends {
        key: string;
        variants: Record<string, UnionToIntersection<Parameters<{ [PropGroup_1 in keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
            handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
            /** All possible prop type signatures  */
            props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
        }; }]: Handler<{ [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
            handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
            /** All possible prop type signatures  */
            props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
        }; }[PropGroup_1]["props"][keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
            handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
            /** All possible prop type signatures  */
            props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
        }; }[PropGroup_1]["props"]]>; }[keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]>[0]>>;
    } ? Variants["key"] : "variant", Variants extends Record<string, UnionToIntersection<Parameters<{ [PropGroup_1 in keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
        handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
        /** All possible prop type signatures  */
        props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
    }; }]: Handler<{ [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
        handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
        /** All possible prop type signatures  */
        props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
    }; }[PropGroup_1]["props"][keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
        handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
        /** All possible prop type signatures  */
        props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
    }; }[PropGroup_1]["props"]]>; }[keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]>[0]>> ? keyof Variants : keyof Variants["variants"]>> & {
        theme?: Theme | undefined;
    }) => CSSObject;
} & { [PropGroup_2 in keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
    handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
    /** All possible prop type signatures  */
    props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
}; }]: Handler<{ [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
    handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
    /** All possible prop type signatures  */
    props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
}; }[PropGroup_2]["props"][keyof { [PropGroup in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)]: {
    handlers: { [Property in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Handler<Partial<Record<Property | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property]>>>>>; };
    /** All possible prop type signatures  */
    props: { [Property_1 in keyof (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup]]: Partial<Record<Property_1 | GetAltProps<(Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>, ResponsiveProp<ThematicScaleValue<Theme, (Config extends {} ? typeof BaseProps & Config : typeof BaseProps)[PropGroup][Property_1]>>>>; };
}; }[PropGroup_2]["props"]]>; };
