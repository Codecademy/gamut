{"version":3,"sources":["../src/loaders.js"],"names":[],"mappings":";;;;;;;;;AACA;;;;;;AAEA,IAAM,oBAAoB,MAA1B;AACA,IAAM,oBAAoB,YAA1B;;;AAGA,IAAM,uBAAuB,mDAA7B;AACA,IAAM,mBAAoB,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA1B,GAA0C,EAA1C,GAA+C,oBAAxE;;AAEA,IAAM,gEAA8D,gBAA9D,mCAAN;AACA,IAAM,cAAc,qCAApB;;AAEA,IAAM,mBAAiB,iBAAjB,GAAqC,YAA3C;AACA,IAAM,mBAAiB,iBAAjB,GAAqC,YAA3C;;AAEA,IAAM,kBAAgB,iBAAhB,GAAoC,WAA1C;AACA,IAAM,kBAAgB,iBAAhB,GAAoC,WAA1C;;AAEO,IAAI,0BAAS,SAAT,MAAS,CAAC,OAAD,EAAa;AAC/B,SAAO,UAAC,IAAD,EAAU;AACf,wBAAW,OAAX,EAAuB,IAAvB;AACD,GAFD;AAGD,CAJM;;AAMP,IAAI,UAAU;AACZ,SAAO,OAAO;AACZ,UAAM,QADM;AAEZ,YAAQ;AAFI,GAAP,CADK;AAKZ,OAAK;AACH,eAAS,OAAO;AACd,YAAM,SADQ;AAEd,wBAAgB;AAFF,KAAP,CADN;AAKH,eAAW,OAAO;AAChB,YAAM,SADU;AAEhB,cAAQ,sCAAkB,OAAlB,CAA0B;AAChC,0BAAkB,OADc;AAEhC,gBAAQ;AAFwB,OAA1B;AAFQ,KAAP,CALR;AAYH,YAAQ,OAAO;AACb,YAAM,SADO;AAEb,cAAQ;AAFK,KAAP;AAZL,GALO;AAsBZ,QAAM;AACJ,eAAS,OAAO;AACd,YAAM,UADQ;AAEd,wBAAgB;AAFF,KAAP,CADL;AAKJ,eAAW,OAAO;AAChB,YAAM,UADU;AAEhB,cAAQ,sCAAkB,OAAlB,CAA0B;AAChC,0BAAkB,OADc;AAEhC,gBAAQ;AAFwB,OAA1B;AAFQ,KAAP,CALP;AAYJ,YAAQ,OAAO;AACb,YAAM,UADO;AAEb,cAAQ;AAFK,KAAP;AAZJ,GAtBM;AAuCZ,QAAM,OAAO;AACX,UAAM,UADK;AAEX,YAAQ;AAFG,GAAP;AAvCM,CAAd;;qBA6Ce,O","file":"loaders.js","sourcesContent":["\nimport ExtractTextPlugin from 'extract-text-webpack-plugin';\n\nconst CSS_CLIENT_PREFIX = '!css';\nconst CSS_SERVER_PREFIX = 'css/locals';\n\n// Only use debuggable class names in dev\nconst DEV_CSS_MODULE_IDENT = '&localIdentName=[name]__[local]___[hash:base64:5]';\nconst CSS_MODULE_IDENT = (process.env.NODE_ENV === 'production') ? '' : DEV_CSS_MODULE_IDENT;\n\nconst SCSS_OPTIONS = `?-minimize&sourceMap&modules&importLoaders=1${CSS_MODULE_IDENT}!postcss-loader!sass?sourceMap`;\nconst CSS_OPTIONS = '?-minimize&sourceMap!postcss-loader';\n\nconst SCSS_CLIENT = `${CSS_CLIENT_PREFIX}${SCSS_OPTIONS}`;\nconst SCSS_SERVER = `${CSS_SERVER_PREFIX}${SCSS_OPTIONS}`;\n\nconst CSS_CLIENT = `${CSS_CLIENT_PREFIX}${CSS_OPTIONS}`;\nconst CSS_SERVER = `${CSS_SERVER_PREFIX}${CSS_OPTIONS}`;\n\nexport let loader = (options) => {\n  return (opts) => {\n    return {...options, ...opts};\n  };\n};\n\nlet loaders = {\n  babel: loader({\n    test: /\\.js?$/,\n    loader: 'babel?cacheDirectory'\n  }),\n  css: {\n    default: loader({\n      test: /\\.css?$/,\n      loader: `style${CSS_CLIENT}`\n    }),\n    extracted: loader({\n      test: /\\.css?$/,\n      loader: ExtractTextPlugin.extract({\n        notExtractLoader: 'style',\n        loader: CSS_CLIENT\n      })\n    }),\n    server: loader({\n      test: /\\.css?$/,\n      loader: CSS_SERVER\n    })\n  },\n  scss: {\n    default: loader({\n      test: /\\.scss?$/,\n      loader: `style${SCSS_CLIENT}`\n    }),\n    extracted: loader({\n      test: /\\.scss?$/,\n      loader: ExtractTextPlugin.extract({\n        notExtractLoader: 'style',\n        loader: SCSS_CLIENT\n      })\n    }),\n    server: loader({\n      test: /\\.scss?$/,\n      loader: SCSS_SERVER\n    })\n  },\n  json: loader({\n    test: /\\.json?$/,\n    loader: 'json'\n  })\n};\n\nexport default loaders;\n"]}