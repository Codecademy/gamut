{"version":3,"sources":["../src/loaders.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAGA,IAAM,iBAAiB,GAAG,MAAM,CAAC;AACjC,IAAM,iBAAiB,GAAG,YAAY,CAAC;;AAEvC,IAAM,YAAY,GAAG,8GAA8G,CAAC;AACpI,IAAM,WAAW,GAAG,8BAA8B,CAAC;;AAEnD,IAAM,WAAW,QAAM,iBAAiB,GAAG,YAAY,AAAE,CAAC;AAC1D,IAAM,WAAW,QAAM,iBAAiB,GAAG,YAAY,AAAE,CAAC;;AAE1D,IAAM,UAAU,QAAM,iBAAiB,GAAG,WAAW,AAAE,CAAC;AACxD,IAAM,UAAU,QAAM,iBAAiB,GAAG,WAAW,AAAE,CAAC;;AAEjD,IAAI,MAAM,WAAN,MAAM,GAAG,SAAT,MAAM,CAAY,OAAO,EAAE;AACpC,SAAO,UAAC,IAAI;WAAK,iBAAE,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;GAAA,CAAC;CAC9C,CAAC;;AAEF,IAAI,OAAO,GAAG;AACZ,OAAK,EAAE,MAAM,CAAC;AACZ,QAAI,EAAE,QAAQ;AACd,UAAM,EAAE,sBAAsB;GAC/B,CAAC;AACF,KAAG,EAAE;AACH,WAAO,EAAE,MAAM,CAAC;AACd,UAAI,EAAE,SAAS;AACf,YAAM,YAAU,UAAU,AAAE;KAC7B,CAAC;AACF,aAAS,EAAE,MAAM,CAAC;AAChB,UAAI,EAAE,SAAS;AACf,YAAM,EAAE,mCAAkB,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC;KACvD,CAAC;AACF,UAAM,EAAE,MAAM,CAAC;AACb,UAAI,EAAE,SAAS;AACf,YAAM,EAAE,UAAU;KACnB,CAAC;GACH;AACD,MAAI,EAAE;AACJ,WAAO,EAAE,MAAM,CAAC;AACd,UAAI,EAAE,UAAU;AAChB,YAAM,YAAU,WAAW,AAAE;KAC9B,CAAC;AACF,aAAS,EAAE,MAAM,CAAC;AAChB,UAAI,EAAE,UAAU;AAChB,YAAM,EAAE,mCAAkB,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC;KACxD,CAAC;AACF,UAAM,EAAE,MAAM,CAAC;AACb,UAAI,EAAE,UAAU;AAChB,YAAM,EAAE,WAAW;KACpB,CAAC;GACH;AACD,MAAI,EAAE,MAAM,CAAC;AACX,QAAI,EAAE,UAAU;AAChB,UAAM,EAAE,MAAM;GACf,CAAC;CACH,CAAC;;kBAEa,OAAO","file":"loaders.js","sourcesContent":["import _ from 'lodash';\nimport ExtractTextPlugin from 'extract-text-webpack-plugin';\n\nconst CSS_CLIENT_PREFIX = '!css';\nconst CSS_SERVER_PREFIX = 'css/locals';\n\nconst SCSS_OPTIONS = '?-minimize&sourceMap&modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!sass?sourceMap';\nconst CSS_OPTIONS = '?-minimize&modules&sourceMap';\n\nconst SCSS_CLIENT = `${CSS_CLIENT_PREFIX}${SCSS_OPTIONS}`;\nconst SCSS_SERVER = `${CSS_SERVER_PREFIX}${SCSS_OPTIONS}`;\n\nconst CSS_CLIENT = `${CSS_CLIENT_PREFIX}${CSS_OPTIONS}`;\nconst CSS_SERVER = `${CSS_SERVER_PREFIX}${CSS_OPTIONS}`;\n\nexport let loader = function(options) {\n  return (opts) => _.extend({}, options, opts);\n};\n\nlet loaders = {\n  babel: loader({\n    test: /\\.js?$/,\n    loader: 'babel?cacheDirectory'\n  }),\n  css: {\n    default: loader({\n      test: /\\.css?$/,\n      loader: `style${CSS_CLIENT}`\n    }),\n    extracted: loader({\n      test: /\\.css?$/,\n      loader: ExtractTextPlugin.extract('style', CSS_CLIENT)\n    }),\n    server: loader({\n      test: /\\.css?$/,\n      loader: CSS_SERVER\n    })\n  },\n  scss: {\n    default: loader({\n      test: /\\.scss?$/,\n      loader: `style${SCSS_CLIENT}`\n    }),\n    extracted: loader({\n      test: /\\.scss?$/,\n      loader: ExtractTextPlugin.extract('style', SCSS_CLIENT)\n    }),\n    server: loader({\n      test: /\\.scss?$/,\n      loader: SCSS_SERVER\n    })\n  },\n  json: loader({\n    test: /\\.json?$/,\n    loader: 'json'\n  })\n};\n\nexport default loaders;\n"]}