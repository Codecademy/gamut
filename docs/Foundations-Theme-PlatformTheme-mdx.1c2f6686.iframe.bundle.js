"use strict";(self.webpackChunkgamut_repo=self.webpackChunkgamut_repo||[]).push([[2698],{"./packages/styleguide/src/lib/Foundations/Theme/PlatformTheme.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent,parameters:()=>parameters});var platformElements_namespaceObject={};__webpack_require__.r(platformElements_namespaceObject),__webpack_require__.d(platformElements_namespaceObject,{PlatformDarkModeTable:()=>PlatformDarkModeTable,PlatformLightModeTable:()=>PlatformLightModeTable,platformColor:()=>platformColor,platformDarkMode:()=>platformDarkMode,platformLightMode:()=>platformLightMode,platformSwatch:()=>platformSwatch});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),components=__webpack_require__("./packages/styleguide/.storybook/components/index.tsx"),shared_elements=__webpack_require__("./packages/styleguide/src/lib/Foundations/shared/elements.tsx"),src=__webpack_require__("./packages/gamut-styles/src/index.ts");const platformSwatch={rows:Object.entries(src.g).map((_ref=>{let[id,value]=_ref;return{id,hexes:value}})),columns:[shared_elements.PROP_COLUMN,{...shared_elements.PATH_COLUMN,render:_ref2=>{let{id,hexes}=_ref2;return(0,jsx_runtime.jsxs)(components.Cy,{children:["theme.colors[`",id,"-",Object.keys(hexes)[0],"`]"]})}},{key:"swatch",name:"Swatch",size:"fill",render:_ref3=>{let{hexes}=_ref3;return(0,jsx_runtime.jsx)(components.wC,{colors:hexes})}}]},platformColor={rows:Object.entries(src.IU).map((_ref4=>{let[id,value]=_ref4;return{id,hex:value}})),columns:[shared_elements.PROP_COLUMN,{...shared_elements.PATH_COLUMN,render:_ref5=>{let{id}=_ref5;return(0,jsx_runtime.jsxs)(components.Cy,{children:["theme.colors.",id]})}},{key:"swatch",name:"Swatch",size:"fill",render:_ref6=>{let{hex}=_ref6;return(0,jsx_runtime.jsx)(components.wC,{colors:{hex}})}}]},platformLightMode={rows:Object.entries(src.TA.modes.light).map((_ref7=>{let[id,value]=_ref7;return{id,hex:value}})),columns:[{...shared_elements.PROP_COLUMN,size:"lg"},{...shared_elements.PATH_COLUMN,render:_ref8=>{let{id}=_ref8;return(0,jsx_runtime.jsxs)(components.Cy,{children:["theme.colors.",id]})}},{key:"swatch",name:"Swatch",size:"fill",render:_ref9=>{let{hex}=_ref9;return(0,jsx_runtime.jsx)(components.wC,{colors:{hex:src.TA.colors[hex]}})}}]},platformDarkMode={rows:Object.entries(src.TA.modes.dark).map((_ref10=>{let[id,value]=_ref10;return{id,hex:value}})),columns:[{...shared_elements.PROP_COLUMN,size:"lg"},{...shared_elements.PATH_COLUMN,render:_ref11=>{let{id}=_ref11;return(0,jsx_runtime.jsxs)(components.Cy,{children:["theme.colors.",id]})}},{key:"swatch",name:"Swatch",size:"fill",render:_ref12=>{let{hex}=_ref12;return(0,jsx_runtime.jsx)(components.wC,{colors:{hex:src.TA.colors[hex]}})}}]},PlatformLightModeTable=()=>(0,jsx_runtime.jsx)(src.VS,{bg:"white",children:(0,jsx_runtime.jsx)(components.wI,{bg:!1,...platformLightMode})}),PlatformDarkModeTable=()=>(0,jsx_runtime.jsx)(src.VS,{bg:"navy",children:(0,jsx_runtime.jsx)(components.wI,{bg:!1,...platformDarkMode})}),parameters={title:"Platform Theme",subtitle:"Codecademy Platform Theme used within the Learning Environment",status:"current",source:{repo:"gamut-styles",githubLink:"https://github.com/Codecademy/gamut/blob/main/packages/gamut-styles/src/themes"}};function _createMdxContent(props){const _components={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,lib.R)(),...props.components};return platformElements_namespaceObject||_missingMdxReference("TABLES",!1),PlatformDarkModeTable||_missingMdxReference("TABLES.PlatformDarkModeTable",!0),PlatformLightModeTable||_missingMdxReference("TABLES.PlatformLightModeTable",!0),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{title:"Foundations/Theme/PlatformTheme"}),"\n",(0,jsx_runtime.jsx)(components.Rd,{...parameters}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The Platform Theme is a theme used within the Codecademy Learning Environment. It is built off of the Core Theme with special colors for the Learning Environment. For all other tokens not listed here, refer to the ",(0,jsx_runtime.jsx)(components.WS,{id:"Foundations/Theme/CoreTheme",children:"Core Theme"}),"."]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usage",children:"Usage"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["If you are using the Platform Theme via the Gamut theme provider in your app (i.e. ",(0,jsx_runtime.jsx)(_components.code,{children:"<GamutProvider theme={platformTheme}>"}),"), you can access the Platform Theme object via ",(0,jsx_runtime.jsx)(_components.code,{children:"theme"})," using our css-in-js utilities."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"import { css } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\n\nconst Box = styled.div(css({ bg: 'teal', p: 4 })); // our system props inherently use the current theme\n\nconst styles = styled.div`\n  blue: ${({ theme }) =>\n    theme.colors\n      .teal}; // theme here refers to the current theme, which is the platform theme\n`;\n"})}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["If you have to import the theme object from ",(0,jsx_runtime.jsx)(_components.code,{children:"@codecademy/gamut-styles"}),", you will need to import the ",(0,jsx_runtime.jsx)(_components.code,{children:"platformTheme"})," object, as ",(0,jsx_runtime.jsx)(_components.code,{children:"theme"})," references the Core Theme."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"import { css } from '@emotion/react';\nimport { platformTheme, theme } from '@codecademy/gamut-styles';\n\nconst myStyles = css`\n  color: ${platformTheme.colors.teal};\n`;\n\nconst notWorkingStyles = css`\n  color: ${theme.colors\n    .teal}; // teal does not exist in the Core Theme colors so this does not work\n`;\n"})}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["See ",(0,jsx_runtime.jsx)(components.WS,{id:"Foundations/Theme/About",children:"Theme/About"})," for more information on the theme object and how to use it."]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"color",children:"Color"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:[(0,jsx_runtime.jsx)(_components.strong,{children:"Key"}),": ",(0,jsx_runtime.jsx)(_components.code,{children:"colors"})]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["All current visual identity colors are available on the ",(0,jsx_runtime.jsx)(_components.code,{children:"colors"})," key on the Theme object, this includes named standard colors and their respective swatches. The Platform Theme contains all the colors from the Core Theme, as well as additional colors for the Learning Environment."]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"platform-colors",children:"Platform colors"}),"\n",(0,jsx_runtime.jsx)(components.wI,{...platformColor}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"platform-color-swatches",children:"Platform color swatches"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Swatch colors are accessible with a dashcase key ",(0,jsx_runtime.jsx)(_components.code,{children:"theme.colors['${color}-${weight}']"}),"."]}),"\n",(0,jsx_runtime.jsx)(components.wI,{...platformSwatch}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"standard-colors",children:"Standard colors"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Standard color atoms we select from in creating designs. All colors on Codecademy properties should adhere to these. Remember your accessibility contrast requirements too!"}),"\n",(0,jsx_runtime.jsx)(components.wI,{...shared_elements.color}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"solid-color-swatches",children:"Solid color swatches"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Swatch colors are accessible with a dashcase key ",(0,jsx_runtime.jsx)(_components.code,{children:"theme.colors['${color}-${weight}']"}),". Here's a list of all the solid swatches available."]}),"\n",(0,jsx_runtime.jsx)(components.wI,{...shared_elements.swatch}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"color-modes",children:"Color modes"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["We have 2 core color modes that we support: ",(0,jsx_runtime.jsx)(_components.code,{children:"light"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"dark"}),"."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Each color mode consists of a set of aliased color tokens that have a semantic meaning for how the color is used throughout our design system. For more on Color Modes please checkout the ",(0,jsx_runtime.jsx)(_components.a,{href:"/?path=/docs/foundations-colormode--page",children:"full color mode documentation"}),"."]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"light-mode",children:"Light mode"}),"\n",(0,jsx_runtime.jsx)(PlatformLightModeTable,{}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"dark-mode",children:"Dark mode"}),"\n",(0,jsx_runtime.jsx)(PlatformDarkModeTable,{})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}function _missingMdxReference(id,component){throw new Error("Expected "+(component?"component":"object")+" `"+id+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);