"use strict";(self.webpackChunkgamut_repo=self.webpackChunkgamut_repo||[]).push([[1646],{"./packages/gamut/src/Toggle/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>Toggle});var emotion_styled_base_browser_esm=__webpack_require__("./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"),src=__webpack_require__("./packages/gamut-styles/src/index.ts"),variance_src=__webpack_require__("./packages/variance/src/index.ts"),Box=__webpack_require__("./packages/gamut/src/Box/Box.tsx");const ToggleTrackVariants=(0,src.Ox)({base:{border:"none",cursor:"inherit",transition:"background-color 0.2s ease",borderColor:"primary",borderRadius:"full",position:"relative","&:after":{content:'""',transition:"opacity 0.2s ease",opacity:0,borderRadius:"inherit",position:"absolute",width:"calc(100% + 8px)",height:"calc(100% + 8px)",top:"-4px",left:"-4px",borderColor:"inherit",borderStyle:"solid",borderWidth:2},"&:focus, &:focus-within":{outline:`3px solid ${src.w4.colors.primary}`,outlineOffset:"2px"}},prop:"size",defaultVariant:"medium",variants:{medium:{height:"30px",width:"60px"},small:{height:"18px",width:"36px"}}}),ToggleTrackSystemProps=variance_src.GV.compose(src.qU.space,src.qU.color),ToggleTrack=(0,emotion_styled_base_browser_esm.A)("div",{target:"ei754w03",label:"ToggleTrack"})(ToggleTrackVariants,ToggleTrackSystemProps,""),Circle=(0,emotion_styled_base_browser_esm.A)(Box.a,{target:"ei754w02",label:"Circle"})({name:"gd1dzx-Circle",styles:"transition:all 0.5s cubic-bezier(0.23, 1, 0.32, 1);label:Circle;"},""),ToggleInput=(0,emotion_styled_base_browser_esm.A)("input",{target:"ei754w01",label:"ToggleInput"})(src.IR,""),ToggleLabelStates=(0,src.xP)({disabled:{cursor:"not-allowed",opacity:.5},labelRight:{flexDirection:"row-reverse"}}),ToggleLabel=(0,emotion_styled_base_browser_esm.A)("label",{target:"ei754w00",label:"ToggleLabel"})({name:"tenlrb-ToggleLabel",styles:"align-items:center;border:none;cursor:pointer;display:flex;width:fit-content;label:ToggleLabel;"},ToggleLabelStates,src.qU.space,"");try{ToggleTrack.displayName="ToggleTrack",ToggleTrack.__docgenInfo={description:"",displayName:"ToggleTrack",props:{as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:'false | "small" | "medium"'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/Toggle/elements.tsx#ToggleTrack"]={docgenInfo:ToggleTrack.__docgenInfo,name:"ToggleTrack",path:"packages/gamut/src/Toggle/elements.tsx#ToggleTrack"})}catch(__react_docgen_typescript_loader_error){}try{Circle.displayName="Circle",Circle.__docgenInfo={description:"",displayName:"Circle",props:{as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},context:{defaultValue:null,description:"",name:"context",required:!1,type:{name:"boolean"}},fit:{defaultValue:null,description:"",name:"fit",required:!1,type:{name:"boolean"}},"no-select":{defaultValue:null,description:"",name:"no-select",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"",name:"children",required:!1,type:{name:"((string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | ReactNode[]) & (string | ... 4 more ... | ReactPortal)) | null"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/Toggle/elements.tsx#Circle"]={docgenInfo:Circle.__docgenInfo,name:"Circle",path:"packages/gamut/src/Toggle/elements.tsx#Circle"})}catch(__react_docgen_typescript_loader_error){}try{ToggleInput.displayName="ToggleInput",ToggleInput.__docgenInfo={description:"",displayName:"ToggleInput",props:{as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/Toggle/elements.tsx#ToggleInput"]={docgenInfo:ToggleInput.__docgenInfo,name:"ToggleInput",path:"packages/gamut/src/Toggle/elements.tsx#ToggleInput"})}catch(__react_docgen_typescript_loader_error){}try{ToggleLabel.displayName="ToggleLabel",ToggleLabel.__docgenInfo={description:"",displayName:"ToggleLabel",props:{as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},labelRight:{defaultValue:null,description:"",name:"labelRight",required:!1,type:{name:"boolean"}},p:{defaultValue:null,description:"",name:"p",required:!1,type:{name:'Scale<{ readonly property: "padding"; readonly scale: "spacing"; }>'}},px:{defaultValue:null,description:"",name:"px",required:!1,type:{name:'Scale<{ readonly property: "padding"; readonly properties: readonly ["paddingLeft", "paddingRight"]; readonly scale: "spacing"; }>'}},py:{defaultValue:null,description:"",name:"py",required:!1,type:{name:'Scale<{ readonly property: "padding"; readonly properties: readonly ["paddingTop", "paddingBottom"]; readonly scale: "spacing"; }>'}},pt:{defaultValue:null,description:"",name:"pt",required:!1,type:{name:'Scale<{ readonly property: "paddingTop"; readonly scale: "spacing"; }>'}},pb:{defaultValue:null,description:"",name:"pb",required:!1,type:{name:'Scale<{ readonly property: "paddingBottom"; readonly scale: "spacing"; }>'}},pr:{defaultValue:null,description:"",name:"pr",required:!1,type:{name:'Scale<{ readonly property: "paddingRight"; readonly scale: "spacing"; }>'}},pl:{defaultValue:null,description:"",name:"pl",required:!1,type:{name:'Scale<{ readonly property: "paddingLeft"; readonly scale: "spacing"; }>'}},m:{defaultValue:null,description:"",name:"m",required:!1,type:{name:'Scale<{ readonly property: "margin"; readonly scale: "spacing"; }>'}},mx:{defaultValue:null,description:"",name:"mx",required:!1,type:{name:'Scale<{ readonly property: "margin"; readonly properties: readonly ["marginLeft", "marginRight"]; readonly scale: "spacing"; }>'}},my:{defaultValue:null,description:"",name:"my",required:!1,type:{name:'Scale<{ readonly property: "margin"; readonly properties: readonly ["marginTop", "marginBottom"]; readonly scale: "spacing"; }>'}},mt:{defaultValue:null,description:"",name:"mt",required:!1,type:{name:'Scale<{ readonly property: "marginTop"; readonly scale: "spacing"; }>'}},mb:{defaultValue:null,description:"",name:"mb",required:!1,type:{name:'Scale<{ readonly property: "marginBottom"; readonly scale: "spacing"; }>'}},mr:{defaultValue:null,description:"",name:"mr",required:!1,type:{name:'Scale<{ readonly property: "marginRight"; readonly scale: "spacing"; }>'}},ml:{defaultValue:null,description:"",name:"ml",required:!1,type:{name:'Scale<{ readonly property: "marginLeft"; readonly scale: "spacing"; }>'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/Toggle/elements.tsx#ToggleLabel"]={docgenInfo:ToggleLabel.__docgenInfo,name:"ToggleLabel",path:"packages/gamut/src/Toggle/elements.tsx#ToggleLabel"})}catch(__react_docgen_typescript_loader_error){}const getToggleElementProps=({ariaLabel,as,checked,disabled,label,onChange,onClick})=>{const sharedProps={"aria-label":ariaLabel,as,checked,id:label&&"string"==typeof label?label:ariaLabel,disabled};return"input"===as?{...sharedProps,type:"checkbox",onChange}:{...sharedProps,role:"switch","aria-checked":checked,onClick,type:"button"}};try{getToggleElementProps.displayName="getToggleElementProps",getToggleElementProps.__docgenInfo={description:"",displayName:"getToggleElementProps",props:{disabled:{defaultValue:null,description:"If the Toggle is disabled",name:"disabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Called when the input value has changed. Only to be used when the Toggle is an input",name:"onChange",required:!1,type:{name:"(((event?: FormEvent<HTMLInputElement>) => void) & ((event?: FormEvent<HTMLInputElement>) => void)) | undefined"}},onClick:{defaultValue:null,description:"Called on click. Only to be used when the Toggle is a button",name:"onClick",required:!1,type:{name:"(((event?: MouseEvent<MouseEvent, MouseEvent>) => void) & ((event?: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"}},as:{defaultValue:null,description:"If the Toggle element should be a button or an input. Buttons should be used if the toggle immediately kicks off an action, input should be used if the button exists within a form or if a seperate user interaction submits the data of the toggle",name:"as",required:!1,type:{name:'"button" | "input"'}},label:{defaultValue:null,description:"A visible label for your Toggle - we reccommend this",name:"label",required:!1,type:{name:"string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 5 more ..."}},checked:{defaultValue:null,description:"The state of the checkbox input (this can be out of sync with the input's value if not passed)",name:"checked",required:!0,type:{name:"boolean"}},ariaLabel:{defaultValue:null,description:"An aria-label if needed. If you do not label your toggle. you must provide an aria-label.",name:"ariaLabel",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/Toggle/utils.tsx#getToggleElementProps"]={docgenInfo:getToggleElementProps.__docgenInfo,name:"getToggleElementProps",path:"packages/gamut/src/Toggle/utils.tsx#getToggleElementProps"})}catch(__react_docgen_typescript_loader_error){}var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Toggle=({ariaLabel,as="input",checked,disabled,label,labelSide="right",onChange,onClick,size="medium",...rest})=>{const checkedColor=checked?"primary":"text-disabled",isButton="button"===as,toggleProps=getToggleElementProps({ariaLabel,as,checked,disabled,label,onChange,onClick});return(0,jsx_runtime.jsxs)(ToggleLabel,{disabled,htmlFor:toggleProps.id,labelRight:"right"===labelSide,...rest,children:[label&&(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:label}),(0,jsx_runtime.jsxs)(ToggleTrack,{bg:checkedColor,ml:label&&"right"===labelSide?0:16,mr:label&&"left"===labelSide?0:16,size,...isButton&&toggleProps,children:[!isButton&&(0,jsx_runtime.jsx)(ToggleInput,{...toggleProps}),(0,jsx_runtime.jsx)(Circle,{bg:"white",borderColor:"background",borderRadius:"full",borderStyle:"solid",borderWidth:"1px",bottom:"10%",left:checked?"55%":"5%",position:"absolute",top:"10%",width:"40%"})]})]})};try{Toggle.displayName="Toggle",Toggle.__docgenInfo={description:"",displayName:"Toggle",props:{as:{defaultValue:{value:"input"},description:"If the Toggle element should be a button or an input. Buttons should be used if the toggle immediately kicks off an action, input should be used if the button exists within a form or if a seperate user interaction submits the data of the toggle",name:"as",required:!1,type:{name:'"button" | "input"'}},checked:{defaultValue:null,description:"The state of the checkbox input (this can be out of sync with the input's value if not passed)",name:"checked",required:!0,type:{name:"boolean"}},ariaLabel:{defaultValue:null,description:"An aria-label if needed. If you do not label your toggle. you must provide an aria-label.",name:"ariaLabel",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If the Toggle is disabled",name:"disabled",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Called on click. Only to be used when the Toggle is a button",name:"onClick",required:!1,type:{name:"(((event?: MouseEvent<MouseEvent, MouseEvent>) => void) & ((event?: MouseEvent<HTMLElement, MouseEvent>) => void)) | undefined"}},onChange:{defaultValue:null,description:"Called when the input value has changed. Only to be used when the Toggle is an input",name:"onChange",required:!1,type:{name:"(((event?: FormEvent<HTMLInputElement>) => void) & ((event?: FormEvent<HTMLInputElement>) => void)) | undefined"}},label:{defaultValue:null,description:"A visible label for your Toggle - we reccommend this",name:"label",required:!1,type:{name:"string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ... 5 more ..."}},labelSide:{defaultValue:{value:"right"},description:"Which side of the toggle the label should render",name:"labelSide",required:!1,type:{name:'"left" | "right"'}},size:{defaultValue:{value:"medium"},description:"Changes the dimensions of the element for using the component outside of a form context",name:"size",required:!1,type:{name:'"small" | "medium"'}},p:{defaultValue:null,description:"",name:"p",required:!1,type:{name:'Scale<{ readonly property: "padding"; readonly scale: "spacing"; }>'}},px:{defaultValue:null,description:"",name:"px",required:!1,type:{name:'Scale<{ readonly property: "padding"; readonly properties: readonly ["paddingLeft", "paddingRight"]; readonly scale: "spacing"; }>'}},py:{defaultValue:null,description:"",name:"py",required:!1,type:{name:'Scale<{ readonly property: "padding"; readonly properties: readonly ["paddingTop", "paddingBottom"]; readonly scale: "spacing"; }>'}},pt:{defaultValue:null,description:"",name:"pt",required:!1,type:{name:'Scale<{ readonly property: "paddingTop"; readonly scale: "spacing"; }>'}},pb:{defaultValue:null,description:"",name:"pb",required:!1,type:{name:'Scale<{ readonly property: "paddingBottom"; readonly scale: "spacing"; }>'}},pr:{defaultValue:null,description:"",name:"pr",required:!1,type:{name:'Scale<{ readonly property: "paddingRight"; readonly scale: "spacing"; }>'}},pl:{defaultValue:null,description:"",name:"pl",required:!1,type:{name:'Scale<{ readonly property: "paddingLeft"; readonly scale: "spacing"; }>'}},m:{defaultValue:null,description:"",name:"m",required:!1,type:{name:'Scale<{ readonly property: "margin"; readonly scale: "spacing"; }>'}},mx:{defaultValue:null,description:"",name:"mx",required:!1,type:{name:'Scale<{ readonly property: "margin"; readonly properties: readonly ["marginLeft", "marginRight"]; readonly scale: "spacing"; }>'}},my:{defaultValue:null,description:"",name:"my",required:!1,type:{name:'Scale<{ readonly property: "margin"; readonly properties: readonly ["marginTop", "marginBottom"]; readonly scale: "spacing"; }>'}},mt:{defaultValue:null,description:"",name:"mt",required:!1,type:{name:'Scale<{ readonly property: "marginTop"; readonly scale: "spacing"; }>'}},mb:{defaultValue:null,description:"",name:"mb",required:!1,type:{name:'Scale<{ readonly property: "marginBottom"; readonly scale: "spacing"; }>'}},mr:{defaultValue:null,description:"",name:"mr",required:!1,type:{name:'Scale<{ readonly property: "marginRight"; readonly scale: "spacing"; }>'}},ml:{defaultValue:null,description:"",name:"ml",required:!1,type:{name:'Scale<{ readonly property: "marginLeft"; readonly scale: "spacing"; }>'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/Toggle/index.tsx#Toggle"]={docgenInfo:Toggle.__docgenInfo,name:"Toggle",path:"packages/gamut/src/Toggle/index.tsx#Toggle"})}catch(__react_docgen_typescript_loader_error){}}}]);