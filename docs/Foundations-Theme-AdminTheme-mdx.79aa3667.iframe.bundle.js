"use strict";(self.webpackChunkgamut_repo=self.webpackChunkgamut_repo||[]).push([[1230],{"./packages/styleguide/src/lib/Foundations/Theme/AdminTheme.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent,parameters:()=>parameters});var adminElements_namespaceObject={};__webpack_require__.r(adminElements_namespaceObject),__webpack_require__.d(adminElements_namespaceObject,{AdminDarkModeTable:()=>AdminDarkModeTable,AdminLightModeTable:()=>AdminLightModeTable,adminDarkMode:()=>adminDarkMode,adminLightMode:()=>adminLightMode});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),components=__webpack_require__("./packages/styleguide/.storybook/components/index.tsx"),src=__webpack_require__("./packages/gamut-styles/src/index.ts"),shared_elements=__webpack_require__("./packages/styleguide/src/lib/Foundations/shared/elements.tsx");const adminLightMode={rows:Object.entries(src.J.modes.light).map((_ref=>{let[id,value]=_ref;return{id,hex:value}})),columns:[{...shared_elements.PROP_COLUMN,size:"lg"},{...shared_elements.PATH_COLUMN,render:_ref2=>{let{id}=_ref2;return(0,jsx_runtime.jsxs)(components.Cy,{children:["theme.colors.",id]})}},{key:"swatch",name:"Swatch",size:"fill",render:_ref3=>{let{hex}=_ref3;return(0,jsx_runtime.jsx)(components.wC,{colors:{hex:src.J.colors[hex]}})}}]},adminDarkMode={rows:Object.entries(src.J.modes.dark).map((_ref4=>{let[id,value]=_ref4;return{id,hex:value}})),columns:[{...shared_elements.PROP_COLUMN,size:"lg"},{...shared_elements.PATH_COLUMN,render:_ref5=>{let{id}=_ref5;return(0,jsx_runtime.jsxs)(components.Cy,{children:["theme.colors.",id]})}},{key:"swatch",name:"Swatch",size:"fill",render:_ref6=>{let{hex}=_ref6;return(0,jsx_runtime.jsx)(components.wC,{colors:{hex:src.J.colors[hex]}})}}]},AdminLightModeTable=()=>(0,jsx_runtime.jsx)(src.VS,{bg:"white",children:(0,jsx_runtime.jsx)(components.wI,{bg:!1,...adminLightMode})}),AdminDarkModeTable=()=>(0,jsx_runtime.jsx)(src.VS,{bg:"navy",children:(0,jsx_runtime.jsx)(components.wI,{bg:!1,...adminDarkMode})}),parameters={title:"Admin Theme",subtitle:"Codecademy Admin Theme used within admin tools",status:"current",source:{repo:"gamut-styles",githubLink:"https://github.com/Codecademy/gamut/blob/main/packages/gamut-styles/src/themes"}};function _createMdxContent(props){const _components={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",...(0,lib.R)(),...props.components};return adminElements_namespaceObject||_missingMdxReference("TABLES",!1),AdminDarkModeTable||_missingMdxReference("TABLES.AdminDarkModeTable",!0),AdminLightModeTable||_missingMdxReference("TABLES.AdminLightModeTable",!0),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{title:"Foundations/Theme/AdminTheme"}),"\n",(0,jsx_runtime.jsx)(components.Rd,{...parameters}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The Admin Theme is a theme used within the Codecademy Admin Tooling. It is built off of the Core Theme with some light mode and dark mode colors overridden for Admin Tooling. For all other tokens not listed here, refer to the ",(0,jsx_runtime.jsx)(components.WS,{id:"Foundations/Theme/CoreTheme",children:"Core Theme"}),"."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["See ",(0,jsx_runtime.jsx)(components.WS,{id:"Foundations/Theme/About",children:"Theme/About"})," for more information on the theme object and how to use it."]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"color-modes",children:"Color modes"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["We have 2 core color modes that we support: ",(0,jsx_runtime.jsx)(_components.code,{children:"light"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"dark"}),"."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Each color mode consists of a set of aliased color tokens that have a semantic meaning for how the color is used throughout our design system. For more on Color Modes please checkout the ",(0,jsx_runtime.jsx)(_components.a,{href:"/?path=/docs/foundations-colormode--page",children:"full color mode documentation"}),"."]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"light-mode",children:"Light mode"}),"\n",(0,jsx_runtime.jsx)(AdminLightModeTable,{}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"dark-mode",children:"Dark mode"}),"\n",(0,jsx_runtime.jsx)(AdminDarkModeTable,{})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}function _missingMdxReference(id,component){throw new Error("Expected "+(component?"component":"object")+" `"+id+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);