"use strict";(self.webpackChunkgamut_repo=self.webpackChunkgamut_repo||[]).push([[9465],{"./node_modules/@vidstack/react/prod/chunks/vidstack-Zc3I7oOd.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{findYouTubePoster:()=>findYouTubePoster,resolveYouTubeVideoId:()=>resolveYouTubeVideoId});const videoIdRE=/(?:youtu\.be|youtube|youtube\.com|youtube-nocookie\.com)\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=|)((?:\w|-){11})/,posterCache=new Map,pendingFetch=new Map;function resolveYouTubeVideoId(src){return src.match(videoIdRE)?.[1]}async function findYouTubePoster(videoId,abort){if(posterCache.has(videoId))return posterCache.get(videoId);if(pendingFetch.has(videoId))return pendingFetch.get(videoId);const pending=new Promise((async resolve=>{const sizes=["maxresdefault","sddefault","hqdefault"];for(const size of sizes)for(const webp of[!0,!1]){const url=resolveYouTubePosterURL(videoId,size,webp);if((await fetch(url,{mode:"no-cors",signal:abort.signal})).status<400)return posterCache.set(videoId,url),void resolve(url)}})).catch((()=>"")).finally((()=>pendingFetch.delete(videoId)));return pendingFetch.set(videoId,pending),pending}function resolveYouTubePosterURL(videoId,size,webp){return`https://i.ytimg.com/${webp?"vi_webp":"vi"}/${videoId}/${size}.${webp?"webp":"jpg"}`}}}]);