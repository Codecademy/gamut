"use strict";(self.webpackChunkgamut_repo=self.webpackChunkgamut_repo||[]).push([[9681],{"./packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadioGroupInput.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>ConnectedRadioGroupInput});__webpack_require__("./node_modules/react/index.js");var RadioGroup=__webpack_require__("./packages/gamut/src/Form/inputs/RadioGroup.tsx"),utils=__webpack_require__("./packages/gamut/src/ConnectedForm/utils.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ConnectedRadioGroup=_ref=>{let{name,onChange,...rest}=_ref;const{setValue,isRequired}=(0,utils.Mt)({name});return(0,jsx_runtime.jsx)(RadioGroup.z,{"aria-required":isRequired,htmlForPrefix:name,name,role:"radiogroup",onChange:event=>{const{value}=event.target;setValue(name,value),onChange?.(event)},...rest})};try{ConnectedRadioGroup.displayName="ConnectedRadioGroup",ConnectedRadioGroup.__docgenInfo={description:"",displayName:"ConnectedRadioGroup",props:{selected:{defaultValue:null,description:"",name:"selected",required:!1,type:{name:"string"}},htmlForPrefix:{defaultValue:null,description:"",name:"htmlForPrefix",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((value: boolean) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadioGroup.tsx#ConnectedRadioGroup"]={docgenInfo:ConnectedRadioGroup.__docgenInfo,name:"ConnectedRadioGroup",path:"packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadioGroup.tsx#ConnectedRadioGroup"})}catch(__react_docgen_typescript_loader_error){}var Radio=__webpack_require__("./packages/gamut/src/Form/inputs/Radio.tsx");const ConnectedRadio=_ref=>{let{disabled,name,...rest}=_ref;const{error,isDisabled,ref}=(0,utils.Mt)({name,disabled});return(0,jsx_runtime.jsx)(Radio.s,{disabled:isDisabled,error:Boolean(error),...ref,...rest})};try{ConnectedRadio.displayName="ConnectedRadio",ConnectedRadio.__docgenInfo={description:"",displayName:"ConnectedRadio",props:{error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"A label for your Radio input - should not include infotips or other interactive elements",name:"label",required:!1,type:{name:"ReactNode"}},infotip:{defaultValue:null,description:"Infotip props to render to the right of your radio label",name:"infotip",required:!1,type:{name:"InfoTipProps"}},htmlFor:{defaultValue:null,description:"[The for/id string of a label or labelable form-related element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor). The outer FormGroup or FormLabel should have an identical string as the inner FormElement for accessibility purposes.",name:"htmlFor",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((value: boolean) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadio.tsx#ConnectedRadio"]={docgenInfo:ConnectedRadio.__docgenInfo,name:"ConnectedRadio",path:"packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadio.tsx#ConnectedRadio"})}catch(__react_docgen_typescript_loader_error){}const ConnectedRadioGroupInput=_ref=>{let{name,options,disabled,...rest}=_ref;return(0,jsx_runtime.jsx)(ConnectedRadioGroup,{name,...rest,children:options.map((elem=>(0,jsx_runtime.jsx)(ConnectedRadio,{disabled,name,...elem},`${name}-${elem.value}`)))})};try{ConnectedRadioGroupInput.displayName="ConnectedRadioGroupInput",ConnectedRadioGroupInput.__docgenInfo={description:"",displayName:"ConnectedRadioGroupInput",props:{options:{defaultValue:null,description:"",name:"options",required:!0,type:{name:"ConnectedBaseRadioInputProps[]"}},selected:{defaultValue:null,description:"",name:"selected",required:!1,type:{name:"string"}},htmlForPrefix:{defaultValue:null,description:"",name:"htmlForPrefix",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((value: boolean) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadioGroupInput.tsx#ConnectedRadioGroupInput"]={docgenInfo:ConnectedRadioGroupInput.__docgenInfo,name:"ConnectedRadioGroupInput",path:"packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadioGroupInput.tsx#ConnectedRadioGroupInput"})}catch(__react_docgen_typescript_loader_error){}},"./packages/styleguide/src/lib/Organisms/ConnectedForm/ConnectedForm/ConnectedForm.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent,parameters:()=>parameters});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_circleci_repo_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/styleguide/.storybook/components/index.tsx"),_ConnectedForm_stories__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/styleguide/src/lib/Organisms/ConnectedForm/ConnectedForm/ConnectedForm.stories.tsx");const parameters={title:"ConnectedForm",subtitle:"A flexible way to build forms.",status:"current",source:{repo:"gamut",githubLink:"https://github.com/Codecademy/gamut/blob/main/packages/gamut/src/ConnectedForm/ConnectedForm.tsx"}};function _createMdxContent(props){const _components={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,_home_circleci_repo_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_4__.R)(),...props.components};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_5__.W8,{of:_ConnectedForm_stories__WEBPACK_IMPORTED_MODULE_3__}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.Bg,{...parameters}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"usage",children:"Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedForm"})," is an organism designed to create flexible forms with all of the reliability of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.WS,{id:"Organisms/GridForm",children:"GridForm"})," but without the strict grid structure."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"components",children:"Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedForm"}),": A ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.WS,{id:"Atoms/FormElements/Form",children:"Form"})," that provides context to all ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Connected"})," components."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedFormGroup"}),": ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.WS,{id:"Atoms/FormElements/FormGroup",children:"FormGroups"})," that use the context provided by ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedForm"})," for error and disabled states."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedFormInputs"}),": ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.WS,{id:"Atoms/FormInputs",children:"FormInputs"})," the use the context provided by ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedForm"})," for field registration and validation as well as required and disabled states. Should be used through ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedFormGroup"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"SubmitButton"}),": A submit type ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.WS,{id:"Atoms/Buttons",children:"Button"})," that uses the context provided by ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedForm"})," for loading and disabled states."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"utilities",children:"Utilities"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The primary access pattern of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedForm"})," is the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useConnectedForm"})," hook which composes a typesafe version of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedForm"})," + ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ConnectedFormGroup"})," from the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"defaultValues"})," passed to it - catching errors before the development enviroment is even started."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Each of your fields' names must correspond with the appropriate ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"defaultValue"})," key. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"validationRules"})," operates similarly - each key must correspond to a key in ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"defaultValue"})," and must follow ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://react-hook-form.com",rel:"nofollow",children:"react-hook-form's"})," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://react-hook-form.com/v6/api#register",rel:"nofollow",children:"validation patterns"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["This hook also returns the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"FormRequiredText"})," component - include this before your form unless all of your form fields are optional."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"example-code",children:"Example code"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import {\n  ConnectedCheckbox,\n  ConnectedInput,\n  ConnectedSelect,\n  useConnectedForm,\n} from '@codecademy/gamut';\n\nimport { TerminalIcon } from '@codecademy/gamut-icons';\n\nexport const GoodForm = () => {\n  const {\n    ConnectedFormGroup,\n    ConnectedForm,\n    connectedFormProps,\n    FormRequiredText,\n  } = useConnectedForm({\n    defaultValues: {\n      thisField: true,\n      thatField: 'zero',\n      anotherField: 'state your name.',\n    },\n    validationRules: {\n      thisField: { required: 'you need to check this.' },\n      thatField: {\n        pattern: {\n          value: /^(?:(?!zero).)*$/,\n          message: 'literally anything but zero',\n        },\n      },\n    },\n  });\n\n  return (\n    <ConnectedForm\n      onSubmit={({ thisField }) => console.log(thisField)}\n      resetOnSubmit\n      {...connectedFormProps}\n    >\n      <SubmitButton>submit this form.</SubmitButton>\n      <ConnectedFormGroup\n        name=\"thisField\"\n        label=\"cool checkbox bruh\"\n        field={{\n          component: ConnectedCheckbox,\n          label: 'check it ouuut',\n        }}\n      />\n      <ConnectedFormGroup\n        name=\"thatField\"\n        label=\"cool select dude\"\n        field={{\n          component: ConnectedSelect,\n          options: ['one', 'two', 'zero'],\n        }}\n      />\n      <ConnectedFormGroup\n        name=\"anotherField\"\n        label=\"cool input\"\n        field={{\n          component: ConnectedInput,\n          icon: TerminalIcon,\n        }}\n      />\n      <FormRequiredText />\n    </ConnectedForm>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"variants",children:"Variants"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"watchedfields",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"watchedFields"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["If you need the values of your inputs before submission, for something like conditionally generating different inputs, you can also pass in a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"watchedFields"})," object. This takes in an array of names of fields to watch and a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"watchHandler "})," function which will be run ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onChange"})," of your watchedField. This function should take an array of the return values of the inputs in the order the names are passed in to the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"fields"})," props."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Watched fields aren't usually great for performance, so only use these fields when you need to."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_5__.Hl,{of:_ConnectedForm_stories__WEBPACK_IMPORTED_MODULE_3__.WatchedFields}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"playground",children:"Playground"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_5__.Hl,{sourceState:"shown",of:_ConnectedForm_stories__WEBPACK_IMPORTED_MODULE_3__.Default}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_5__.H2,{})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,_home_circleci_repo_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_4__.R)(),...props.components};return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}},"./packages/styleguide/src/lib/Organisms/ConnectedForm/ConnectedForm/ConnectedForm.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,RadioWatchExample:()=>RadioWatchExample,WatchedFields:()=>WatchedFields,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ConnectedForm_stories});var ConnectedForm=__webpack_require__("./packages/gamut/src/ConnectedForm/ConnectedForm.tsx"),utils=__webpack_require__("./packages/gamut/src/ConnectedForm/utils.tsx"),Text=__webpack_require__("./packages/gamut/src/Typography/Text.tsx"),react=__webpack_require__("./node_modules/react/index.js"),index_esm=__webpack_require__("./node_modules/react-hook-form/dist/index.esm.mjs"),Checkbox=__webpack_require__("./packages/gamut/src/Form/inputs/Checkbox.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ConnectedCheckbox=_ref=>{let{className,disabled,id,label,"aria-label":ariaLabel,multiline,name,onUpdate,spacing}=_ref;const{isDisabled,control,validation,isRequired}=(0,utils.Mt)({name,disabled});return(0,jsx_runtime.jsx)(index_esm.xI,{control,defaultValue:!1,name,render:_ref2=>{let{field:{value,onBlur,onChange,ref}}=_ref2;return(0,jsx_runtime.jsx)(Checkbox.S,{"aria-label":void 0===ariaLabel?"string"==typeof label?label:"checkbox":ariaLabel,"aria-required":isRequired,checked:value,className,disabled:isDisabled,htmlFor:name,id,label,multiline,name,spacing,onBlur,onChange:event=>{onUpdate?.(event.target.checked),onChange?.(event.target.checked)},...ref})},rules:validation})};try{ConnectedCheckbox.displayName="ConnectedCheckbox",ConnectedCheckbox.__docgenInfo={description:"",displayName:"ConnectedCheckbox",props:{spacing:{defaultValue:null,description:"",name:"spacing",required:!1,type:{name:'false | "base" | "tight"'}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme"}},value:{defaultValue:null,description:'@remarks The `value` prop here gets passed to the underlying `input` component\nand functions exactly like the HTML spec for checkboxes defines\n(which may not be as you expect):\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#value=\n\nOf note is that `value` ends up being the string that your field name key\nis set to when the checkbox is checked. So a `value` of the boolean `true` and\na `name` of "isPro" will result in `{\n isPro: "true"\n}` being submitted to your (non-`Connected`) form when the checkbox is checked.\nHowever, if due to how your HOC is organized, the Checkbox recieves a value\nof the boolean `false` when it is unchecked, NOTHING will be submitted. You\n_will not_ get `{ isPro: "false" }` on submit. However, the `value` of your input\nwill be "false"\n\nAs the MDN documentation above states:\n"If a checkbox is unchecked when its form is submitted, there is no value submitted to the server to represent its unchecked state (e.g. value=unchecked); the value is not submitted to the server at all"\n\nThis behavior may not matter to you if you\'re handling your own form values\nexternally (i.e. not relying on default lower-case-`form`/`input` submit behavior)\nor you\'re using `register` from Gamut\'s `useField` hook,\nwhich uses `react-hook-form`\'s logic to sidestep this behavior by not passing\na value to the underlying checkbox at all.',name:"value",required:!1,type:{name:"string | boolean"}},checked:{defaultValue:null,description:"",name:"checked",required:!1,type:{name:"boolean"}},indeterminate:{defaultValue:null,description:"",name:"indeterminate",required:!1,type:{name:"boolean"}},multiline:{defaultValue:null,description:"",name:"multiline",required:!1,type:{name:"boolean"}},dontAriaHideLabel:{defaultValue:null,description:"Use if you want both the aria-label and text label to be read by voiceover - this component assumes that the aria-label and visual text label are identical.\nIf you have a link in the Checkbox options, you should set this as true.",name:"dontAriaHideLabel",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((value: boolean) => void)"}},label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"ReactNode"}},"aria-label":{defaultValue:null,description:"",name:"aria-label",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedCheckbox.tsx#ConnectedCheckbox"]={docgenInfo:ConnectedCheckbox.__docgenInfo,name:"ConnectedCheckbox",path:"packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedCheckbox.tsx#ConnectedCheckbox"})}catch(__react_docgen_typescript_loader_error){}var ConnectedRadioGroupInput=__webpack_require__("./packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedRadioGroupInput.tsx"),SubmitButton=__webpack_require__("./packages/gamut/src/ConnectedForm/SubmitButton.tsx"),FormRequiredText=__webpack_require__("./packages/gamut/src/Form/elements/FormRequiredText.tsx"),Select=__webpack_require__("./packages/gamut/src/Form/inputs/Select.tsx");const ConnectedSelect=_ref=>{let{disabled,name,...rest}=_ref;const{error,isDisabled,ref,isRequired}=(0,utils.Mt)({name,disabled});return(0,jsx_runtime.jsx)(Select.l,{"aria-required":isRequired,disabled:isDisabled,error:Boolean(error),...ref,...rest})};try{ConnectedSelect.displayName="ConnectedSelect",ConnectedSelect.__docgenInfo={description:"",displayName:"ConnectedSelect",props:{error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:'false | "error" | "activated"'}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme"}},htmlFor:{defaultValue:null,description:"[The for/id string of a label or labelable form-related element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor). The outer FormGroup or FormLabel should have an identical string as the inner FormElement for accessibility purposes.",name:"htmlFor",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"SelectOptions"}},sizeVariant:{defaultValue:null,description:"",name:"sizeVariant",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"base"'}]}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((value: boolean) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedSelect.tsx#ConnectedSelect"]={docgenInfo:ConnectedSelect.__docgenInfo,name:"ConnectedSelect",path:"packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedSelect.tsx#ConnectedSelect"})}catch(__react_docgen_typescript_loader_error){}var Input=__webpack_require__("./packages/gamut/src/Form/inputs/Input.tsx");const ConnectedInput=_ref=>{let{disabled,name,...rest}=_ref;const{error,isDisabled,ref,isRequired}=(0,utils.Mt)({name,disabled});return(0,jsx_runtime.jsx)(Input.pd,{"aria-required":isRequired,disabled:isDisabled,error:Boolean(error),...ref,...rest})};try{ConnectedInput.displayName="ConnectedInput",ConnectedInput.__docgenInfo={description:"",displayName:"ConnectedInput",props:{error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"StyledComponent<StyledInputProps, any, {}>"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"base"'}]}},icon:{defaultValue:null,description:"A custom icon svg from gamut-icons.",name:"icon",required:!1,type:{name:"ComponentType<GamutIconProps>"}},htmlFor:{defaultValue:null,description:"[The for/id string of a label or labelable form-related element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor). The outer FormGroup or FormLabel should have an identical string as the inner FormElement for accessibility purposes.",name:"htmlFor",required:!1,type:{name:"string"}},activated:{defaultValue:null,description:"Allows Inputs to manage their own activated style state to account for some edge-cases.",name:"activated",required:!1,type:{name:"boolean"}},valid:{defaultValue:null,description:"",name:"valid",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((value: boolean) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedInput.tsx#ConnectedInput"]={docgenInfo:ConnectedInput.__docgenInfo,name:"ConnectedInput",path:"packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedInput.tsx#ConnectedInput"})}catch(__react_docgen_typescript_loader_error){}var TextArea=__webpack_require__("./packages/gamut/src/Form/inputs/TextArea.tsx");const ConnectedTextArea=_ref=>{let{disabled,name,...rest}=_ref;const{error,isDisabled,ref,isRequired}=(0,utils.Mt)({name,disabled});return(0,jsx_runtime.jsx)(TextArea.f,{"aria-required":isRequired,disabled:isDisabled,error:Boolean(error),...ref,...rest})};try{ConnectedTextArea.displayName="ConnectedTextArea",ConnectedTextArea.__docgenInfo={description:"",displayName:"ConnectedTextArea",props:{error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:'false | "error" | "activated"'}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme"}},htmlFor:{defaultValue:null,description:"[The for/id string of a label or labelable form-related element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor). The outer FormGroup or FormLabel should have an identical string as the inner FormElement for accessibility purposes.",name:"htmlFor",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},onUpdate:{defaultValue:null,description:"",name:"onUpdate",required:!1,type:{name:"((value: boolean) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedTextArea.tsx#ConnectedTextArea"]={docgenInfo:ConnectedTextArea.__docgenInfo,name:"ConnectedTextArea",path:"packages/gamut/src/ConnectedForm/ConnectedInputs/ConnectedTextArea.tsx#ConnectedTextArea"})}catch(__react_docgen_typescript_loader_error){}var TerminalIcon=__webpack_require__("./packages/gamut-icons/dist/icons/regular/TerminalIcon.js"),MiniArrowRightIcon=__webpack_require__("./packages/gamut-icons/dist/icons/mini/MiniArrowRightIcon.js"),dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");const ConnectedForm_stories={component:ConnectedForm._,args:{}},RadioWatchExample=()=>{const[showRadio,setShowRadio]=(0,react.useState)(!1),[lastFormValues,setLastFormValues]=(0,react.useState)({checkbox:"not submitted",radioGroup:"not submitted"}),{ConnectedFormGroup,ConnectedForm,connectedFormProps}=(0,utils.BW)({defaultValues:{checkbox:!1,radioGroup:void 0},validationRules:{radioGroup:{required:"please fill this out."}},watchedFields:{fields:["checkbox","radioGroup"],watchHandler:values=>{const[checkbox]=values;return setShowRadio(!!checkbox)}}});return(0,jsx_runtime.jsxs)(ConnectedForm,{resetOnSubmit:!0,onError:errors=>errors,onSubmit:_ref=>{let{checkbox,radioGroup}=_ref;setLastFormValues({checkbox:`${checkbox}`,radioGroup:`${radioGroup}`})},...connectedFormProps,children:[(0,jsx_runtime.jsxs)(Text.E,{as:"code",lineHeight:"base",mb:24,children:["your last answers were ",lastFormValues.checkbox," and"," ",lastFormValues.radioGroup,"!"]}),(0,jsx_runtime.jsx)(ConnectedFormGroup,{field:{component:ConnectedCheckbox,label:"check me to view the radio",spacing:"tight"},label:"a special checkbox",name:"checkbox",spacing:"tight"}),showRadio&&(0,jsx_runtime.jsx)(ConnectedFormGroup,{field:{component:ConnectedRadioGroupInput.c,options:[{label:"one",value:"one"},{label:"two",value:"two"},{label:"zero",value:"zero"}]},label:"cool radiogroup bruh",name:"radioGroup"}),(0,jsx_runtime.jsx)(SubmitButton.b,{m:8,children:"submit the form, please"})]})},WatchedFields={render:()=>(0,jsx_runtime.jsx)(RadioWatchExample,{})},ConnectedFormPlayground=_ref2=>{let{connectedForm,connectedFormGroup}=_ref2;const{ConnectedFormGroup,ConnectedForm,connectedFormProps}=(0,utils.BW)({defaultValues:{checkboxField:!1,selectField:"zero",inputField:"",radioGroupField:void 0,textAreaField:""},validationRules:{checkboxField:{required:"you need to check this."},selectField:{pattern:{value:/^(?:(?!zero).)*$/,message:"literally anything but zero"}},inputField:{required:"we need this info, bud"},radioGroupField:{required:"we need this info too, bud"},textAreaField:{required:"you just have to fill out the whole thing, okay?"}}});return(0,jsx_runtime.jsxs)(ConnectedForm,{alignItems:"center",display:"flex",flexDirection:"column",justifyContent:"space-between",minHeight:"50rem",onSubmit:values=>{(0,dist.XI)("Form Submitted")(values)},...connectedFormProps,...connectedForm,children:[(0,jsx_runtime.jsx)(SubmitButton.b,{m:8,children:"submit this form"}),(0,jsx_runtime.jsx)(FormRequiredText.f,{}),(0,jsx_runtime.jsx)(ConnectedFormGroup,{field:{component:ConnectedCheckbox,label:(0,jsx_runtime.jsx)("div",{children:"check it ouuut"}),"aria-label":"aria label"},label:"checkbox field",name:"checkboxField",...connectedFormGroup}),(0,jsx_runtime.jsx)(ConnectedFormGroup,{field:{component:ConnectedSelect,options:["one","two","zero"]},label:"select field",name:"selectField",...connectedFormGroup}),(0,jsx_runtime.jsx)(ConnectedFormGroup,{field:{component:ConnectedInput,icon:TerminalIcon.k},label:"input field",name:"inputField",...connectedFormGroup}),(0,jsx_runtime.jsx)(ConnectedFormGroup,{field:{component:ConnectedRadioGroupInput.c,options:[{label:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(MiniArrowRightIcon._,{mr:4})," a"]}),value:"a"},{label:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(MiniArrowRightIcon._,{mr:4})," b"]}),value:"b"},{label:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(MiniArrowRightIcon._,{mr:4})," c"]}),value:"c"},{label:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(MiniArrowRightIcon._,{mr:4}),"zilch"]}),value:"zilch"}]},label:"radio group field",name:"radioGroupField",...connectedFormGroup}),(0,jsx_runtime.jsx)(ConnectedFormGroup,{field:{component:ConnectedTextArea},label:"text area field",name:"textAreaField",...connectedFormGroup})]})},Default={render:()=>(0,jsx_runtime.jsx)(ConnectedFormPlayground,{connectedForm:{},connectedFormGroup:{}})},__namedExportsOrder=["RadioWatchExample","WatchedFields","Default"];RadioWatchExample.parameters={...RadioWatchExample.parameters,docs:{...RadioWatchExample.parameters?.docs,source:{originalSource:"() => {\n  const [showRadio, setShowRadio] = useState(false);\n  const [lastFormValues, setLastFormValues] = useState({\n    checkbox: 'not submitted',\n    radioGroup: 'not submitted'\n  });\n  const handleWatch = (values: string[]) => {\n    const [checkbox] = values;\n    return checkbox ? setShowRadio(true) : setShowRadio(false);\n  };\n  const {\n    ConnectedFormGroup,\n    ConnectedForm,\n    connectedFormProps\n  } = useConnectedForm({\n    defaultValues: {\n      checkbox: false,\n      radioGroup: undefined\n    },\n    validationRules: {\n      radioGroup: {\n        required: 'please fill this out.'\n      }\n    },\n    watchedFields: {\n      fields: ['checkbox', 'radioGroup'],\n      watchHandler: handleWatch\n    }\n  });\n  return <ConnectedForm resetOnSubmit onError={errors => errors} onSubmit={({\n    checkbox,\n    radioGroup\n  }) => {\n    setLastFormValues({\n      checkbox: `${checkbox}`,\n      radioGroup: `${radioGroup}`\n    });\n  }} {...connectedFormProps}>\n      <Text as=\"code\" lineHeight=\"base\" mb={24}>\n        your last answers were {lastFormValues.checkbox} and{' '}\n        {lastFormValues.radioGroup}!\n      </Text>\n      <ConnectedFormGroup field={{\n      component: ConnectedCheckbox,\n      label: 'check me to view the radio',\n      spacing: 'tight'\n    }} label=\"a special checkbox\" name=\"checkbox\" spacing=\"tight\" />\n      {showRadio && <ConnectedFormGroup field={{\n      component: ConnectedRadioGroupInput,\n      options: [{\n        label: 'one',\n        value: 'one'\n      }, {\n        label: 'two',\n        value: 'two'\n      }, {\n        label: 'zero',\n        value: 'zero'\n      }]\n    }} label=\"cool radiogroup bruh\" name=\"radioGroup\" />}\n      <SubmitButton m={8}>submit the form, please</SubmitButton>\n    </ConnectedForm>;\n}",...RadioWatchExample.parameters?.docs?.source}}},WatchedFields.parameters={...WatchedFields.parameters,docs:{...WatchedFields.parameters?.docs,source:{originalSource:"{\n  render: () => <RadioWatchExample />\n}",...WatchedFields.parameters?.docs?.source}}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: () => <ConnectedFormPlayground connectedForm={{}} connectedFormGroup={{}} />\n}",...Default.parameters?.docs?.source}}}}}]);