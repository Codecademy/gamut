"use strict";(self.webpackChunkgamut_repo=self.webpackChunkgamut_repo||[]).push([[1468],{"./packages/styleguide/src/lib/Meta/Best Practices.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent,parameters:()=>parameters});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_Users_cass_Desktop_code_cc_gamut_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/styleguide/.storybook/components/index.tsx");const parameters={id:"Best Practices",title:"Best Practices",subtitle:"Current best practices for using the Gamut Design System",status:"current"};function _createMdxContent(props){const _components={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,_Users_cass_Desktop_code_cc_gamut_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_3__.R)(),...props.components};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_4__.W8,{title:"Meta/Best Practices"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.Rd,{...parameters}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"For best practices for writing for specific components, like alerts, errors, or confirmation dialogs, check out the individual component pages."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"variants--colormode",children:"Variants + ColorMode"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The way we access design tokens is becoming increasingly important as we move away from a single theme and towards a system of themes. The best way to access design tokens is through our semantic colors, which are are tied intrinsically to ColorModes. This means that when you use a semantic color, you are guaranteed to get the right color for the right theme. Using variants and and its related utilities will also guarantee you have access to the right tokens, typings, and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em,{children:"state"})," going forward. It is also ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://gamut.codecademy.com/?path=/docs/foundations-system-compose--page",rel:"nofollow",children:"safer"}),"!"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Think of our semantic color names as a variable referencing ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em,{children:"what the primary use of the color is within each color mode"}),". For example - an icon set to the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"text"})," color will match ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em,{children:"the primary color of text within that color mode."})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["For specific semantic name to color, please see the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://gamut.codecademy.com/?path=/docs/foundations-colormode--page",rel:"nofollow",children:"ColorMode"})," documentation."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h3,{id:"use-the-utility-functions-from-gamut-styles-with-colormode-semantic-color-names--shorthands",children:["Use the utility functions from ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"gamut-styles"})," with ColorMode semantic color names + shorthands"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import { css, states, variant } from '@codecademy/gamut-styles';\nimport styled from '@emotion/styled';\n\n// Single value\nconst Box = styled.div(css({ p: 4 }));\n\n// Mutiple values\nconst OtherCoolThing = styled.div(css({ color: 'primary', p: 4 }));\n\n// Need some variants?\nconst Anchor = styled.a(\n  variant({\n    base: { p: 4 },\n    defaultVariant: 'interface',\n    variants: {\n      interface: {\n        color: 'text',\n        '&:hover': {\n          color: 'text-accent',\n        },\n      },\n      inline: {\n        color: 'primary',\n        '&:hover': {\n          color: 'secondary',\n        },\n      },\n    },\n  })\n);\n\n// Need some boolean states?\nconst UtilityBox = styled.div(\n  states({\n    base: { mx: 4, my: 8, p: 16 },\n    disabled: {\n      bg: 'background-disabled',\n      color: 'text-disabled',\n    },\n    center: {\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n  })\n);\n\n<UtilityBox disabled center />;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.Pq,{text:"Share your css methods easily with StyleProps from gamut-styles!"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import { states } from '@codecademy/gamut-styles';\nimport { StyleProps } from '@codecademy/variance';\nimport styled from '@emotion/styled';\nimport React from 'react';\n\nconst someWrapperStates = states({\n  absolute: { position: 'absolute', left: 'calc(50% - 85px)' },\n  danger: { color: 'text', bg: 'danger' },\n});\n\nconst SomeWrapper = styled.div(someWrapperStates);\n\nexport interface CoolNumberComponentProps\n  extends StyleProps<typeof someWrapperStates> {\n  coolNumber: number;\n  anotherCoolNumber: number;\n}\n\nexport const CoolNumberComponent: React.FC<CoolNumberComponentProps> = ({\n  coolNumber,\n  anotherCoolNumber,\n  ...rest //where your state props are!\n}) => <SomeWrapper {...rest} />;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"system-props",children:"System props"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"System props are a core part of our new approach to dynamic and customized styling. Where writing custom styles is painful, system props are here to make it painless."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import { Box } from '@codecademy/gamut';\n\nconst MyContainer = ({ children }) => (\n  <Box paddingX={[16, 32, 64, , 96]}>{children}</Box>\n);\n\nconst MyOtherContainer = ({ children }) => (\n  <Box\n    mb={40}\n    px={{ _: 0, md: 64 }}\n    display={{ _: 'block', md: 'flex' }}\n    width={{ _: 'initial', md: `${pxRem(420)}` }}\n  >\n    {children}\n  </Box>\n);\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Intellisense + Typesafety"})," - Many system props are tied to specific design token scales. You can be sure that you are using the correct tokens between contexts. All props will autosuggest possible values for the scale that you are in."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Responsive Syntax"})," - ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://gamut.codecademy.com/storybook/?path=/docs/foundations-system-responsive-properties--page",rel:"nofollow",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Docs"})})," All system props accept 2 responsive syntaxes for easily creating responsive layouts. System prop media queries are mobile first (Greater Than or Equal To)."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"The typings behind the scenes:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"type MediaQueryMap<T> = {\n  _?: T;\n  xs?: T;\n  sm?: T;\n  md?: T;\n  lg?: T;\n  xl?: T;\n};\n\ntype MediaQueryArray<T> = [\n  T?, // base\n  T?, // xs\n  T?, // sm\n  T?, // md\n  T?, // lg\n  T? // xl\n];\n\ntype SystemProp<T> = T | MediaQueryMap<T> | MediaQueryArray<T>;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Usage:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'import { Box } from \'@codecademy/gamut\';\n\n// Object Syntax\n<Box width={{ _: "100%", sm: "50%" }} />\n\n// Array Syntax\n<Box width={["100%", ,"50%"]} />\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_styleguide_blocks__WEBPACK_IMPORTED_MODULE_2__.Pq,{text:"If you wish to skip a breakpoint in using the\narray shorthand you may specify undefined at the index."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"real-world-use-cases",children:"Real-world use cases"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Mobile / Desktop specific content"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import { Box } from '@codecademy/gamut';\n\nconst App = () => (\n  <main>\n    <h1>Title</h1>\n    <Box display={{ _: 'none', sm: 'block' }}>Desktop Only Content</Box>\n    <Box display={{ _: 'block', sm: 'none' }}>Mobile Only Content</Box>\n  </main>\n);\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Adaptive Layouts"})," - 3 columns ⇒ 2 columns"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import { GridBox } from '@codecademy/gamut';\n\nconst SomeCoolLayout = ({ children }) => (\n  <GridBox gridTemplateColumns={['1fr 1fr', , '1fr 1fr 1fr']}>\n    {children}\n  </GridBox>\n);\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Design Token Access"})," - Responsively accessing tokens by key."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const CardLikeThing = ({ children }) => (\n  <Box\n    backgroundColor={{ _: 'background', md: 'text' }}\n    textColor={{ _: 'text', md: 'background' }}\n  >\n    {children}\n  </Box>\n);\n\nconst Content = ({ children }) => (\n  <Box padding={{ _: 16, md: 32 }}>{children}</Box>\n);\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"-nested-selectors",children:"❌ Nested selectors"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Nested selectors can cause a huge amount of side effects unwittingly and make it very hard to maintain consistent behavior while making updates. We politely ask (and will shortly lint) that you refrain from using:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Tag Selectors"})," - ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"*"})," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"div"})," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"p"})," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"span"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Component Selectors (From Gamut)"})," - EG: ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Box"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'//❌ Don\'t do this❌\nconst App = styled.main`\n  * {\n    box-sizing: content-box;\n  }\n`;\n\n//❌ Don\'t do this❌\nconst App = styled.main`\n  display: flex;\n  ${Box} {\n    align-self: start;\n  }\n`;\n\n// ✅ Do this ✅\nconst App = ({ children }) => (\n <FlexBox as="main">\n   <Box alignSelf="start">{children}</Box>\n</FlexBox>\n'})})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,_Users_cass_Desktop_code_cc_gamut_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim_mjs__WEBPACK_IMPORTED_MODULE_3__.R)(),...props.components};return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}}}]);