{"version":3,"file":"main.bd34c19d4a275c0c8c01.bundle.js","sources":["webpack:////home/circleci/repo/packages/gamut/FlexBox/Container.tsx"],"sourcesContent":["import { isNumber, omit } from 'lodash';\nimport React, { ReactNode, HTMLAttributes } from 'react';\nimport cx from 'classnames';\nimport s from './styles/index.scss';\n\nconst internalProps = [\n  'flex',\n  'inline',\n  'grow',\n  'shrink',\n  'row',\n  'column',\n  'wrap',\n  'nowrap',\n  'center',\n  'reverse',\n  'fit',\n  'align',\n  'justify',\n  'alignSelf',\n];\n\ntype ContainerPosition =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'baseline'\n  | 'stretch'\n  | 'spaceAround'\n  | 'spaceBetween';\n\nexport interface ContainerProps extends HTMLAttributes<HTMLDivElement> {\n  align?: ContainerPosition;\n  alignSelf?: ContainerPosition;\n  center?: boolean;\n  children?: ReactNode | ReactNode[];\n  className?: string;\n  column?: boolean;\n  fit?: boolean;\n  flex?: boolean;\n  grow?: number;\n  inline?: boolean;\n  justify?: ContainerPosition;\n  nowrap?: boolean;\n  reverse?: boolean;\n  row?: boolean;\n  shrink?: number;\n  wrap?: boolean;\n}\n\nclass Container extends React.Component<ContainerProps> {\n  static displayName = 'Container';\n\n  static defaultProps = {\n    flex: true,\n    inline: false,\n  };\n\n  render() {\n    const classes = cx({\n      [s.flex]: this.props.flex && !this.props.inline,\n      [s.inline]: this.props.flex && this.props.inline,\n      [s.fld]: isNumber(this.props.grow) || isNumber(this.props.shrink),\n      [s[`flg-${this.props.grow}`]]: isNumber(this.props.grow),\n      [s[`fls-${this.props.shrink}`]]: isNumber(this.props.shrink),\n      [s.row]: this.props.row,\n      [s.col]: this.props.column,\n      [s.wrap]: this.props.wrap,\n      [s.nowrap]: this.props.nowrap,\n      [s.rev]: this.props.reverse,\n      [s.fit]: this.props.fit,\n      [s['align-center']]: this.props.center && !this.props.align,\n      [s['justify-center']]: this.props.center && !this.props.justify,\n      [s[`align-${this.props.align}`]]: !!this.props.align,\n      [s[`justify-${this.props.justify}`]]: !!this.props.justify,\n      [s[`aself-${this.props.alignSelf}`]]: !!this.props.alignSelf,\n      [this.props.className]: !!this.props.className,\n    });\n\n    const propsToTransfer = omit(this.props, internalProps);\n\n    return (\n      <div {...propsToTransfer} className={classes}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Container;\n"],"mappings":"AAKA","sourceRoot":""}