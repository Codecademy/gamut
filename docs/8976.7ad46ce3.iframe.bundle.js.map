{"version":3,"file":"8976.7ad46ce3.iframe.bundle.js","mappings":";;;;;AAKA;;AAEA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC8BA;;;AC7BA;AACA;AACA;AACA;;;AAGA;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAOA;;;AAmCA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;;AAGA;;;;;;;;;;;;;;;ACrFA;AACA;;;ACPA;;;AC2BA;AACA;AACA;AACA;AACA;;;;AAIA;AFlCA;AACA;;;AEkCA;;;;;AAKA;;;AAGA;;;AAGA;;AAGA;AAEA;;;AAGA;;AAGA;AF/CA;;;;;;AEiDA;;AAEA;AF5CA;;;;;;AE8CA;;AAGA;AACA;;;AAIA;;;AAGA;;AAGA;AACA;;AAEA;;;AAQA;;;AAGA;;AAEA;;AAaA;AAEA;;AAIA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;;;AAgDA;;;AAGA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqCA;;;;;AAcA;;AL7BA;;;;;;;;;;;AKgCA;;AAEA;;;AD9BA;;ACmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACyEA;AA4CA;;;;AAIA;AACA;;AAEA;;;AAGA;;;AAYA;AACA;;AAeA;AAEA;AH1JA;AACA;;AG0JA;AAMA;;;AAGA;AACA;AACA;AACA;;AAMA;;AAOA;;AAOA;AAKA;;AAQA;;;;AAKA;AAIA;;AAGA;;ACvLA;;AAkBA;;;ACQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;AAKA;AACA;;;;AAIA;AAEA;;;;;;;;AC1KA;;;;;;AAMA;;;;;;;AAOA;;;;;;AAOA;;;;;;;AAOA;;;;;;AAMA;;;;;;;;;AASA;;AAEA;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;AAsBA","sources":["webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/ErrorMessage.js","webpack://gamut-repo/./node_modules/lit-html/src/directive.ts","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/DistanceGuide.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/Icons.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/InspectorView/utils.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/InspectorView/InspectorView.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/Node.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/Footer/utils.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/Footer/Footer.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/ViewerMixin.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/FigspecFrameViewer.js","webpack://gamut-repo/./node_modules/@figspec/components/esm/es2015/FigspecViewer/FigspecFileViewer.js","webpack://gamut-repo/./node_modules/@storybook/addon-designs/dist/blocks.mjs"],"sourcesContent":["import { css, html } from \"lit\";\nexport const ErrorMessage = ({ title, children }) => html `\n  <div class=\"error-background\">\n    <div class=\"error-container\">\n      <span class=\"error-title\"\n        ><span class=\"error-badge\">Error</span>${title}</span\n      >\n      <span class=\"error-description\">${children}</span>\n    </div>\n  </div>\n`;\nexport const styles = css `\n  .error-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n\n    background: var(--error-bg);\n    color: var(--error-fg);\n  }\n\n  .error-container {\n    max-width: 800px;\n    margin: auto;\n    padding: 1em;\n  }\n\n  .error-badge {\n    display: inline-block;\n    font-size: 0.8em;\n    padding: 0.2em 0.5em;\n    margin-inline-end: 0.5em;\n\n    background: var(--error-color);\n    border-radius: 2px;\n    color: var(--error-bg);\n    text-transform: uppercase;\n  }\n\n  .error-title {\n    display: block;\n    font-size: 1.2em;\n\n    font-weight: bold;\n    text-transform: capitalize;\n  }\n\n  .error-description {\n    display: block;\n    margin-block-start: 1em;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = (typeof PartType)[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n","import { css, svg } from \"lit\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { getDistanceGuides, round } from \"./utils\";\nconst Line = ({ guide, reverseScale }) => {\n    const xLength = Math.abs(guide.points[0].x - guide.points[1].x);\n    const yLength = Math.abs(guide.points[0].y - guide.points[1].y);\n    if (xLength === 0 && yLength === 0) {\n        return null;\n    }\n    return svg `\n    <line\n      class=\"distance-line\"\n      x1=${guide.points[0].x}\n      y1=${guide.points[0].y}\n      x2=${guide.points[1].x}\n      y2=${guide.points[1].y}\n    />\n\n    ${guide.bisector &&\n        svg `\n        <line\n          class=\"distance-line\"\n          x1=${guide.bisector[0].x}\n          y1=${guide.bisector[0].y}\n          x2=${guide.bisector[1].x}\n          y2=${guide.bisector[1].y}\n          style=${styleMap({\n            strokeDasharray: `${4 * reverseScale}`,\n        })}\n          shape-rendering=\"geometricPrecision\"\n          fill=\"none\"\n        />\n      `}\n  `;\n};\nconst Tooltip = ({ guide, reverseScale, fontSize }) => {\n    const xLength = Math.abs(guide.points[0].x - guide.points[1].x);\n    const yLength = Math.abs(guide.points[0].y - guide.points[1].y);\n    if (xLength === 0 && yLength === 0) {\n        return null;\n    }\n    const text = round(Math.max(xLength, yLength)).toString(10);\n    // Decreases font width because every text is a number (narrow).\n    // We can measure the correct width with getComputedTextLength method on\n    // <text> element, but it needs access to DOM or creating an element each\n    // render cycle, both have performance costs.\n    const width = text.length * fontSize * 0.5;\n    const startMargin = fontSize * 0.25;\n    const vPadding = fontSize * 0.25;\n    const hPadding = fontSize * 0.5;\n    const x = xLength > yLength\n        ? (guide.points[0].x + guide.points[1].x) / 2 - width / 2\n        : guide.points[0].x;\n    const y = xLength > yLength\n        ? guide.points[0].y\n        : (guide.points[0].y + guide.points[1].y) / 2 - fontSize / 2;\n    const transform = [\n        `scale(${reverseScale})`,\n        xLength > yLength\n            ? `translate(0, ${startMargin + vPadding})`\n            : `translate(${startMargin + hPadding}, 0)`,\n    ].join(\" \");\n    const cx = x + width / 2;\n    const cy = y + fontSize / 2;\n    const transformOrigin = xLength > yLength ? `${cx} ${y}` : `${x} ${cy}`;\n    return svg `\n    <g class=\"distance-tooltip\">\n      <rect\n        x=${x - hPadding}\n        y=${y - vPadding}\n        rx=\"2\"\n        width=${width + hPadding * 2}\n        height=${fontSize + vPadding * 2}\n        transform=${transform}\n        transform-origin=${transformOrigin}\n        stroke=\"none\"\n      />\n\n      <text\n        x=${cx}\n        y=${y + fontSize - vPadding / 2}\n        text-anchor=\"middle\"\n        transform=${transform}\n        transform-origin=${transformOrigin}\n        stroke=\"none\"\n        fill=\"white\"\n        style=\"font-size: ${fontSize}px\"\n      >\n        ${text}\n      </text>\n    </g>\n  `;\n};\nconst guidesCache = new Map();\nexport const Guides = ({ node, distanceTo, reverseScale, fontSize, }) => {\n    const combinedId = node.id + \"\\n\" + distanceTo.id;\n    let guides = guidesCache.get(combinedId);\n    if (!guides) {\n        guides = getDistanceGuides(node.absoluteBoundingBox, distanceTo.absoluteBoundingBox);\n        guidesCache.set(combinedId, guides);\n    }\n    return [\n        ...guides.map((guide) => Line({ guide, reverseScale })),\n        ...guides.map((guide) => Tooltip({ guide, reverseScale, fontSize })),\n    ];\n};\nexport const styles = css `\n  .distance-line {\n    shape-rendering: geometricPrecision;\n    fill: none;\n    opacity: 0;\n  }\n\n  .distance-tooltip {\n    opacity: 0;\n  }\n\n  .guide:hover ~ .distance-line,\n  .guide:hover ~ .distance-tooltip {\n    opacity: 1;\n  }\n`;\n","import { svg } from \"lit\";\nexport const CloseIcon = ({ onClick = () => { } }) => svg `\n  <svg @click=${onClick} title=\"close icon\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"none\">\n    <path d=\"M1 19L19 1M19 19L1 1\" stroke=\"#B3B3B3\" stroke-width=\"2\"/>\n  </svg>\n`;\nexport const CopyIcon = ({ onClick = () => { } }) => svg `\n  <svg @click=${onClick} title=\"copy icon\" width=\"14\" height=\"14\" viewBox=\"0 0 30 30\" fill=\"none\">\n  <path d=\"M21 25.5C21 24.9477 20.5523 24.5 20 24.5C19.4477 24.5 19 24.9477 19 25.5H21ZM13 2H25V0H13V2ZM28 5V21H30V5H28ZM25 24H13V26H25V24ZM10 21V5H8V21H10ZM13 24C11.3431 24 10 22.6569 10 21H8C8 23.7614 10.2386 26 13 26V24ZM28 21C28 22.6569 26.6569 24 25 24V26C27.7614 26 30 23.7614 30 21H28ZM25 2C26.6569 2 28 3.34315 28 5H30C30 2.23858 27.7614 0 25 0V2ZM13 0C10.2386 0 8 2.23858 8 5H10C10 3.34315 11.3431 2 13 2V0ZM16.5 28H5V30H16.5V28ZM2 25V10H0V25H2ZM5 28C3.34315 28 2 26.6569 2 25H0C0 27.7614 2.23858 30 5 30V28ZM5 7H8V5H5V7ZM2 10C2 8.34315 3.34315 7 5 7V5C2.23858 5 0 7.23858 0 10H2ZM16.5 30C18.9853 30 21 27.9853 21 25.5H19C19 26.8807 17.8807 28 16.5 28V30Z\" fill=\"#B3B3B3\"/>\n</svg>\n`;\nexport const HorizontalPaddingIcon = () => svg `\n  <svg title=\"horizontal padding\" width=\"14\" height=\"14\" viewBox=\"0 0 29 28\" fill=\"none\">\n    <rect x=\"7\" y=\"8\" width=\"14\" height=\"14\" stroke=\"#B3B3B3\" stroke-width=\"2\"/>\n    <path d=\"M27 1V28\" stroke=\"#B3B3B3\" stroke-width=\"2\"/>\n    <path d=\"M1 0V28\" stroke=\"#B3B3B3\" stroke-width=\"2\"/>\n  </svg>\n`;\nexport const VerticalPaddingIcon = () => svg `\n  <svg title=\"vertical padding\" width=\"14\" height=\"14\" viewBox=\"0 0 29 28\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <rect x=\"8\" y=\"21\" width=\"14\" height=\"14\" transform=\"rotate(-90 8 21)\" stroke=\"#B3B3B3\" stroke-width=\"2\"/>\n    <path d=\"M1 1L28 0.999999\" stroke=\"#B3B3B3\" stroke-width=\"2\"/>\n    <path d=\"M0 27L28 27\" stroke=\"#B3B3B3\" stroke-width=\"2\"/>\n  </svg>\n`;\nexport const FigmaIcon = () => svg `\n  <svg title=\"figma logo\" width=\"11\" height=\"16\" viewBox=\"0 0 12 17\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      d=\"M5.5 1.5h-2c-1.105 0-2 .895-2 2 0 1.105.895 2 2 2h2v-4zm-5 2c0 1.043.533 1.963 1.341 2.5C1.033 6.537.5 7.457.5 8.5c0 1.043.533 1.963 1.341 2.5C1.033 11.537.5 12.457.5 13.5c0 1.657 1.343 3 3 3 1.657 0 3-1.343 3-3V10.736c.53.475 1.232.764 2 .764 1.657 0 3-1.343 3-3 0-1.043-.533-1.963-1.341-2.5.808-.537 1.341-1.457 1.341-2.5 0-1.657-1.343-3-3-3h-5c-1.657 0-3 1.343-3 3zm1 5c0-1.105.895-2 2-2h2v4h-2c-1.105 0-2-.895-2-2zm0 5c0-1.105.895-2 2-2h2v2c0 1.105-.895 2-2 2-1.105 0-2-.895-2-2zm7-3c-1.105 0-2-.895-2-2 0-1.105.895-2 2-2 1.105 0 2 .895 2 2 0 1.105-.895 2-2 2zm0-5h-2v-4h2c1.105 0 2 .895 2 2 0 1.105-.895 2-2 2z\"\n      fill-rule=\"evenodd\"\n      fill-opacity=\"1\"\n      fill=\"#000\"\n      stroke=\"none\"\n    ></path>\n  </svg>\n`;\n","const extractColorStyle = (color) => {\n    if (color.a === 0) {\n        return \"transparent\";\n    }\n    else if (color.a < 1) {\n        return `rgba(${rgbToIntArray(color).join(\", \")}, ${color.a.toFixed(2)})`;\n    }\n    else {\n        return rgbToHex(color);\n    }\n};\nconst extractGradientColorStyle = (color) => {\n    return new Gradient(color).cssColor;\n};\nexport class Gradient {\n    constructor(data) {\n        this.gradientHandles = {\n            start: data.gradientHandlePositions[0],\n            end: data.gradientHandlePositions[1],\n        };\n        this.colors = data.gradientStops;\n        this.colorObjects = this.createColorObjects(this.colors);\n        this.angle = this.calculateAngle(this.gradientHandles.start, this.gradientHandles.end);\n    }\n    get cssGradientArray() {\n        return this.colorObjects.map((color, index) => {\n            const position = this.floatToPercent(this.colors[index].position);\n            return color + \" \" + position;\n        });\n    }\n    get cssColor() {\n        const cssGradientArray = this.cssGradientArray;\n        cssGradientArray.unshift(this.angle + \"deg\");\n        return `linear-gradient(${cssGradientArray.join(\", \")})`;\n    }\n    createColorObjects(colors) {\n        return colors.map(({ color }) => extractColorStyle(color));\n    }\n    floatToPercent(value) {\n        return (value *= 100).toFixed(0) + \"%\";\n    }\n    calculateAngle(startHandle, endHandle) {\n        const radians = Math.atan(this.calculateGradient(startHandle, endHandle));\n        return parseInt(this.radToDeg(radians).toFixed(1));\n    }\n    calculateGradient(startHandle, endHandle) {\n        return ((endHandle.y - startHandle.y) / (endHandle.x - startHandle.x)) * -1;\n    }\n    radToDeg(radian) {\n        return (180 * radian) / Math.PI;\n    }\n}\nexport class NodeStyles {\n    constructor(node) {\n        var _a, _b, _c;\n        this.hasPadding = false;\n        this.height = `${Math.trunc(node.absoluteBoundingBox.height)}px`;\n        this.width = `${Math.trunc(node.absoluteBoundingBox.width)}px`;\n        // paddings\n        if (node.horizontalPadding || node.verticalPadding) {\n            this.hasPadding = true;\n            this.horizontalPadding = `${node.horizontalPadding}px`;\n            this.verticalPadding = `${node.verticalPadding}px`;\n        }\n        // font styles\n        if (node.style) {\n            this.fontFamily = node.style.fontFamily;\n            this.fontPostScriptName = (_a = node.style.fontPostScriptName) === null || _a === void 0 ? void 0 : _a.replace(\"-\", \" \");\n            this.fontWeight = node.style.fontWeight;\n            this.fontSize = `${Math.ceil(node.style.fontSize)}px`;\n            this.lineHeight = `${Math.trunc(node.style.lineHeightPx)}px`;\n        }\n        // border radii\n        if (node.rectangleCornerRadii) {\n            this.borderRadius =\n                node.rectangleCornerRadii.filter((radius) => radius === node.cornerRadius).length < 4\n                    ? `${node.rectangleCornerRadii.join(\"px \")}px`\n                    : `${node.cornerRadius}px`;\n        }\n        // colors, background, fill\n        if (node.backgroundColor || node.backgroundColor) {\n            const color = node.backgroundColor || ((_b = node.background) === null || _b === void 0 ? void 0 : _b[0].color);\n            this.background = extractColorStyle(color);\n        }\n        const fillColor = (_c = node.fills) === null || _c === void 0 ? void 0 : _c[0];\n        if (fillColor && fillColor.visible !== false) {\n            if (node.type === \"TEXT\") {\n                this.color = extractColorStyle(fillColor.color);\n            }\n            else if (fillColor.type.includes(\"GRADIENT\")) {\n                this.backgroundImage = extractGradientColorStyle(fillColor);\n            }\n            else if (fillColor.type === \"SOLID\") {\n                this.background = extractColorStyle(fillColor.color);\n            }\n        }\n        // borders\n        if (node.strokes && node.strokes.length > 0) {\n            this.borderColor = extractColorStyle(node.strokes[0].color);\n            this.border = `${node.strokeWeight}px solid ${this.borderColor}`;\n        }\n        // box-shadow\n        if (node.effects && node.effects.length > 0) {\n            const { offset, radius, color } = node.effects[0];\n            this.boxShadowColor = extractColorStyle(color);\n            this.boxShadow = `${(offset === null || offset === void 0 ? void 0 : offset.x) || 0}px ${(offset === null || offset === void 0 ? void 0 : offset.y) || 0}px 0 ${radius} ${this.boxShadowColor}`;\n        }\n    }\n    getStyles() {\n        return [\n            this.height && { property: \"height\", value: this.height },\n            this.width && { property: \"width\", value: this.width },\n            this.fontFamily && { property: \"font-family\", value: this.fontFamily },\n            this.fontSize && { property: \"font-size\", value: this.fontSize },\n            this.fontWeight && { property: \"font-weight\", value: this.fontWeight },\n            this.lineHeight && { property: \"line-height\", value: this.lineHeight },\n            this.borderRadius && {\n                property: \"border-radius\",\n                value: this.borderRadius,\n            },\n            this.backgroundImage && {\n                property: \"background-image\",\n                value: this.backgroundImage,\n            },\n            this.boxShadow && {\n                property: \"box-shadow\",\n                value: this.boxShadow,\n                color: this.boxShadowColor,\n            },\n            this.border && {\n                property: \"border\",\n                value: this.border,\n                color: this.borderColor,\n            },\n            this.background && {\n                property: \"background\",\n                value: this.background,\n                color: this.background,\n            },\n            this.color && { property: \"color\", value: this.color, color: this.color },\n        ].filter(Boolean);\n    }\n    getStyleSheet() {\n        return this.getStyles().map(getStyleRule).join(\"\\n\");\n    }\n}\nconst rgbToIntArray = (color) => [\n    Math.trunc(255 * color.r),\n    Math.trunc(255 * color.g),\n    Math.trunc(255 * color.b),\n];\nconst rgbToHex = (color) => {\n    const [r, g, b] = rgbToIntArray(color);\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n};\nexport const getStyleRule = ({ property, value }) => `${property}: ${value};`;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { css, html } from \"lit\";\nimport { HorizontalPaddingIcon, VerticalPaddingIcon, CloseIcon, CopyIcon, } from \"../Icons\";\nimport { getStyleRule, NodeStyles } from \"./utils\";\nconst copy = (text) => __awaiter(void 0, void 0, void 0, function* () {\n    yield navigator.clipboard.writeText(text);\n});\nexport const View = ({ node, onClose }) => {\n    if (!node) {\n        return null;\n    }\n    const nodeStyles = new NodeStyles(node);\n    // In order to disable canvas interactions (e.g. pan, click to\n    // deselect), we need to cancel JavaScript event propagation\n    // on the root element.\n    const stopPropagation = (ev) => ev.stopPropagation();\n    return html `\n    <div\n      class=\"inspector-view\"\n      @click=${stopPropagation}\n      @wheel=${stopPropagation}\n      @keydown=${stopPropagation}\n      @keyup=${stopPropagation}\n      @pointermove=${stopPropagation}\n    >\n      <div class=\"inspector-section selectable-content\">\n        <div class=\"title-section\">\n          <h4>${node.name}</h4>\n          ${CloseIcon({ onClick: onClose })}\n        </div>\n        <div class=\"properties-overview\">\n          <div class=\"title-section\">\n            <p class=\"inspector-property\">\n              <span>W: </span>${nodeStyles.width}\n            </p>\n            <p class=\"inspector-property\" style=\"margin-left: 16px;\">\n              <span>H: </span>${nodeStyles.height}\n            </p>\n          </div>\n          ${nodeStyles.fontPostScriptName\n        ? html `<p class=\"inspector-property\">\n                <span>Font:</span>\n                ${nodeStyles.fontPostScriptName}\n              </p>`\n        : null}\n        </div>\n      </div>\n      ${nodeStyles.hasPadding\n        ? html `<div class=\"inspector-section\">\n            <h4>Layout</h4>\n            ${nodeStyles.horizontalPadding &&\n            html `<p class=\"inspector-property\">\n              ${HorizontalPaddingIcon()} ${nodeStyles.horizontalPadding}\n            </p>`}\n            ${nodeStyles.verticalPadding &&\n            html `<p class=\"inspector-property\">\n              ${VerticalPaddingIcon()} ${nodeStyles.verticalPadding}\n            </p>`}\n          </div>`\n        : null}\n      ${node.characters\n        ? html `<div class=\"inspector-section\">\n            <div class=\"title-section\">\n              <h4>Content</h4>\n              ${CopyIcon({ onClick: () => copy(node.characters) })}\n            </div>\n            <p class=\"node-content code-section selectable-content\">\n              ${node.characters}\n            </p>\n          </div>`\n        : null}\n      ${StylesSection(nodeStyles)}\n    </div>\n  `;\n};\nexport const StylesSection = (nodeStyles) => {\n    const onClick = () => copy(nodeStyles.getStyleSheet());\n    const styles = nodeStyles.getStyles();\n    return html `<div class=\"inspector-section\">\n    <div class=\"title-section style-section\">\n      <h4>CSS</h4>\n      ${CopyIcon({ onClick })}\n    </div>\n    <div class=\"code-section selectable-content\">\n      ${styles.map(CSSProperty)}\n    </div>\n  </div>`;\n};\nconst CSSProperty = (cssProperty) => {\n    const { property, value, color } = cssProperty;\n    let coloredSquare = null;\n    switch (property) {\n        case \"background\":\n        case \"fill\":\n        case \"border\":\n        case \"box-shadow\":\n        case \"color\":\n            coloredSquare = html `<span\n        class=\"color-preview\"\n        style=\"background-color: ${color}\"\n      ></span>`;\n            break;\n        case \"background-image\":\n            coloredSquare = html `<span\n        class=\"color-preview\"\n        style=\"background-image: ${value}\"\n      ></span>`;\n            break;\n    }\n    return html `<div class=\"css-property\" @click=${() => copy(getStyleRule(cssProperty))}>\n    <span>${property}:</span>${coloredSquare}<span class=\"css-value\">${value}</span>;</span>\n  </div>`;\n};\nexport const styles = css `\n  .inspector-view {\n    height: 100%;\n    width: 300px;\n    position: absolute;\n    right: 0;\n    background: white;\n    border-left: 1px solid #ccc;\n    overflow-y: auto;\n    z-index: calc(var(--z-index) + 2);\n  }\n\n  .inspector-view h4 {\n    font-size: 16px;\n    margin: 0;\n  }\n\n  .style-section {\n    margin-bottom: 12px;\n  }\n\n  .title-section {\n    display: flex;\n    align-items: center;\n  }\n\n  .code-section {\n    padding: 8px;\n    background: #f3f3f3;\n    font-family: monospace;\n  }\n\n  .title-section svg {\n    cursor: pointer;\n    margin-left: auto;\n  }\n\n  .inspector-section {\n    padding: 16px;\n    border-bottom: 1px solid #eee;\n  }\n\n  .properties-overview {\n    font-family: monospace;\n    color: #518785;\n  }\n\n  .properties-overview p span {\n    color: #121212;\n  }\n\n  .inspector-property {\n    display: flex;\n    align-items: center;\n    margin-bottom: 0;\n  }\n\n  .inspector-property span {\n    color: #b3b3b3;\n    margin-right: 4px;\n  }\n\n  .inspector-property svg {\n    margin-right: 8px;\n  }\n\n  .css-property {\n    margin: 8px;\n    transition: background-color ease-in-out 100ms;\n  }\n\n  .css-property:hover {\n    cursor: pointer;\n    background-color: #e8e8e8;\n  }\n\n  .css-value {\n    color: #518785;\n    margin-left: 4px;\n  }\n\n  .color-preview {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    border: 1px solid #ccc;\n    margin-left: 4px;\n    vertical-align: middle;\n  }\n\n  .selectable-content {\n    cursor: text;\n    user-select: text;\n  }\n`;\n","import { css, html, svg } from \"lit\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { round } from \"./utils\";\nexport const Outline = ({ node, selected = false, computedThickness, onClick, }) => {\n    const { x, y, width, height } = node.absoluteBoundingBox;\n    const radius = \"cornerRadius\" in node && node.cornerRadius\n        ? {\n            topLeft: node.cornerRadius,\n            topRight: node.cornerRadius,\n            bottomRight: node.cornerRadius,\n            bottomLeft: node.cornerRadius,\n        }\n        : \"rectangleCornerRadii\" in node && node.rectangleCornerRadii\n            ? {\n                topLeft: node.rectangleCornerRadii[0],\n                topRight: node.rectangleCornerRadii[1],\n                bottomRight: node.rectangleCornerRadii[2],\n                bottomLeft: node.rectangleCornerRadii[3],\n            }\n            : {\n                topLeft: 0,\n                topRight: 0,\n                bottomRight: 0,\n                bottomLeft: 0,\n            };\n    // Since SVG can't control where to draw borders (I mean you can't draw inset borders), we need to\n    // shift each drawing points by the half of the border width.\n    const shift = computedThickness / 2;\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n    // [M] ... Move to\n    // [L] ... Line to\n    // [A] ... Arc to\n    // [Z] ... Close path\n    const moveTo = (x, y) => `M${x},${y}`;\n    const lineTo = (x, y) => `L${x},${y}`;\n    const arcTo = (r, x, y) => `A${r},${r} 0 0 1 ${x},${y}`;\n    const boxPath = [\n        moveTo(radius.topLeft + shift, shift),\n        lineTo(width - radius.topRight, shift),\n        arcTo(radius.topRight - shift, width - shift, radius.topRight),\n        lineTo(width - shift, height - radius.bottomRight),\n        arcTo(radius.bottomRight - shift, width - radius.bottomRight, height - shift),\n        lineTo(radius.bottomLeft, height - shift),\n        arcTo(radius.bottomLeft - shift, shift, height - radius.bottomLeft),\n        lineTo(shift, radius.topLeft),\n        arcTo(radius.topLeft - shift, radius.topLeft, shift),\n        \"Z\",\n    ].join(\" \");\n    return svg `\n    <path\n      class=\"guide\"\n      d=${boxPath}\n      shape-rendering=\"geometricPrecision\"\n      fill=\"none\"\n      transform=\"translate(${x}, ${y})\"\n      ?data-selected=${selected}\n      @click=${onClick}\n    />\n  `;\n};\nexport const Tooltip = ({ nodeSize: { x, y, width, height }, offsetX, offsetY, reverseScale, }) => {\n    const tooltipStyle = {\n        top: `${offsetY + y + height}px`,\n        left: `${offsetX + x + width / 2}px`,\n        transform: `translateX(-50%) scale(${reverseScale}) translateY(0.25em)`,\n    };\n    return html `\n    <div class=\"tooltip\" style=\"${styleMap(tooltipStyle)}\">\n      ${round(width)} x ${round(height)}\n    </div>\n  `;\n};\nexport const styles = css `\n  .guide {\n    /*\n     * SVGs cannot be pixel perfect, especially floating values.\n     * Since many platform renders them visually incorrectly (probably they\n     * are following the spec), it's safe to set overflow to visible.\n     * Cropped borders are hard to visible and ugly.\n     */\n    overflow: visible;\n\n    pointer-events: all;\n\n    opacity: 0;\n  }\n  .guide:hover {\n    opacity: 1;\n  }\n  .guide[data-selected] {\n    opacity: 1;\n    stroke: var(--guide-selected-color);\n  }\n\n  .tooltip {\n    position: absolute;\n    padding: 0.25em 0.5em;\n    font-size: var(--guide-tooltip-font-size);\n\n    color: var(--guide-selected-tooltip-fg);\n    background-color: var(--guide-selected-tooltip-bg);\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: calc(var(--z-index) + 1);\n\n    transform-origin: top center;\n  }\n`;\n","const SECOND = 1000;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\nconst YEAR = 365 * DAY;\nconst intervals = [\n    { gte: YEAR, divisor: YEAR, unit: \"year\" },\n    { gte: MONTH, divisor: MONTH, unit: \"month\" },\n    { gte: WEEK, divisor: WEEK, unit: \"week\" },\n    { gte: DAY, divisor: DAY, unit: \"day\" },\n    { gte: HOUR, divisor: HOUR, unit: \"hour\" },\n    { gte: MINUTE, divisor: MINUTE, unit: \"minute\" },\n    { gte: 30 * SECOND, divisor: SECOND, unit: \"seconds\" },\n    { gte: 0, divisor: 1, text: \"just now\" },\n];\nconst getTime = (targetDate) => {\n    const date = typeof targetDate === \"object\"\n        ? targetDate\n        : new Date(targetDate);\n    return date.getTime();\n};\n/**\n * Receives two dates to compare and returns \"time ago\" based on them\n * example: 4 weeks ago\n *\n * Heavily inspired by https://stackoverflow.com/a/67338038/938822\n */\nexport const fromNow = (date, nowDate = Date.now(), rft = new Intl.RelativeTimeFormat(undefined, { numeric: \"auto\" })) => {\n    const now = getTime(nowDate);\n    const diff = now - getTime(date);\n    const diffAbs = Math.abs(diff);\n    for (const interval of intervals) {\n        if (diffAbs >= interval.gte) {\n            const x = Math.round(Math.abs(diff) / interval.divisor);\n            const isInFuture = diff < 0;\n            const intervalUnit = interval.unit;\n            return intervalUnit\n                ? rft.format(isInFuture ? x : -x, intervalUnit)\n                : interval.text;\n        }\n    }\n};\n","import { css, html } from \"lit\";\nimport { FigmaIcon } from \"../Icons\";\nimport { fromNow } from \"./utils\";\nexport const styles = css `\n  .figma-footer {\n    flex: 0;\n    z-index: calc(var(--z-index) + 1);\n    border-top: 1px solid #ccc;\n    min-height: 48px;\n    padding: 0 16px;\n    text-decoration: none;\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    align-items: center;\n    background-color: #fff;\n    overflow-x: auto;\n    cursor: pointer;\n    font-size: 12px;\n    color: rgba(0, 0, 0, 0.8);\n  }\n\n  .figma-footer--icon {\n    margin-right: 12px;\n  }\n\n  .figma-footer--title {\n    font-weight: 600;\n    margin-right: 4px;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .figma-footer--timestamp {\n    white-space: nowrap;\n    overflow: hidden;\n  }\n`;\nexport const Footer = (metadata) => {\n    // Do not render in case there is no metadata or a link is not passed\n    if (!metadata ||\n        !metadata.link ||\n        metadata.link === undefined ||\n        metadata.link === \"undefined\") {\n        return null;\n    }\n    const { link, timestamp, fileName } = metadata;\n    return html `<a\n    class=\"figma-footer\"\n    target=\"_blank\"\n    rel=\"noopener\"\n    title=\"Open in Figma\"\n    href=\"${link}\"\n  >\n    <span class=\"figma-footer--icon\"> ${FigmaIcon()} </span>\n    <span class=\"figma-footer--title\"> ${fileName} </span>\n    <span\n      title=\"Last time edited: ${new Date(timestamp).toUTCString()}\"\n      class=\"figma-footer--timestamp\"\n    >\n      Edited ${fromNow(timestamp)}\n    </span>\n  </a>`;\n};\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nimport { css, html, svg } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { extendStyles } from \"./utils\";\nimport { NodeSelectableMixin } from \"./NodeSelectableMixin\";\nimport { PositionedMixin } from \"./PositionedMixin\";\nimport * as DistanceGuide from \"./DistanceGuide\";\nimport * as InspectorView from \"./InspectorView/InspectorView\";\nimport * as ErrorMessage from \"./ErrorMessage\";\nimport * as Node from \"./Node\";\nimport * as FigmaFooter from \"./Footer/Footer\";\nexport const ViewerMixin = (superClass) => {\n    var _Viewer_canvasSize, _Viewer_effectMargins, _Viewer_flattenedNodes, _Viewer_handleNodeClick, _Viewer_getNodeById;\n    class Viewer extends NodeSelectableMixin(PositionedMixin(superClass)) {\n        constructor(...args) {\n            super(...args);\n            this.zoomMargin = 50;\n            this.link = \"\";\n            // Cached values\n            _Viewer_canvasSize.set(this, void 0);\n            _Viewer_effectMargins.set(this, void 0);\n            _Viewer_flattenedNodes.set(this, void 0);\n            _Viewer_handleNodeClick.set(this, (node) => (ev) => {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.selectedNode = node;\n            });\n            _Viewer_getNodeById.set(this, (id) => {\n                var _a, _b;\n                return (_b = (_a = __classPrivateFieldGet(this, _Viewer_flattenedNodes, \"f\")) === null || _a === void 0 ? void 0 : _a.find((n) => n.id === id)) !== null && _b !== void 0 ? _b : null;\n            });\n        }\n        static get styles() {\n            // @ts-ignore\n            const styles = super.styles;\n            return extendStyles(styles, [\n                css `\n          :host {\n            --default-error-bg: #fff;\n            --default-error-fg: #333;\n\n            --bg: var(--figspec-viewer-bg, #e5e5e5);\n            --z-index: var(--figspec-viewer-z-index, 0);\n            --error-bg: var(--figspec-viewer-error-bg, var(--default-error-bg));\n            --error-fg: var(--figspec-viewer-error-fg, var(--default-error-fg));\n            --error-color: var(--figspec-viewer-error-color, tomato);\n\n            --guide-thickness: var(--figspec-viewer-guide-thickness, 1.5px);\n            --guide-color: var(--figspec-viewer-guide-color, tomato);\n            --guide-selected-color: var(\n              --figspec-viewer-guide-selected-color,\n              dodgerblue\n            );\n            --guide-tooltip-fg: var(--figspec-viewer-guide-tooltip-fg, white);\n            --guide-selected-tooltip-fg: var(\n              --figspec-viewer-guide-selected-tooltip-fg,\n              white\n            );\n            --guide-tooltip-bg: var(\n              --figspec-viewer-guide-tooltip-bg,\n              var(--guide-color)\n            );\n            --guide-selected-tooltip-bg: var(\n              --figspec-viewer-guide-selected-tooltip-bg,\n              var(--guide-selected-color)\n            );\n            --guide-tooltip-font-size: var(\n              --figspec-viewer-guide-tooltip-font-size,\n              12px\n            );\n\n            position: relative;\n            display: block;\n\n            background-color: var(--bg);\n            user-select: none;\n            overflow: hidden;\n            z-index: var(--z-index);\n          }\n\n          @media (prefers-color-scheme: dark) {\n            :host {\n              --default-error-bg: #222;\n              --default-error-fg: #fff;\n            }\n          }\n\n          .spec-canvas-wrapper {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            flex-direction: column-reverse;\n          }\n\n          .canvas {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            flex: 1;\n          }\n\n          .rendered-image {\n            position: absolute;\n            top: 0;\n            left: 0;\n          }\n\n          .guides {\n            position: absolute;\n\n            overflow: visible;\n            stroke: var(--guide-color);\n            fill: var(--guide-color);\n            pointer-events: none;\n            z-index: calc(var(--z-index) + 2);\n          }\n        `,\n                Node.styles,\n                ErrorMessage.styles,\n                DistanceGuide.styles,\n                InspectorView.styles,\n                FigmaFooter.styles,\n            ]);\n        }\n        get __images() {\n            return {};\n        }\n        deselectNode() {\n            this.selectedNode = null;\n        }\n        get error() {\n            if (!__classPrivateFieldGet(this, _Viewer_canvasSize, \"f\") || !__classPrivateFieldGet(this, _Viewer_flattenedNodes, \"f\")) {\n                return ErrorMessage.ErrorMessage({\n                    title: \"Error\",\n                    children: \"Please call `__updateTree/1` method with a valid parameter.\",\n                });\n            }\n            return null;\n        }\n        render() {\n            if (this.error) {\n                if (this.error instanceof Error) {\n                    return ErrorMessage.ErrorMessage({\n                        title: this.error.name || \"Error\",\n                        children: this.error.message,\n                    });\n                }\n                if (typeof this.error === \"string\") {\n                    return ErrorMessage.ErrorMessage({\n                        title: \"Error\",\n                        children: this.error,\n                    });\n                }\n                return this.error;\n            }\n            const canvasSize = __classPrivateFieldGet(this, _Viewer_canvasSize, \"f\");\n            const reverseScale = 1 / this.scale;\n            const guideThickness = `calc(var(--guide-thickness) * ${reverseScale})`;\n            const computedGuideThickness = parseFloat(getComputedStyle(this).getPropertyValue(\"--guide-thickness\"));\n            const computedGuideTooltipFontSize = parseFloat(getComputedStyle(this).getPropertyValue(\"--guide-tooltip-font-size\"));\n            return html `\n        <div class=\"spec-canvas-wrapper\" @click=${this.deselectNode}>\n          <div\n            class=\"canvas\"\n            style=\"\n          width: ${canvasSize.width}px;\n          height: ${canvasSize.height}px;\n\n          transform: translate(-50%, -50%) ${this.canvasTransform.join(\" \")}\n        \"\n          >\n            ${Object.entries(this.__images).map(([nodeId, uri]) => {\n                var _a;\n                const node = __classPrivateFieldGet(this, _Viewer_getNodeById, \"f\").call(this, nodeId);\n                if (!node ||\n                    !(\"absoluteBoundingBox\" in node) ||\n                    !((_a = __classPrivateFieldGet(this, _Viewer_effectMargins, \"f\")) === null || _a === void 0 ? void 0 : _a[node.id])) {\n                    return null;\n                }\n                const margin = __classPrivateFieldGet(this, _Viewer_effectMargins, \"f\")[node.id];\n                return html `\n                <img\n                  class=\"rendered-image\"\n                  src=\"${uri}\"\n                  style=${styleMap({\n                    top: `${node.absoluteBoundingBox.y - canvasSize.y}px`,\n                    left: `${node.absoluteBoundingBox.x - canvasSize.x}px`,\n                    marginTop: `${-margin.top}px`,\n                    marginLeft: `${-margin.left}px`,\n                    width: node.absoluteBoundingBox.width +\n                        margin.left +\n                        margin.right +\n                        \"px\",\n                    height: node.absoluteBoundingBox.height +\n                        margin.top +\n                        margin.bottom +\n                        \"px\",\n                })}\n                />\n              `;\n            })}\n            ${this.selectedNode &&\n                Node.Tooltip({\n                    nodeSize: this.selectedNode.absoluteBoundingBox,\n                    offsetX: -canvasSize.x,\n                    offsetY: -canvasSize.y,\n                    reverseScale,\n                })}\n            ${svg `\n            <svg\n              class=\"guides\"\n              viewBox=\"0 0 ${canvasSize.width} ${canvasSize.height}\"\n              width=${canvasSize.width}\n              height=${canvasSize.height}\n              style=${styleMap({\n                left: `${-canvasSize.x}px`,\n                top: `${-canvasSize.y}px`,\n                strokeWidth: guideThickness,\n            })}\n            >\n              ${this.selectedNode &&\n                Node.Outline({\n                    node: this.selectedNode,\n                    selected: true,\n                    computedThickness: computedGuideThickness * reverseScale,\n                })}\n\n              ${__classPrivateFieldGet(this, _Viewer_flattenedNodes, \"f\").map((node) => {\n                var _a;\n                if (node.id === ((_a = this.selectedNode) === null || _a === void 0 ? void 0 : _a.id)) {\n                    return null;\n                }\n                return svg `\n                  <g>\n                    ${Node.Outline({\n                    node,\n                    computedThickness: computedGuideThickness * reverseScale,\n                    onClick: __classPrivateFieldGet(this, _Viewer_handleNodeClick, \"f\").call(this, node),\n                })}\n                    ${this.selectedNode &&\n                    DistanceGuide.Guides({\n                        node,\n                        distanceTo: this.selectedNode,\n                        reverseScale,\n                        fontSize: computedGuideTooltipFontSize,\n                    })}\n                  </g>\n                `;\n            })}\n            </svg>\n          `}\n          </div>\n          ${InspectorView.View({\n                node: this.selectedNode,\n                onClose: this.deselectNode,\n            })}\n          ${FigmaFooter.Footer(this.getMetadata())}\n        </div>\n      `;\n        }\n        // implemented in FileViewer/FrameViewer\n        getMetadata() {\n            return undefined;\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this.resetZoom();\n        }\n        updated(changedProperties) {\n            super.updated(changedProperties);\n        }\n        __updateTree(node) {\n            if (!(node.type === \"CANVAS\" ||\n                node.type === \"FRAME\" ||\n                node.type === \"COMPONENT\" ||\n                //@ts-ignore NOTE: figma-js does not implement COMPONENT_SET type (yet?)\n                node.type === \"COMPONENT_SET\")) {\n                throw new Error(\"Cannot update node tree: Top level node MUST be one of CANVAS, FRAME, COMPONENT, or COMPONENT_SET\");\n            }\n            __classPrivateFieldSet(this, _Viewer_canvasSize, node.type === \"CANVAS\" ? getCanvasSize(node) : node.absoluteBoundingBox, \"f\");\n            __classPrivateFieldSet(this, _Viewer_flattenedNodes, flattenNode(node), \"f\");\n            // Since above properties aren't \"attribute\", their changes does not\n            // trigger an update. We need to manually request an update.\n            this.requestUpdate();\n        }\n        __updateEffectMargins() {\n            if (!this.__images) {\n                return;\n            }\n            const containers = Object.keys(this.__images)\n                .map(__classPrivateFieldGet(this, _Viewer_getNodeById, \"f\"))\n                .filter((n) => !!n);\n            __classPrivateFieldSet(this, _Viewer_effectMargins, containers.reduce((margin, node) => {\n                if (!(\"absoluteBoundingBox\" in node)) {\n                    return margin;\n                }\n                return Object.assign(Object.assign({}, margin), { [node.id]: getEffectMargin(node, flattenNode(node)) });\n            }, {}), \"f\");\n            this.requestUpdate();\n        }\n        resetZoom() {\n            if (__classPrivateFieldGet(this, _Viewer_canvasSize, \"f\")) {\n                // Set initial zoom level based on element size\n                const { width, height } = __classPrivateFieldGet(this, _Viewer_canvasSize, \"f\");\n                const { width: elementWidth, height: elementHeight, } = this.getBoundingClientRect();\n                const wDiff = elementWidth / (width + this.zoomMargin * 2);\n                const hDiff = elementHeight / (height + this.zoomMargin * 2);\n                this.scale = Math.min(wDiff, hDiff, 1);\n            }\n        }\n    }\n    _Viewer_canvasSize = new WeakMap(), _Viewer_effectMargins = new WeakMap(), _Viewer_flattenedNodes = new WeakMap(), _Viewer_handleNodeClick = new WeakMap(), _Viewer_getNodeById = new WeakMap();\n    __decorate([\n        property({\n            type: Number,\n            attribute: \"zoom-margin\",\n        })\n    ], Viewer.prototype, \"zoomMargin\", void 0);\n    __decorate([\n        property({\n            type: String,\n            attribute: \"link\",\n        })\n    ], Viewer.prototype, \"link\", void 0);\n    return Viewer;\n};\nfunction getCanvasSize(node) {\n    const left = [];\n    const right = [];\n    const top = [];\n    const bottom = [];\n    for (const child of node.children) {\n        if (child.type !== \"FRAME\" && child.type !== \"COMPONENT\") {\n            continue;\n        }\n        const { x, y, width, height } = child.absoluteBoundingBox;\n        left.push(x);\n        right.push(x + width);\n        top.push(y);\n        bottom.push(y + height);\n    }\n    const minX = Math.min(...left);\n    const minY = Math.min(...top);\n    return {\n        x: minX,\n        y: minY,\n        width: Math.abs(Math.max(...right) - minX),\n        height: Math.abs(Math.min(...bottom) - minY),\n    };\n}\nfunction getEffectMargin(container, nodes) {\n    const points = nodes.map((node) => {\n        if (!(\"effects\" in node)) {\n            return {\n                top: node.absoluteBoundingBox.y,\n                right: node.absoluteBoundingBox.x + node.absoluteBoundingBox.width,\n                bottom: node.absoluteBoundingBox.y + node.absoluteBoundingBox.height,\n                left: node.absoluteBoundingBox.x,\n            };\n        }\n        const blurRadiuses = node.effects\n            .filter((effect) => effect.visible && effect.type === \"LAYER_BLUR\")\n            .map((effect) => effect.radius);\n        const shadowMargins = node.effects\n            .filter((effect) => effect.visible && effect.type === \"DROP_SHADOW\" && !!effect.offset)\n            .map((effect) => {\n            return {\n                left: effect.radius - effect.offset.x,\n                top: effect.radius - effect.offset.y,\n                right: effect.radius + effect.offset.x,\n                bottom: effect.radius + effect.offset.y,\n            };\n        });\n        const margin = {\n            top: Math.max(0, ...blurRadiuses, ...shadowMargins.map((margin) => margin.top)),\n            right: Math.max(0, ...blurRadiuses, ...shadowMargins.map((margin) => margin.right)),\n            bottom: Math.max(0, ...blurRadiuses, ...shadowMargins.map((margin) => margin.bottom)),\n            left: Math.max(0, ...blurRadiuses, ...shadowMargins.map((margin) => margin.left)),\n        };\n        return {\n            top: node.absoluteBoundingBox.y - margin.top,\n            right: node.absoluteBoundingBox.x +\n                node.absoluteBoundingBox.width +\n                margin.right,\n            bottom: node.absoluteBoundingBox.y +\n                node.absoluteBoundingBox.height +\n                margin.bottom,\n            left: node.absoluteBoundingBox.x - margin.left,\n        };\n    });\n    const bounds = {\n        top: Math.min(...points.map((p) => p.top)),\n        right: Math.max(...points.map((p) => p.right)),\n        bottom: Math.max(...points.map((p) => p.bottom)),\n        left: Math.min(...points.map((p) => p.left)),\n    };\n    return {\n        top: container.absoluteBoundingBox.y - bounds.top,\n        right: bounds.right -\n            container.absoluteBoundingBox.x -\n            container.absoluteBoundingBox.width,\n        bottom: bounds.bottom -\n            container.absoluteBoundingBox.y -\n            container.absoluteBoundingBox.height,\n        left: container.absoluteBoundingBox.x - bounds.left,\n    };\n}\nfunction flattenNode(node, depth = 0) {\n    if (!(\"absoluteBoundingBox\" in node)) {\n        return node.children.map((child) => flattenNode(child, depth + 1)).flat();\n    }\n    if (!(\"children\" in node) || node.children.length === 0) {\n        return [Object.assign(Object.assign({}, node), { depth })];\n    }\n    return [\n        Object.assign(Object.assign({}, node), { depth }),\n        ...node.children.map((child) => flattenNode(child, depth + 1)).flat(),\n    ];\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport * as ErrorMessage from \"./ErrorMessage\";\nimport { ViewerMixin } from \"./ViewerMixin\";\n// TODO: Move docs for props in mixins (waiting for support at web-component-analyzer)\n/**\n * A Figma spec viewer. Displays a rendered image alongside sizing guides.\n * @element figspec-frame-viewer\n *\n * @property {number} [panX=0]\n * Current pan offset in px for X axis.\n * This is a \"before the scale\" value.\n *\n * @property {number} [panY=0]\n * Current pan offset in px for Y axis.\n * This is a \"before the scale\" value.\n *\n * @property {number} [scale=1]\n * Current zoom level, where 1.0 = 100%.\n *\n * @property {number} [zoomSpeed=500]\n * How fast zooming when do ctrl+scroll / pinch gestures.\n * Available values: 1 ~ 1000\n * @attr [zoom-speed=500] See docs for `zoomSpeed` property.\n *\n * @property {number} [panSpeed=500]\n * How fast panning when scroll vertically or horizontally.\n * This does not affect to dragging with middle button pressed.\n * Available values: 1 ~ 1000.\n * @attr [pan-speed=500] See docs for `panSpeed` property.\n *\n * @property {Figma.Node | null} [selectedNode=null]\n * Current selected node.\n *\n * @property {string} [link=null]\n * Figma link for the given project/node. If passed, figspec will present a footer with metadata and a link to figma.\n *\n * @property {number} [zoomMargin=50]\n * The minimum margin for the preview canvas in px. Will be used when the preview\n * setting a default zooming scale for the canvas.\n * @attr [zoom-margin=50] See docs for `zoomMargin` property.\n *\n * @fires scalechange When a user zoom-in or zoom-out the preview.\n * @fires positionchange When a user panned the preview.\n * @fires nodeselect When a user selected / unselected a node.\n */\nexport class FigspecFrameViewer extends ViewerMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        /**\n         * A response of \"GET file nodes\" API.\n         * https://www.figma.com/developers/api#get-file-nodes-endpoint\n         */\n        this.nodes = null;\n        /**\n         * An image rendered by \"GET image\" API.\n         * https://www.figma.com/developers/api#get-images-endpoint\n         */\n        this.renderedImage = null;\n    }\n    /** @private */\n    get isMovable() {\n        return !!(this.nodes && this.renderedImage && this.documentNode);\n    }\n    /**\n     * Readonly. Document node (= root drawable node).\n     * @readonly\n     */\n    get documentNode() {\n        if (!this.nodes) {\n            return null;\n        }\n        const documentNode = Object.values(this.nodes.nodes)[0];\n        if (!documentNode || !(\"absoluteBoundingBox\" in documentNode.document)) {\n            return null;\n        }\n        return documentNode.document;\n    }\n    /** @private */\n    get __images() {\n        if (!this.documentNode || !this.renderedImage) {\n            return {};\n        }\n        return {\n            [this.documentNode.id]: this.renderedImage,\n        };\n    }\n    /** @private */\n    get error() {\n        if (!this.nodes || !this.renderedImage) {\n            return ErrorMessage.ErrorMessage({\n                title: \"Parameter error\",\n                children: html `<span>\n          Both <code>nodes</code> and <code>rendered-image</code> are required.\n        </span>`,\n            });\n        }\n        if (!this.documentNode) {\n            return ErrorMessage.ErrorMessage({\n                title: \"Parameter Error\",\n                children: html `\n          <span> Document node is empty or does not have size. </span>\n        `,\n            });\n        }\n        if (super.error) {\n            return super.error;\n        }\n    }\n    getMetadata() {\n        return {\n            fileName: this.nodes.name,\n            timestamp: this.nodes.lastModified,\n            link: this.link,\n        };\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.documentNode) {\n            this.__updateTree(this.documentNode);\n            this.__updateEffectMargins();\n            this.resetZoom();\n        }\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has(\"nodes\")) {\n            if (!this.documentNode)\n                return;\n            this.__updateTree(this.documentNode);\n            this.resetZoom();\n        }\n        if (changedProperties.has(\"renderedImage\")) {\n            this.__updateEffectMargins();\n        }\n    }\n}\n__decorate([\n    property({\n        type: Object,\n    })\n], FigspecFrameViewer.prototype, \"nodes\", void 0);\n__decorate([\n    property({\n        type: String,\n        attribute: \"rendered-image\",\n    })\n], FigspecFrameViewer.prototype, \"renderedImage\", void 0);\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FigspecFileViewer_selectFirstPage, _FigspecFileViewer_handlePageChange;\nimport { LitElement, css, html } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport * as ErrorMessage from \"./ErrorMessage\";\nimport { ViewerMixin } from \"./ViewerMixin\";\nimport { extendStyles } from \"./utils\";\n// TODO: Move docs for props in mixins (waiting for support at web-component-analyzer)\n/**\n * A Figma spec viewer. Displays a rendered image alongside sizing guides.\n * @element figspec-file-viewer\n *\n * @property {number} [panX=0]\n * Current pan offset in px for X axis.\n * This is a \"before the scale\" value.\n *\n * @property {number} [panY=0]\n * Current pan offset in px for Y axis.\n * This is a \"before the scale\" value.\n *\n * @property {number} [scale=1]\n * Current zoom level, where 1.0 = 100%.\n *\n * @property {number} [zoomSpeed=500]\n * How fast zooming when do ctrl+scroll / pinch gestures.\n * Available values: 1 ~ 1000\n * @attr [zoom-speed=500] See docs for `zoomSpeed` property.\n *\n * @property {number} [panSpeed=500]\n * How fast panning when scroll vertically or horizontally.\n * This does not affect to dragging with middle button pressed.\n * Available values: 1 ~ 1000.\n * @attr [pan-speed=500] See docs for `panSpeed` property.\n *\n * @property {Figma.Node | null} [selectedNode=null]\n * Current selected node.\n *\n * @property {string} [link=null]\n * Figma link for the given project/node. If passed, figspec will present a footer with metadata and a link to figma.\n *\n * @property {number} [zoomMargin=50]\n * The minimum margin for the preview canvas in px. Will be used when the preview\n * setting a default zooming scale for the canvas.\n * @attr [zoom-margin=50] See docs for `zoomMargin` property.\n *\n * @fires scalechange When a user zoom-in or zoom-out the preview.\n * @fires positionchange When a user panned the preview.\n * @fires nodeselect When a user selected / unselected a node.\n */\nexport class FigspecFileViewer extends ViewerMixin(LitElement) {\n    constructor() {\n        super(...arguments);\n        /**\n         * A response of \"GET file nodes\" API.\n         * https://www.figma.com/developers/api#get-file-nodes-endpoint\n         */\n        this.documentNode = null;\n        /**\n         * A record of rendered images, where key is an ID of the node,\n         * value is an URI of the image.\n         * https://www.figma.com/developers/api#get-images-endpoint\n         */\n        this.renderedImages = null;\n        /**\n         * Current selected page (node whose type is \"CANVAS\").\n         */\n        this.selectedPage = null;\n        _FigspecFileViewer_selectFirstPage.set(this, () => {\n            var _a;\n            if (!this.documentNode) {\n                this.selectedPage = null;\n                return;\n            }\n            this.selectedPage =\n                (_a = this.documentNode.document.children.filter((c) => c.type === \"CANVAS\")[0]) !== null && _a !== void 0 ? _a : null;\n        });\n        _FigspecFileViewer_handlePageChange.set(this, (ev) => {\n            var _a, _b;\n            const target = ev.currentTarget;\n            this.selectedPage =\n                (_b = (_a = this.documentNode) === null || _a === void 0 ? void 0 : _a.document.children.find((c) => c.id === target.value)) !== null && _b !== void 0 ? _b : null;\n            if (this.selectedPage) {\n                this.__updateTree(this.selectedPage);\n                this.resetZoom();\n                this.__updateEffectMargins();\n                this.panX = 0;\n                this.panY = 0;\n            }\n        });\n    }\n    /** @private */\n    get isMovable() {\n        return !!(this.renderedImages && this.documentNode);\n    }\n    /** @private */\n    get __images() {\n        return this.renderedImages || {};\n    }\n    /** @private */\n    get error() {\n        if (!this.documentNode || !this.renderedImages) {\n            return ErrorMessage.ErrorMessage({\n                title: \"Parameter error\",\n                children: html `<span>\n          Both <code>document-node</code> and <code>rendered-images</code> are\n          required.\n        </span>`,\n            });\n        }\n        if (super.error) {\n            return super.error;\n        }\n    }\n    static get styles() {\n        return extendStyles(super.styles, [\n            css `\n        :host {\n          --figspec-control-bg-default: #fcfcfc;\n          --figspec-control-fg-default: #333;\n\n          --control-bg: var(\n            --figspec-control-bg,\n            var(--figspec-control-bg-default)\n          );\n          --control-fg: var(\n            --figspec-control-bg,\n            var(--figspec-control-fg-default)\n          );\n          --control-shadow: var(\n            --figspec-control-shadow,\n            0 2px 4px rgba(0, 0, 0, 0.3)\n          );\n          --padding: var(--figspec-control-padding, 8px 16px);\n\n          display: flex;\n          flex-direction: column;\n        }\n\n        @media (prefers-color-scheme: dark) {\n          :host {\n            --figspec-control-bg-default: #222;\n            --figspec-control-fg-default: #fff;\n          }\n        }\n\n        .controls {\n          flex-shrink: 0;\n          padding: var(--padding);\n\n          background-color: var(--control-bg);\n          box-shadow: var(--control-shadow);\n          color: var(--control-fg);\n          z-index: 1;\n        }\n\n        .view {\n          position: relative;\n          flex-grow: 1;\n          flex-shrink: 1;\n        }\n      `,\n        ]);\n    }\n    render() {\n        var _a;\n        return html `\n      <div class=\"controls\">\n        <select @change=${__classPrivateFieldGet(this, _FigspecFileViewer_handlePageChange, \"f\")}>\n          ${(_a = this.documentNode) === null || _a === void 0 ? void 0 : _a.document.children.map((c) => html `<option value=${c.id}>${c.name}</option>`)}\n        </select>\n      </div>\n\n      <div class=\"view\">${super.render()}</div>\n    `;\n    }\n    getMetadata() {\n        return {\n            fileName: this.documentNode.name,\n            timestamp: this.documentNode.lastModified,\n            link: this.link,\n        };\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        if (this.documentNode) {\n            __classPrivateFieldGet(this, _FigspecFileViewer_selectFirstPage, \"f\").call(this);\n            if (this.selectedPage) {\n                this.__updateTree(this.selectedPage);\n                this.resetZoom();\n            }\n        }\n    }\n    updated(changedProperties) {\n        super.updated(changedProperties);\n        if (changedProperties.has(\"documentNode\")) {\n            __classPrivateFieldGet(this, _FigspecFileViewer_selectFirstPage, \"f\").call(this);\n            if (this.selectedPage) {\n                this.__updateTree(this.selectedPage);\n                this.resetZoom();\n            }\n        }\n        if (changedProperties.has(\"renderedImages\")) {\n            this.__updateEffectMargins();\n        }\n    }\n}\n_FigspecFileViewer_selectFirstPage = new WeakMap(), _FigspecFileViewer_handlePageChange = new WeakMap();\n__decorate([\n    property({\n        type: Object,\n        attribute: \"document-node\",\n    })\n], FigspecFileViewer.prototype, \"documentNode\", void 0);\n__decorate([\n    property({\n        type: Object,\n        attribute: \"rendered-images\",\n    })\n], FigspecFileViewer.prototype, \"renderedImages\", void 0);\n","import p, { lazy, useState, useEffect, useMemo, Fragment, Suspense, useCallback } from 'react';\nimport { css, styled, jsx } from '@storybook/theming';\nimport { Placeholder, ActionBar, FlexBar, Separator, Link, IconButton, Icons, Tabs } from '@storybook/components';\nimport { FigspecFileViewer, FigspecFrameViewer } from '@figspec/react';\nimport { useOf } from '@storybook/blocks';\n\nvar he=Object.defineProperty;var N=(e,o)=>()=>(e&&(o=e(e=0)),o);var Fe=(e,o)=>{for(var t in o)he(e,t,{get:o[t],enumerable:!0});};var P,be,Ce,ve,S=N(()=>{P=({config:e,defer:o=!1})=>{let[t,r]=useState(o?void 0:e.url),[n,s]=useState(!1);return useEffect(()=>{if(!o)return;let a=requestAnimationFrame(()=>{r(e.url);});return ()=>cancelAnimationFrame(a)},[o,e.url]),useEffect(()=>{s(!1);},[t]),jsx(\"div\",{css:be},!n&&jsx(Placeholder,{css:Ce},\"Loading...\"),jsx(\"iframe\",{css:ve,src:t,allowFullScreen:e.allowFullscreen,onLoad:()=>s(!0)}))},be=css`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  overflow: hidden;\n`,Ce=css`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n\n  transform: translate(-50%, -50%);\n`,ve=css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n\n  z-index: 1;\n`;});var $,ke,B,L=N(()=>{S();$=/https:\\/\\/[\\w.-]+\\.?figma.com\\/([\\w-]+)\\/([0-9a-zA-Z]{22,128})(?:\\/.*)?$/,ke=e=>$.test(e),B=({config:e})=>{let o=useMemo(()=>ke(e.url)?{url:`https://www.figma.com/embed?embed_host=${e.embedHost||location.hostname}&url=${e.url}`,allowFullscreen:e.allowFullscreen}:(console.warn(`[storybook-addon-designs] The URL you specified is not valid Figma URL.\nThe addon fallbacks to normal iframe mode.For more detail, please check <https://www.figma.com/developers/embed>.`),e),[e.url,e.allowFullscreen,e.embedHost]);return jsx(P,{defer:!0,config:o})};});var q={};Fe(q,{Figspec:()=>E,default:()=>Ee});function D(e){return e.status!==200?Promise.reject(e.statusText):e.json()}function De(e){if(e.accessToken)return e.accessToken;try{return process.env.STORYBOOK_FIGMA_ACCESS_TOKEN??null}catch{return null}}function G(e){return \"absoluteBoundingBox\"in e?[e]:!e.children||e.children.length===0?[]:e.children.map(G).reduce((o,t)=>o.concat(t),[])}var X,E,Ee,H=N(()=>{L();X=css`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;E=({config:e})=>{let[o,t]=useState({state:\"loading\"}),r=async n=>{t({state:\"loading\"});try{let s=e.url.match($);if(!s)throw new Error(e.url+\" is not a valid Figma URL.\");let[,,a]=s,u=new URL(e.url).searchParams.get(\"node-id\"),F=De(e);if(!F)throw new Error(\"Personal Access Token is required.\");let c={\"X-FIGMA-TOKEN\":F},f=new URL(`https://api.figma.com/v1/files/${a}`),i=new URL(`https://api.figma.com/v1/images/${a}`);if(i.searchParams.set(\"format\",\"svg\"),!u){let v=await fetch(f.href,{headers:c,signal:n}).then(k=>D(k)),ue=G(v.document);i.searchParams.set(\"ids\",ue.map(k=>k.id).join(\",\"));let ge=await fetch(i.href,{headers:c,signal:n}).then(k=>D(k));t({state:\"fetched\",value:{type:\"file\",props:{documentNode:v,renderedImages:ge.images,link:e.url}}});return}f.pathname+=\"/nodes\",f.searchParams.set(\"ids\",u),i.searchParams.set(\"ids\",u);let[g,y]=await Promise.all([fetch(f.href,{headers:c,signal:n}).then(v=>D(v)),fetch(i.href,{headers:c,signal:n}).then(v=>D(v))]);t({state:\"fetched\",value:{type:\"frame\",props:{nodes:g,renderedImage:Object.values(y.images)[0],link:e.url}}});}catch(s){if(s instanceof DOMException&&s.code===DOMException.ABORT_ERR)return;console.error(s),t({state:\"failed\",error:s instanceof Error?s.message:String(s)});}};switch(useEffect(()=>{let n=!1,s=()=>{n=!0;},a=new AbortController;return r(a.signal).then(s,s),()=>{n||a.abort();}},[e.url]),o.state){case\"loading\":return jsx(Placeholder,null,jsx(Fragment,null,\"Loading Figma file...\"));case\"failed\":return jsx(Placeholder,null,jsx(Fragment,null,\"Failed to load Figma file\"),jsx(Fragment,null,o.error));case\"fetched\":return o.value.type===\"file\"?jsx(FigspecFileViewer,{css:X,...o.value.props}):jsx(FigspecFrameViewer,{css:X,...o.value.props})}},Ee=E;});L();H();S();var Q=(e,o)=>{let[t,r]=useState([0,0]),[n,s]=useState(!1),a=useCallback(i=>{i.button===0&&(r([i.screenX,i.screenY]),s(!0));},[s,r]),l=useCallback(i=>{let g=i.touches[0];r([g.screenX,g.screenY]),s(!0);},[s,r]),u=useCallback(i=>{n&&r(g=>(e([i[0]-g[0],i[1]-g[1]]),i));},[r,n,...o]),F=useCallback(i=>{let{screenX:g,screenY:y}=i;u([g,y]);},[u]),c=useCallback(i=>{let{screenX:g,screenY:y}=i.touches[0];u([g,y]);},[r,n,...o]),f=useCallback(()=>{r([0,0]),s(!1);},[s,r]);return {onMouseDown:a,onMouseMove:F,onMouseUp:f,onMouseLeave:f,onTouchStart:l,onTouchMove:c,onTouchCancel:f,onTouchEnd:f}};var oe=({children:e,className:o,style:t,defaultValue:r,value:n,onChange:s})=>{let[a,l]=useState([0,0]);useEffect(()=>{l(r||n||[0,0]);},[r]);let u=Q(c=>{s&&s(c),l(f=>[f[0]+c[0],f[1]+c[1]]);},[l,s]),F=useMemo(()=>{let c=n||a;return {transform:`translate(${c[0]}px, ${c[1]}px)`}},[n,a]);return jsx(\"div\",{css:Ne,className:o,style:t,...u},jsx(\"div\",{css:Ue,style:F},e))};var Ne=css`\n  position: relative;\n  overflow: hidden;\n\n  &:active {\n    cursor: move;\n  }\n`,Ue=css`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;var te=({onZoomIn:e,onZoomOut:o,onReset:t})=>jsx(Fragment,null,jsx(IconButton,{onClick:e},jsx(Icons,{icon:\"zoom\"})),jsx(IconButton,{onClick:o},jsx(Icons,{icon:\"zoomout\"})),jsx(IconButton,{onClick:t},jsx(Icons,{icon:\"zoomreset\"})));var re=(e,o)=>{let[t,r]=useState(1);useEffect(()=>{r(e);},o);let n=useCallback(()=>{r(l=>l+.1);},[r]),s=useCallback(()=>{r(l=>Math.max(l-.1,.1));},[r]),a=useCallback(()=>{r(1);},[r]);return {scale:t,zoomIn:n,zoomOut:s,resetZoom:a}};var M=({config:e})=>{let o=re(e.scale||1,[e.scale]),t=useMemo(()=>({transform:`scale(${o.scale})`}),[o.scale]);return jsx(\"div\",{css:_e},jsx(FlexBar,{border:!0},jsx(Fragment,{key:\"left\"},jsx(\"p\",null,jsx(\"b\",null,\"Image\")),jsx(Separator,null),jsx(te,{onReset:o.resetZoom,onZoomIn:o.zoomIn,onZoomOut:o.zoomOut}))),jsx(oe,{css:We,defaultValue:e.offset},jsx(\"img\",{css:Ye,src:e.url,style:t})))};var _e=css`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n`,We=css`\n  flex-grow: 1;\n`,Ye=css`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin: auto;\n\n  pointer-events: none;\n  border-radius: 1px;\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.15);\n`;L();S();var se=({config:e})=>jsx(\"div\",{css:Ge},jsx(Link,{cancel:!1,href:e.url,target:e.target??\"_blank\",rel:e.rel??\"noopener\",withArrow:e.showArrow??!0},e.label||e.url));var Ge=css`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;S();var Qe=e=>{if(e.protocol!==\"https:\")return {valid:!1,error:jsx(Fragment,null,\"Expected HTTPS link, received \",jsx(\"code\",null,e.protocol),\".\")};if(e.hostname!==\"www.sketch.com\")return {valid:!1,error:jsx(Fragment,null,\"Expected a hostname \",jsx(\"code\",null,\"www.sketch.com\"),\", received\",\" \",jsx(\"code\",null,e.hostname))};let o=jsx(Fragment,null,\"Expected pathname \",jsx(\"code\",null,\"/s/<string>/a/<string>\"),\", received\",\" \",jsx(\"code\",null,e.pathname),\".\"),t=e.pathname.split(\"/\").slice(1);if(t.length<4)return {valid:!1,error:o};if(t[0]===\"embed\")return {valid:!0,data:{url:e.href,offscreen:!1}};let[r,n,s,a]=t;return r!==\"s\"||!n||s!==\"a\"||!a?{valid:!1,error:o}:{valid:!0,data:{url:`https://www.sketch.com/embed/s/${n}/a/${a}`,offscreen:!1}}},ae=({config:e})=>{let o=useMemo(()=>{let t=Qe(new URL(e.url));return t.valid?{...t,data:{...e,...t.data}}:t},[e]);return o.valid?jsx(P,{defer:!0,config:o.data}):jsx(Placeholder,null,jsx(Fragment,null,\"Invalid Sketch URL\"),jsx(Fragment,null,o.error))};var ce=({tabs:e,deps:o=[]})=>{let[t,r]=useState(e[0].id);return useEffect(()=>{r(e[0].id);},o),jsx(Tabs,{absolute:!0,selected:t,actions:{onSelect:r}},e.map(n=>jsx(\"div\",{key:n.id,id:n.id,title:n.name},n.offscreen||t===n.id?n.content:null)))};var no=lazy(()=>Promise.resolve().then(()=>(H(),q))),pe=({config:e})=>{if(!e||\"length\"in e&&e.length===0)return jsx(Placeholder,null,jsx(Fragment,null,\"No designs found\"),jsx(Fragment,null,\"Learn how to\",\" \",jsx(Link,{href:\"https://github.com/storybookjs/addon-designs#3-add-it-to-story\",target:\"_blank\",rel:\"noopener\",withArrow:!0,cancel:!1},\"display design preview for the story\")));let o=[...e instanceof Array?e:[e]].map(t=>{let r={id:JSON.stringify(t),name:t.name||t.type?.toUpperCase()||\"ERROR\",offscreen:t.offscreen??!0};switch(t.type){case\"iframe\":return {...r,content:jsx(P,{config:t})};case\"figma\":return {...r,content:jsx(B,{config:t}),offscreen:!1};case\"sketch\":return {...r,content:jsx(ae,{config:t})};case\"figspec\":case\"experimental-figspec\":return t.type===\"experimental-figspec\"&&console.warn(\"[storybook-addon-designs] `experimental-figspec` is deprecated. We will remove it in v7.0. Please replace it to `figspec` type.\"),{...r,content:jsx(Suspense,{fallback:\"Preparing Figspec viewer...\"},jsx(no,{config:t})),offscreen:!1};case\"image\":return {...r,content:jsx(M,{config:t})};case\"link\":return {...r,content:jsx(se,{config:t})}}return {...r,content:jsx(Placeholder,null,jsx(Fragment,null,\"Invalid config type\"),jsx(Fragment,null,\"Config type you set is not supported. Please choose one from\",\" \",jsx(Link,{href:\"https://github.com/storybookjs/addon-designs/blob/master/packages/storybook-addon-designs/src/config.ts\",target:\"_blank\",rel:\"noopener\",withArrow:!0,cancel:!1},\"available config types\")))}});return o.length===1?jsx(\"div\",null,o[0].content):jsx(ce,{tabs:o,deps:[e]})};var de=\"design\";var lo=styled.div(({theme:e})=>`\n  font-family: ${e.typography.fonts.base};\n  font-size: ${e.typography.size.s3}px;\n  margin: 0;\n`),mo=styled.div(({theme:e,height:o=\"60%\",collapsed:t})=>`\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding: 0;\n  padding-top: ${t?\"3em\":typeof o==\"string\"?o:o+\"px\"};\n  margin: 25px 0 40px;\n  border: 1px solid ${e.appBorderColor};\n\n  border-radius: ${e.appBorderRadius}px;\n  box-shadow:\n    ${e.base===\"light\"?\"rgba(0, 0, 0, 0.10) 0 1px 3px 0\":\"rgba(0, 0, 0, 0.20) 0 2px 5px 0\"};\n`),po=styled(Placeholder)`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n\n  transform: translate(-50%, -50%);\n`,T=({children:e,collapsable:o=!0,defaultCollapsed:t=!1,placeholder:r,showLink:n=!0,onCollapsedChange:s,...a})=>{let[l,u]=useState(!!t),F=n&&\"url\"in a;return p.createElement(lo,null,p.createElement(mo,{collapsed:o&&l,...a},o&&l?p.createElement(po,null,r):e,p.createElement(ActionBar,{actionItems:[o&&{title:l?\"Show\":\"Hide\",onClick:()=>{let c=!l;s&&s(c,l),u(c);}},F&&{title:\"Open in new tab\",onClick:()=>window.open(a.url,\"_blank\")}].filter(c=>!!c)})))},or=({placeholder:e,...o})=>p.createElement(T,{placeholder:e??\"Design (Figma)\",...o},p.createElement(B,{config:{type:\"figma\",...o}})),tr=({placeholder:e,...o})=>p.createElement(T,{placeholder:e??\"Design (Figma-Spec)\",...o},p.createElement(E,{config:{type:\"figspec\",...o}})),rr=({placeholder:e,...o})=>p.createElement(T,{placeholder:e??\"Design (iframe)\",...o},p.createElement(P,{config:o})),nr=({placeholder:e,...o})=>p.createElement(T,{placeholder:e??\"Design (Image)\",...o},p.createElement(M,{config:{type:\"image\",...o}})),fo=styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  overflow: auto;\n`,sr=e=>{let{of:o,placeholder:t,...r}=e;if(\"of\"in e&&o===void 0)throw new Error(\"Unexpected `of={undefined}`, did you mistype a CSF file reference?\");let{story:n}=useOf(o||\"story\",[\"story\"]);return p.createElement(T,{placeholder:t??\"Design\",...r},p.createElement(fo,null,p.createElement(pe,{config:n.parameters[de]})))};\n\nexport { sr as Design, T as DocBlockBase, or as Figma, tr as Figspec, rr as IFrame, nr as Image };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=blocks.mjs.map"],"names":[],"sourceRoot":""}